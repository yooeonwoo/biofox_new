name: Production Deployment

on:
  push:
    branches: [ main ]
  release:
    types: [ published ]

# 동시에 하나의 배포만 실행되도록 설정
concurrency:
  group: production-deploy
  cancel-in-progress: false

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests before deployment
        run: |
          npm run lint
          npm run test
          npx tsc --noEmit
          
      - name: Build for production
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          
      # Vercel 배포 (실제 배포 플랫폼에 맞게 수정 필요)
      - name: Deploy to Vercel
        id: deploy
        uses: vercel/action@v1
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          
      # 대안: Docker 배포를 사용하는 경우
      # - name: Build Docker image
      #   run: docker build -t biofox-kol:${{ github.sha }} .
      #   
      # - name: Deploy to production server
      #   run: |
      #     # 실제 배포 스크립트 실행
      #     echo "Deploying to production..."
          
  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    steps:
      - name: Notify success
        if: needs.deploy.result == 'success'
        run: |
          echo "✅ 배포가 성공적으로 완료되었습니다!"
          # Slack, Discord 등 알림 설정 가능
          
      - name: Notify failure
        if: needs.deploy.result == 'failure'
        run: |
          echo "❌ 배포가 실패했습니다."
          # 실패 알림 설정 