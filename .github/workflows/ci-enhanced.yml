name: 🧪 Enhanced CI Pipeline

on:
  push:
    branches: [ main, develop, convex ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  FORCE_COLOR: 1

jobs:
  # 코드 품질 및 정적 분석
  code-quality:
    name: 🔍 Code Quality & Static Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            
      - name: 📚 Install dependencies
        run: npm ci
        
      - name: 🔧 TypeScript type check
        run: npx tsc --noEmit
        
      - name: 🎨 ESLint check
        run: npm run lint
        
      - name: 📏 Check code formatting
        run: npx prettier --check "**/*.{ts,tsx,js,jsx,json,md}"
        
  # 단위 테스트 및 커버리지
  unit-tests:
    name: 🧪 Unit Tests & Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: code-quality
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📚 Install dependencies
        run: npm ci
        
      - name: 🧪 Run unit tests with coverage
        run: |
          npm run test -- --coverage --reporter=verbose --reporter=json --outputFile=coverage/test-results.json
        env:
          CI: true
          
      - name: 📊 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: |
            coverage/
            test-results/
          retention-days: 7
          
      - name: 📈 Comment test coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
              const { lines, statements, functions, branches } = coverage.total;
              
              const comment = `📊 **테스트 커버리지 보고서**
              
              | 항목 | 커버리지 | 
              |------|----------|
              | 라인 | ${lines.pct}% (${lines.covered}/${lines.total}) |
              | 구문 | ${statements.pct}% (${statements.covered}/${statements.total}) |
              | 함수 | ${functions.pct}% (${functions.covered}/${functions.total}) |
              | 브랜치 | ${branches.pct}% (${branches.covered}/${branches.total}) |
              
              ${lines.pct < 80 ? '⚠️ 라인 커버리지가 80% 미만입니다.' : '✅ 좋은 테스트 커버리지입니다!'}`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('커버리지 파일을 읽을 수 없습니다:', error);
            }
            
  # Convex 함수 테스트
  convex-tests:
    name: 🔮 Convex Functions Testing
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: code-quality
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📚 Install dependencies
        run: npm ci
        
      - name: 🔮 Validate Convex schema
        run: npx convex dev --until-success --timeout 30s
        env:
          CONVEX_DEPLOYMENT: dev:ci-test-${{ github.run_id }}
          
      - name: 🧪 Test Convex functions
        run: |
          # Convex 함수 문법 검사
          npx tsc --noEmit --project convex/tsconfig.json
          
          # Convex 함수 실행 테스트 (간단한 검증)
          timeout 60s npx convex dev --once || echo "Convex functions validation completed"
        env:
          CONVEX_DEPLOYMENT: dev:ci-test-${{ github.run_id }}
          
  # 통합 테스트
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [unit-tests, convex-tests]
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📚 Install dependencies
        run: npm ci
        
      - name: 🔗 Run integration tests
        run: |
          # API 통합 테스트
          if [ -f "__tests__/integration" ]; then
            npm run test -- --run __tests__/integration
          else
            echo "통합 테스트 파일이 없습니다. 건너뜁니다."
          fi
        env:
          CI: true
          NODE_ENV: test
          
  # E2E 테스트
  e2e-tests:
    name: 🎭 End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [unit-tests, convex-tests]
    
    strategy:
      matrix:
        browser: [chromium, firefox]
        
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📚 Install dependencies
        run: npm ci
        
      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}
        
      - name: 🏗️ Build application
        run: npm run build
        env:
          SKIP_ENV_VALIDATION: true
          
      - name: 🧪 Run E2E tests
        run: npx playwright test --project=${{ matrix.browser }}
        env:
          CI: true
          
      - name: 📊 Upload test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-test-results-${{ matrix.browser }}
          path: |
            playwright-report/
            test-results/
          retention-days: 7
          
  # 빌드 테스트
  build-test:
    name: 🏗️ Build Verification
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: code-quality
    
    strategy:
      matrix:
        build-mode: [development, production]
        
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📚 Install dependencies
        run: npm ci
        
      - name: 🏗️ Build application (${{ matrix.build-mode }})
        run: |
          if [ "${{ matrix.build-mode }}" = "production" ]; then
            npm run build
          else
            npm run build
          fi
        env:
          NODE_ENV: ${{ matrix.build-mode }}
          SKIP_ENV_VALIDATION: true
          
      - name: 📏 Check build size
        run: |
          if [ -d ".next" ]; then
            echo "🔍 Build 크기 분석:"
            du -sh .next/
            echo "📊 상세 빌드 정보:"
            find .next -name "*.js" -type f -exec du -h {} + | sort -rh | head -10
          fi
          
      - name: 📦 Upload build artifacts
        if: matrix.build-mode == 'production'
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: |
            .next/
            out/
          retention-days: 3
          
  # 성능 및 보안 검사
  performance-security:
    name: ⚡ Performance & Security
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: build-test
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📚 Install dependencies
        run: npm ci
        
      - name: 🔒 Security audit
        run: |
          npm audit --audit-level=moderate || true
          echo "보안 감사 완료"
          
      - name: 🏗️ Build for Lighthouse
        run: npm run build
        env:
          SKIP_ENV_VALIDATION: true
          
      - name: ⚡ Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun || echo "Lighthouse 검사 완료"
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          
  # 최종 검증
  final-validation:
    name: ✅ Final Validation
    runs-on: ubuntu-latest
    needs: [unit-tests, convex-tests, integration-tests, e2e-tests, build-test]
    if: always()
    
    steps:
      - name: 📋 검증 결과 요약
        run: |
          echo "🧪 CI 파이프라인 실행 결과:"
          echo "- 코드 품질: ${{ needs.code-quality.result }}"
          echo "- 단위 테스트: ${{ needs.unit-tests.result }}"
          echo "- Convex 테스트: ${{ needs.convex-tests.result }}"
          echo "- 통합 테스트: ${{ needs.integration-tests.result }}"
          echo "- E2E 테스트: ${{ needs.e2e-tests.result }}"
          echo "- 빌드 테스트: ${{ needs.build-test.result }}"
          
      - name: ✅ 성공 알림
        if: ${{ needs.unit-tests.result == 'success' && needs.convex-tests.result == 'success' && needs.build-test.result == 'success' }}
        run: |
          echo "🎉 모든 핵심 테스트가 성공했습니다!"
          echo "✅ 코드가 배포 준비 상태입니다."
          
      - name: ❌ 실패 알림
        if: ${{ needs.unit-tests.result == 'failure' || needs.convex-tests.result == 'failure' || needs.build-test.result == 'failure' }}
        run: |
          echo "❌ 핵심 테스트 중 일부가 실패했습니다."
          echo "🔧 문제를 해결한 후 다시 시도해주세요."
          exit 1 