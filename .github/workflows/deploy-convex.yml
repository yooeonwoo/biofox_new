name: üöÄ Convex Deployment Pipeline

on:
  push:
    branches: [ main, develop, convex ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

# ÎèôÏãúÏóê ÌïòÎÇòÏùò Î∞∞Ìè¨Îßå Ïã§ÌñâÎêòÎèÑÎ°ù ÏÑ§Ï†ï
concurrency:
  group: convex-deploy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # ÏΩîÎìú ÌíàÏßà Î∞è ÌÖåÏä§Ìä∏
  quality-check:
    name: üîç Quality & Testing
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        
      - name: ‚ö° Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: üì¶ Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            .next/cache
          key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-deps-
            
      - name: üìö Install dependencies
        run: npm ci
        
      - name: üîß TypeScript type check
        run: npx tsc --noEmit
        
      - name: üé® Lint code
        run: npm run lint
        
      - name: üß™ Run unit tests
        run: npm run test
        
      - name: üèóÔ∏è Build application
        run: npm run build
        env:
          SKIP_ENV_VALIDATION: true
          
  # Convex Ìï®Ïàò Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
  convex-validation:
    name: üîÆ Convex Functions Validation
    runs-on: ubuntu-latest
    needs: quality-check
    timeout-minutes: 10
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        
      - name: ‚ö° Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: üìö Install dependencies
        run: npm ci
        
      - name: üîç Validate Convex functions
        run: npm run test:convex
        working-directory: ./
          
  # Preview Î∞∞Ìè¨ (PRÏö©)
  deploy-preview:
    name: üåü Deploy Preview
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [quality-check, convex-validation]
    timeout-minutes: 10
    
    environment:
      name: preview
      url: ${{ steps.preview-deploy.outputs.deployment-url }}
      
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        
      - name: ‚ö° Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: üìö Install dependencies
        run: npm ci
        
             - name: üöÄ Deploy to Convex Preview
         id: preview-deploy
         run: |
           npm run deploy:preview
           echo "deployment-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
         env:
           CONVEX_PREVIEW_DEPLOYMENT_KEY: ${{ secrets.CONVEX_PREVIEW_DEPLOY_KEY }}
           DEPLOYMENT_URL: ""
          
      - name: üí¨ Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üåü **Preview deployment ready!**\n\nüì± Preview URL: ${{ steps.preview-deploy.outputs.deployment-url }}\n\n‚ö° Deployment ID: \`${{ github.run_id }}\``
            })
            
  # Ïä§ÌÖåÏù¥Ïßï Î∞∞Ìè¨ (develop Î∏åÎûúÏπò)
  deploy-staging:
    name: üß™ Deploy Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    needs: [quality-check, convex-validation]
    timeout-minutes: 15
    
    environment:
      name: staging
      url: ${{ steps.staging-deploy.outputs.deployment-url }}
      
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        
      - name: ‚ö° Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: üìö Install dependencies
        run: npm ci
        
      - name: üß™ Run comprehensive tests
        run: |
          npm run test
          npm run test:e2e
        env:
          # Ïä§ÌÖåÏù¥Ïßï ÌÖåÏä§Ìä∏ ÌôòÍ≤ΩÎ≥ÄÏàò
          NEXT_PUBLIC_CONVEX_URL: ${{ secrets.STAGING_CONVEX_URL }}
          
             - name: üöÄ Deploy to Convex Staging
         id: staging-deploy
         run: |
           npm run deploy:staging
           echo "deployment-url=$CONVEX_STAGING_URL" >> $GITHUB_OUTPUT
         env:
           CONVEX_STAGING_DEPLOYMENT_KEY: ${{ secrets.CONVEX_STAGING_DEPLOY_KEY }}
           CONVEX_STAGING_URL: ${{ secrets.CONVEX_STAGING_URL }}
          
      - name: ‚úÖ Verify staging deployment
        run: node scripts/verify-deployment.js
        env:
          DEPLOYMENT_URL: ${{ steps.staging-deploy.outputs.deployment-url }}
          VERIFICATION_TIMEOUT: 60000
          
  # ÌîÑÎ°úÎçïÏÖò Î∞∞Ìè¨ (main Î∏åÎûúÏπò)
  deploy-production:
    name: üöÄ Deploy Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [quality-check, convex-validation]
    timeout-minutes: 20
    
    environment:
      name: production
      url: ${{ steps.production-deploy.outputs.deployment-url }}
      
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        
      - name: ‚ö° Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: üìö Install dependencies
        run: npm ci
        
      - name: üß™ Final testing before production
        run: |
          npm run test
          npm run lint
          npx tsc --noEmit
          
             - name: üöÄ Deploy to Convex Production
         id: production-deploy
         run: |
           npm run deploy
           echo "deployment-url=$CONVEX_URL" >> $GITHUB_OUTPUT
         env:
           CONVEX_DEPLOYMENT_KEY: ${{ secrets.CONVEX_PRODUCTION_DEPLOY_KEY }}
           CONVEX_URL: ${{ secrets.CONVEX_URL }}
           NODE_ENV: production
          
  # Î∞∞Ìè¨ ÏïåÎ¶º
  notify-deployment:
    name: üì¢ Deployment Notification
    runs-on: ubuntu-latest
    if: always() && (needs.deploy-staging.result != 'skipped' || needs.deploy-production.result != 'skipped')
    needs: [deploy-staging, deploy-production]
    
    steps:
      - name: üéâ Success notification
        if: ${{ needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success' }}
        run: |
          echo "‚úÖ Deployment completed successfully!"
          echo "Environment: ${{ needs.deploy-staging.result == 'success' && 'Staging' || 'Production' }}"
          echo "Commit: ${{ github.sha }}"
          
      - name: ‚ùå Failure notification
        if: ${{ needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure' }}
        run: |
          echo "‚ùå Deployment failed!"
          echo "Environment: ${{ needs.deploy-staging.result == 'failure' && 'Staging' || 'Production' }}"
          echo "Commit: ${{ github.sha }}"
          echo "Please check the deployment logs and fix the issues." 