<?xml version="1.0" encoding="UTF-8"?>
<code>
  <file path="project_structure.txt">
./.DS_Store
./.claude/settings.local.json
./.cursor/rules/biofoxkollrule.mdc
./.env.example
./.env.local
./.gitattributes
./.gitignore
./app/admin-dashboard/entities/page.tsx
./app/admin-dashboard/kol-dashboard/page.tsx
./app/admin-dashboard/kol-data-entry/components/kol-data-entry.tsx
./app/admin-dashboard/kol-data-entry/components/shop-data-entry.tsx
./app/admin-dashboard/kol-data-entry/page.tsx
./app/admin-dashboard/kol-data-entry/shop-page.tsx
./app/admin-dashboard/kol-metrics/page.tsx
./app/admin-dashboard/layout.tsx
./app/admin-dashboard/main/page.tsx
./app/admin-dashboard/page.tsx
./app/admin-dashboard/product-sales/page.tsx
./app/admin-dashboard/shop-sales/page.tsx
./app/admin-dashboard/user-management/page.tsx
./app/api/admin-dashboard/kol-metrics/route.ts
./app/api/admin-dashboard/product-sales/route.ts
./app/api/admin-dashboard/shop-sales/route.ts
./app/api/admin/users/route.ts
./app/api/auth/check-email/route.ts
./app/api/kol-new/activities/route.ts
./app/api/kol-new/dashboard/route.ts
./app/api/kol-new/monthly-sales/route.ts
./app/api/kol-new/notifications/[id]/read/route.ts
./app/api/kol-new/notifications/read-all/route.ts
./app/api/kol-new/notifications/route.ts
./app/api/kol-new/notifications/route.ts.bak
./app/api/kol-new/notifications/test/route.ts
./app/api/kol-new/product-ratio/route.ts
./app/api/kol-new/shop-product-ratio/[shopId]/route.ts
./app/api/kol-new/shops/route.ts
./app/api/kol-new/tasks/route.ts
./app/api/webhooks/clerk/route.ts
./app/components/LoginButtons.tsx
./app/components/admin/EntityModals.tsx
./app/components/admin/EntitySidebar.tsx
./app/components/admin/EntityTable.tsx
./app/components/admin/UserModals.tsx
./app/components/dashboard/MetricCard.tsx
./app/components/layout/KolFooter.tsx
./app/components/layout/KolHeader.tsx
./app/components/layout/KolMobileMenu.tsx
./app/components/layout/KolSidebar.tsx
./app/components/store-ranking-table.tsx
./app/globals.css
./app/kol-new/activities/page.tsx
./app/kol-new/layout.tsx
./app/kol-new/notifications/page.tsx
./app/kol-new/page.tsx
./app/kol-new/stores/page.tsx
./app/layout.tsx
./app/page.tsx
./app/signin/[[...rest]]/page.tsx
./app/signup/[[...rest]]/page.tsx
./components.json
./components/sales-chart.tsx
./components/store-ranking-table.tsx
./components/ui/Aurora.css
./components/ui/Aurora.tsx
./components/ui/accordion.tsx
./components/ui/aceternity/3d-card.tsx
./components/ui/aceternity/moving-border.tsx
./components/ui/aceternity/spotlight.tsx
./components/ui/aceternity/text-reveal-card.tsx
./components/ui/aceternity/text-reveal.tsx
./components/ui/alert.tsx
./components/ui/animated-tooltip.tsx
./components/ui/avatar.tsx
./components/ui/badge.tsx
./components/ui/bento-grid.tsx
./components/ui/button.tsx
./components/ui/card.tsx
./components/ui/collapsible.tsx
./components/ui/dialog.tsx
./components/ui/dropdown-menu.tsx
./components/ui/error-message.tsx
./components/ui/error-toast.tsx
./components/ui/fox-logo.tsx
./components/ui/input.tsx
./components/ui/label.tsx
./components/ui/outlined-text.tsx
./components/ui/select.tsx
./components/ui/separator.tsx
./components/ui/sheet.tsx
./components/ui/sidebar.tsx
./components/ui/sonner.tsx
./components/ui/table.tsx
./components/ui/tabs.tsx
./components/ui/textarea.tsx
./components/ui/theme-provider.tsx
./components/ui/toast-provider.tsx
./components/ui/toast.tsx
./components/ui/toaster.tsx
./components/ui/use-toast.ts
./components/upcoming-tasks.tsx
./db/index.ts
./db/init-rpc.ts
./db/migrate.ts
./db/migrations/sales-commission.ts
./db/schema.ts
./db/schema.ts.backup
./db/utils/execute-sql.ts
./db/utils/index.ts
./docs/newtable_tasklist.md
./docs/.DS_Store
./docs/admin_dashboard_implementation.md
./docs/admin_dashboard_user_guide.md
./docs/데이터넣기/kol_데이터입력_체크리스트.md
./docs/데이터넣기/kol과전문점데이터.md
./docs/데이터넣기/kol과전문점데이터_체계화.md
./docs/데이터넣기/kol과전문점의매출수당.md
./docs/데이터넣기/데이터.md
./drizzle.config.ts
./drizzle.config.ts.backup
./drizzle/migrations/0006_update_schema.sql
./drizzle/migrations/meta/0000_snapshot.json
./drizzle/migrations/meta/0001_snapshot.json
./drizzle/migrations/meta/0002_snapshot.json
./drizzle/migrations/meta/0006_snapshot.json
./drizzle/migrations/meta/_journal.json
./eslint.config.mjs
./hooks/use-toast.ts
./img/logo.png
./lib/api-fetch.ts
./lib/auth.ts
./lib/clerk-client.ts
./lib/clerk-direct-api.ts
./lib/clerk/admin.ts
./lib/date-utils.ts
./lib/db.ts
./lib/supabase-admin.ts
./lib/supabase-client.ts
./lib/supabase.ts
./lib/types.ts
./lib/utils.ts
./middleware.ts
./next-env.d.ts
./next.config.js
./package-lock.json
./package.json
./postcss.config.mjs
./project_structure.txt
./public/favicon.ico
./public/file.svg
./public/globe.svg
./public/images/biofox-logo.png
./public/next.svg
./public/vercel.svg
./public/window.svg
./tailwind.config.ts
./tsconfig.json
./tsconfig.tsbuildinfo
./types/notification.ts
./utils/cn.ts
</file>
  <file path=".gitattributes">
*.pdf filter=lfs diff=lfs merge=lfs -text
*.zip filter=lfs diff=lfs merge=lfs -text
*.psd filter=lfs diff=lfs merge=lfs -text
*.png filter=lfs diff=lfs merge=lfs -text
*.jpg filter=lfs diff=lfs merge=lfs -text
*.jpeg filter=lfs diff=lfs merge=lfs -text
*.gif filter=lfs diff=lfs merge=lfs -text
*.svg filter=lfs diff=lfs merge=lfs -text
</file>
  <file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
</file>
  <file path=".env.example">
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_bmVhdC10ZWFsLTU4LmNsZXJrLmFjY291bnRzLmRldiQ
CLERK_SECRET_KEY=sk_test_aH4Eun8GIybFJhN1UfqbIM6Wrt85uhpySrotblnZDZ

# Supabase 연결 정보 (수정된 부분)
NEXT_PUBLIC_SUPABASE_URL=https://lgzzqoaiukuywmenxzay.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imxnenpxb2FpdWt1eXdtZW54emF5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI2OTY5MjMsImV4cCI6MjA1ODI3MjkyM30.QfpzIOe8C8KFY8C69xcTCu1zZdP2XNbAJogeLMQL_e4
SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imxnenpxb2FpdWt1eXdtZW54emF5Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0MjY5NjkyMywiZXhwIjoyMDU4MjcyOTIzfQ.d0yzEG6zRa3xs897zgS02f8WGOvH7Qh3GM83DNIdxxA

# 데이터베이스 연결 정보 (수정된 부분)
DATABASE_URL=postgresql://postgres:qkdldhvhrtm1!@db.lgzzqoaiukuywmenxzay.supabase.co:5432/postgres

NEXT_PUBLIC_SUPABASE_PROJECT_ID=lgzzqoaiukuywmenxzay
NEXT_PUBLIC_APP_URL=http://localhost:3000
</file>
  <file path="eslint.config.mjs">
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
  {
    rules: {
      // 빌드 과정에서 경고만 표시하고 오류로 취급하지 않도록 설정
      "@typescript-eslint/no-unused-vars": "warn",
      "@typescript-eslint/no-explicit-any": "warn",
      "react-hooks/exhaustive-deps": "warn",
      "react/no-unescaped-entities": "off",
    }
  }
];

export default eslintConfig;
</file>
  <file path="postcss.config.mjs">
/** @type {import('postcss').Config} */
export default {
  plugins: {
    'tailwindcss/nesting': {},
    tailwindcss: {},
    autoprefixer: {},
  },
};
</file>
  <file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    },
    "baseUrl": "."
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>
  <file path="tailwind.config.ts">
import type { Config } from "tailwindcss";

const config: Config = {
    darkMode: ['class'],
    content: [
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
  	extend: {
  		colors: {
  			'biofox-purple': '#6D28D9',
  			'biofox-purple-light': '#C0A6E3',
  			'dark-gray-1': '#383B44',
  			'dark-gray-2': '#2E3035'
  		},
  		boxShadow: {
  			'aura': '0 0 15px rgba(192, 166, 227, 0.5)'
  		},
  		borderRadius: {
  			'brand': '8px'
  		},
  		keyframes: {
  			'accordion-down': {
  				from: {
  					height: '0'
  				},
  				to: {
  					height: 'var(--radix-accordion-content-height)'
  				}
  			},
  			'accordion-up': {
  				from: {
  					height: 'var(--radix-accordion-content-height)'
  				},
  				to: {
  					height: '0'
  				}
  			}
  		},
  		animation: {
  			'accordion-down': 'accordion-down 0.2s ease-out',
  			'accordion-up': 'accordion-up 0.2s ease-out'
  		}
  	}
  },
};

export default config;
</file>
  <file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# 의존성 디렉토리
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions
npm-debug.log
yarn-debug.log
yarn-error.log
.pnpm-debug.log

# 환경 설정 파일
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# 빌드 디렉토리
/.next/
/out/
/build
/dist/

# 캐시 디렉토리
.cache/
.npm/

# 테스트
/coverage

# 로그 파일
logs
*.log

# 에디터 설정 파일
.idea/
.vscode/
*.swp
*.swo

# OS 생성 파일
.DS_Store
*.pem
Thumbs.db

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

# clerk configuration (can include secrets)
/.clerk/

# 기타
.cursor/

# 중첩된 Git 저장소
biofox-kol/
n8n-workflow-builder/

**/.claude/settings.local.json
</file>
  <file path="next.config.js">
/** @type {import('next').NextConfig} */
const nextConfig = {
  // 성능 최적화 설정
  poweredByHeader: false,
  reactStrictMode: true,
  
  // 이미지 최적화
  images: {
    formats: ['image/avif', 'image/webp'],
    remotePatterns: [
      {
        protocol: 'https',
        hostname: '**',
      },
    ],
    deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],
    imageSizes: [16, 32, 48, 64, 96, 128, 256, 384],
    minimumCacheTTL: 60,
    dangerouslyAllowSVG: true,
    contentDispositionType: 'attachment',
  },
  
  // 실험적 기능 활성화
  experimental: {
    // 병렬 라우트 최적화
    optimizePackageImports: [
      'recharts',
      'lucide-react',
      '@radix-ui/react-dialog',
      '@radix-ui/react-select',
    ],
  },
  
  // 매니페스트 최적화 (PWA)
  productionBrowserSourceMaps: false,
  
  // Vercel 배포 시 타입스크립트 및 ESLint 오류 무시
  typescript: {
    ignoreBuildErrors: true,
  },
  eslint: {
    ignoreDuringBuilds: true,
  },
  
  // Service Worker 설정
  webpack: (config, { isServer }) => {
    if (!isServer) {
      config.resolve.fallback = {
        ...config.resolve.fallback,
        fs: false,
      };
    }
    return config;
  },
};

module.exports = nextConfig;
</file>
  <file path="middleware.ts">
import { clerkMiddleware, createRouteMatcher } from '@clerk/nextjs/server';
import { NextResponse } from 'next/server';

// 공개 라우트(로그인 없이 접근 가능)
const publicPaths = [
  "/",
  "/signin(.*)",
  "/signup(.*)",
  "/api/webhooks(.*)"
];

// 미들웨어에서 무시할 경로 (리다이렉트 고려 대상에서 제외)
const ignorePaths = [
  "/kol-new(.*)",
  "/admin-dashboard(.*)",
  "/api/(.*)"
];

// 역할별 기본 랜딩 페이지
const roleLandingPages = {
  "admin": "/admin-dashboard/main",
  "kol": "/kol-new"
};

// 가상 테스트용 역할 맵핑 (실제로는 DB나 Clerk 메타데이터에서 가져와야 함)
const TEST_ROLE_MAPPING: Record<string, string> = {
  // 특정 사용자 ID에 역할 지정 (실제 프로젝트에서는 DB나 Clerk 메타데이터에서 가져와야 함)
  "user_example1": "본사관리자",
  "user_example2": "kol",
};

const isPublicRoute = createRouteMatcher(publicPaths);
const isIgnoredRoute = createRouteMatcher(ignorePaths);

export default clerkMiddleware(async (auth, req) => {
  console.log('미들웨어 처리 중:', req.nextUrl.pathname);
  
  // 공개 경로인 경우 인증 검사 건너뛰기
  if (isPublicRoute(req)) {
    console.log('공개 경로 접근:', req.nextUrl.pathname);
    return NextResponse.next();
  }
  
  // 무시할 경로인 경우 (kol-new, API 등) 처리를 다음 미들웨어나 핸들러에 위임
  if (isIgnoredRoute(req)) {
    console.log('무시할 경로 접근:', req.nextUrl.pathname);
    return NextResponse.next();
  }

  // 인증 상태 확인 (비동기 처리)
  const { userId, sessionClaims } = await auth();
  
  // 인증되지 않은 경우
  if (!userId) {
    console.log('인증되지 않은 사용자, 로그인 페이지로 리다이렉트');
    const signInUrl = new URL('/signin', req.url);
    signInUrl.searchParams.set('redirect_url', req.nextUrl.pathname);
    return NextResponse.redirect(signInUrl);
  }
  
  // 테스트를 위한 임시 역할 할당 (실제로는 sessionClaims에서 가져와야 함)
  const userRole = sessionClaims?.role || (userId ? TEST_ROLE_MAPPING[userId] : undefined) || "kol";
  console.log('사용자 역할:', userRole, '현재 경로:', req.nextUrl.pathname);
  
  // 사용자가 루트 경로(/) 또는 /dashboard로 접근하는 경우 역할별 리다이렉트
  if (req.nextUrl.pathname === "/" || req.nextUrl.pathname === "/dashboard") {
    const landingPage = roleLandingPages[userRole as keyof typeof roleLandingPages] || "/kol-new";
    console.log(`${userRole} 사용자가 ${req.nextUrl.pathname} 접근, ${landingPage}로 리다이렉트`);
    return NextResponse.redirect(new URL(landingPage, req.url));
  }
  
  // KOL 역할 사용자가 /kol로 시작하는 경로에 접근하면 /kol-new로 리다이렉트
  if (userRole === "kol" && req.nextUrl.pathname.startsWith("/kol")) {
    console.log('KOL이 /kol 경로 접근, kol-new로 리다이렉트');
    return NextResponse.redirect(new URL("/kol-new", req.url));
  }

  return NextResponse.next();
});

// Static files 및 public 폴더에서는 미들웨어 실행 방지
export const config = {
  matcher: ["/((?!.*\\..*|_next).*)", "/(api|trpc)(.*)"],
};
</file>
  <file path="package.json">
{
  "name": "biofox-kol",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "build-force": "cross-env NEXT_SKIP_TYPESCRIPT_CHECK=true NEXT_FORCE_RESOLVE_ROUTES=true next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@clerk/clerk-sdk-node": "^4.13.23",
    "@clerk/localizations": "^3.13.2",
    "@clerk/nextjs": "^6.19.2",
    "@neondatabase/serverless": "^1.0.0",
    "@radix-ui/react-accordion": "^1.2.3",
    "@radix-ui/react-avatar": "^1.1.3",
    "@radix-ui/react-collapsible": "^1.1.3",
    "@radix-ui/react-dialog": "^1.1.6",
    "@radix-ui/react-dropdown-menu": "^2.1.6",
    "@radix-ui/react-label": "^2.1.2",
    "@radix-ui/react-select": "^2.1.6",
    "@radix-ui/react-separator": "^1.1.2",
    "@radix-ui/react-slot": "^1.1.2",
    "@radix-ui/react-tabs": "^1.1.3",
    "@supabase/auth-helpers-nextjs": "^0.10.0",
    "@supabase/ssr": "^0.6.1",
    "@supabase/supabase-js": "^2.49.4",
    "@tabler/icons-react": "^3.31.0",
    "@types/recharts": "^1.8.29",
    "chart.js": "^4.4.8",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "date-fns": "^4.1.0",
    "dotenv": "^16.4.7",
    "drizzle-kit": "^0.30.5",
    "drizzle-orm": "^0.41.0",
    "framer-motion": "^12.5.0",
    "lucide-react": "^0.483.0",
    "next": "^15.2.3",
    "next-themes": "^0.4.6",
    "ogl": "^1.0.11",
    "pg": "^8.15.6",
    "postgres": "^3.4.5",
    "react": "^19.1.0",
    "react-chartjs-2": "^5.3.0",
    "react-dom": "^19.1.0",
    "recharts": "^2.15.1",
    "sonner": "^2.0.1",
    "svix": "^1.62.0",
    "tailwind-merge": "^3.2.0",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@types/node": "20.17.27",
    "@types/pg": "^8.11.11",
    "@types/react": "19.0.12",
    "@types/react-dom": "^19",
    "autoprefixer": "^10.4.17",
    "cross-env": "^7.0.3",
    "eslint": "^9",
    "eslint-config-next": "15.2.3",
    "postcss": "^8.4.35",
    "tailwindcss": "^3.4.1",
    "typescript": "5.8.2"
  }
}
</file>
</code>