<?xml version="1.0" encoding="UTF-8"?>
<code>
  <file path="app/admin-dashboard/entities/page.tsx">
"use client";

import { useState, useEffect } from 'react';
import { createClient } from '@supabase/supabase-js';
import { 
  Users, Store, PlusCircle, Search, Edit, Trash, 
  ChevronDown, ChevronRight, AlertCircle 
} from 'lucide-react';

// 컴포넌트 임포트
import EntitySidebar from '@/app/components/admin/EntitySidebar';
import EntityTable from '@/app/components/admin/EntityTable';
import { KolModal, ShopModal, DeleteModal } from '@/app/components/admin/EntityModals';

// 타입 정의
type KOL = {
  id: number;
  name: string;
  shop_name: string;
  region: string;
  status: string;
  email?: string;
  user_id?: string;
};

type Shop = {
  id: number;
  shop_name: string;
  owner_name: string;
  kol_id?: number;
  region: string;
  status: string;
  email?: string;
};

// Supabase 응답 타입 수정
interface KolWithUserData {
  id: number;
  name: string;
  shop_name: string;
  region: string;
  status: string;
  user_id: string;
}

// ShopWithUserData 인터페이스 수정 (users 필드 제거)
interface ShopWithUserData {
  id: number;
  shop_name: string;
  owner_name: string;
  kol_id?: number;
  region: string;
  status: string;
}

// KOL 모달 인터페이스 업데이트
interface KolModalProps {
  isOpen: boolean;
  onClose: () => void;
  selectedKol: KOL | null;
  kolForm: {
    name: string;
    shop_name: string;
    region: string;
    email: string;
  };
  setKolForm: (form: { name: string; shop_name: string; region: string; email: string }) => void;
  onSubmit: () => void;
}

// 전문점 모달 인터페이스 업데이트
interface ShopModalProps {
  isOpen: boolean;
  onClose: () => void;
  selectedShop: Shop | null;
  shopForm: {
    shop_name: string;
    owner_name: string;
    kol_id: string;
    region: string;
    email: string;
  };
  setShopForm: (form: { shop_name: string; owner_name: string; kol_id: string; region: string; email: string }) => void;
  onSubmit: () => void;
  kols: KOL[];
}

// KOL 및 전문점 관리 페이지
export default function EntitiesPage() {
  const [supabaseUrl, setSupabaseUrl] = useState<string>('');
  const [supabaseKey, setSupabaseKey] = useState<string>('');
  const [isInitialized, setIsInitialized] = useState<boolean>(false);
  const [supabase, setSupabase] = useState<any>(null);
  
  // Supabase 초기화
  useEffect(() => {
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || '';
    const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || '';
    
    setSupabaseUrl(supabaseUrl);
    setSupabaseKey(supabaseKey);
    
    if (supabaseUrl && supabaseKey) {
      console.log('Supabase 클라이언트 초기화: URL과 Key가 설정되었습니다.');
      try {
        const client = createClient(supabaseUrl, supabaseKey);
        setSupabase(client);
        setIsInitialized(true);
      } catch (error: any) {
        console.error('Supabase 클라이언트 초기화 중 오류:', 
          error.message || '알 수 없는 오류');
        alert('데이터베이스 연결에 실패했습니다. 관리자에게 문의하세요.');
      }
    } else {
      console.error('Supabase 클라이언트 초기화 실패: URL 또는 Key가 설정되지 않았습니다.');
      if (!supabaseUrl) console.error('NEXT_PUBLIC_SUPABASE_URL이 설정되지 않았습니다.');
      if (!supabaseKey) console.error('NEXT_PUBLIC_SUPABASE_ANON_KEY가 설정되지 않았습니다.');
      alert('데이터베이스 설정이 잘못되었습니다. 관리자에게 문의하세요.');
    }
  }, []);

  const [kols, setKols] = useState<KOL[]>([]);
  const [shops, setShops] = useState<Shop[]>([]);
  const [shopsByKol, setShopsByKol] = useState<{[key: number]: Shop[]}>({});
  const [isLoading, setIsLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState('');
  
  // 확장 상태
  const [expandedKolId, setExpandedKolId] = useState<number | null>(null);
  
  // 모달 상태
  const [isKolModalOpen, setIsKolModalOpen] = useState(false);
  const [isShopModalOpen, setIsShopModalOpen] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [deleteType, setDeleteType] = useState<'kol' | 'shop' | null>(null);
  const [deleteItemId, setDeleteItemId] = useState<number | null>(null);
  
  const [selectedKol, setSelectedKol] = useState<KOL | null>(null);
  const [selectedShop, setSelectedShop] = useState<Shop | null>(null);
  
  // 선택된 엔티티 상태 (테이블 표시용)
  const [selectedEntityType, setSelectedEntityType] = useState<'kol' | 'shop' | null>(null);
  const [selectedEntityId, setSelectedEntityId] = useState<number | null>(null);
  
  // 폼 상태
  const [kolForm, setKolForm] = useState({
    name: '',
    shop_name: '',
    region: '',
    email: ''
  });
  
  const [shopForm, setShopForm] = useState({
    shop_name: '',
    owner_name: '',
    kol_id: '',
    region: '',
    email: ''
  });

  // 관련 전문점 수 상태
  const [relatedShopsCount, setRelatedShopsCount] = useState(0);

  // KOL 목록 조회
  const fetchKols = async () => {
    setIsLoading(true);
    try {
      if (!supabase) {
        console.error('Supabase 클라이언트가 초기화되지 않았습니다.');
        setIsLoading(false);
        return;
      }
      
      const { data: kolsData, error } = await supabase
        .from('kols')
        .select(`
          id, 
          name, 
          shop_name, 
          region, 
          status,
          user_id,
          users(email)
        `)
        .order('name');
      
      if (error) {
        console.error('KOL 조회 중 오류 발생:', error.message, error.details, error.hint);
        setIsLoading(false);
        return;
      }
      
      if (!kolsData || kolsData.length === 0) {
        console.log('KOL 데이터가 없습니다.');
        setKols([]);
        setIsLoading(false);
        return;
      }
      
      console.log(`총 ${kolsData.length}개의 KOL을 조회했습니다.`);
      
      // 타입 안전하게 처리
      const kolsWithEmail: KOL[] = kolsData.map((kol: any) => {
        return {
          id: kol.id,
          name: kol.name,
          shop_name: kol.shop_name,
          region: kol.region,
          status: kol.status,
          user_id: kol.user_id,
          email: kol.users?.email || ''
        };
      });
      
      setKols(kolsWithEmail);
    } catch (error: any) {
      console.error('KOL 데이터 처리 중 오류 발생:', 
        error.message || '알 수 없는 오류', 
        error.details || '', 
        error.code || '');
    }
    setIsLoading(false);
  };

  // 모든 전문점 목록 조회
  const fetchAllShops = async () => {
    try {
      if (!supabase) {
        console.error('Supabase 클라이언트가 초기화되지 않았습니다.');
        return;
      }
      
      const { data: shopsData, error } = await supabase
        .from('shops')
        .select(`
          id, 
          shop_name, 
          owner_name, 
          kol_id, 
          region, 
          status,
          email
        `)
        .order('shop_name');
      
      if (error) {
        console.error('전문점 조회 중 오류 발생:', error.message, error.details, error.hint);
        return;
      }
      
      if (!shopsData || shopsData.length === 0) {
        console.log('전문점 데이터가 없습니다.');
        setShops([]);
        setShopsByKol({});
        return;
      }
      
      console.log(`총 ${shopsData.length}개의 전문점을 조회했습니다.`);
      
      // 타입 안전하게 처리
      const shopsWithEmail: Shop[] = shopsData.map((shop: any) => {
        return {
          id: shop.id,
          shop_name: shop.shop_name,
          owner_name: shop.owner_name,
          kol_id: shop.kol_id || null,
          region: shop.region,
          status: shop.status,
          email: shop.email || ''
        };
      });
      
      setShops(shopsWithEmail);
      
      // KOL별 전문점 그룹화 - 디버깅 로그 추가
      const shopGroups: {[key: number]: Shop[]} = {};
      const unassignedShops: Shop[] = []; // KOL이 없는 전문점을 저장할 배열
      
      console.log(`총 ${shopsWithEmail.length}개의 전문점을 처리합니다.`);
      
      shopsWithEmail.forEach(shop => {
        // kol_id가 유효한지 확인
        if (shop.kol_id && !isNaN(Number(shop.kol_id)) && Number(shop.kol_id) > 0) {
          const kolId = Number(shop.kol_id);
          if (!shopGroups[kolId]) {
            shopGroups[kolId] = [];
          }
          shopGroups[kolId].push(shop);
          console.log(`KOL ID ${kolId}에 전문점 ${shop.shop_name} 추가됨`);
        } else {
          // KOL이 없거나 유효하지 않은 경우 unassignedShops에 추가
          unassignedShops.push(shop);
          console.log(`KOL 미지정 전문점 발견: ${shop.shop_name}, KOL ID: ${shop.kol_id}`);
        }
      });
      
      // 미지정 전문점이 있으면 특별 키(0)에 저장
      if (unassignedShops.length > 0) {
        shopGroups[0] = unassignedShops;
        console.log(`KOL 미지정 전문점 그룹에 ${unassignedShops.length}개 추가됨`);
      }
      
      // 각 KOL ID별 전문점 수 로깅
      Object.keys(shopGroups).forEach(kolId => {
        console.log(`KOL ID ${kolId}에 ${shopGroups[Number(kolId)].length}개의 전문점이 있습니다.`);
      });
      
      setShopsByKol(shopGroups);
    } catch (error: any) {
      console.error('전문점 데이터 처리 중 오류 발생:', 
        error.message || '알 수 없는 오류', 
        error.details || '', 
        error.code || '');
    }
  };

  // KOL에 소속된 전문점 목록 조회
  const fetchShopsByKol = async (kolId: number) => {
    try {
      console.log(`KOL ID ${kolId}의 전문점을 조회합니다.`);
      
      if (!supabase) {
        console.error('Supabase 클라이언트가 초기화되지 않았습니다.');
        return [];
      }
      
      if (!kolId || isNaN(kolId)) {
        console.error(`유효하지 않은 KOL ID: ${kolId}`);
        return [];
      }
      
      const { data: kolShopsData, error } = await supabase
        .from('shops')
        .select(`
          id, 
          shop_name, 
          owner_name, 
          kol_id, 
          region, 
          status,
          email
        `)
        .eq('kol_id', kolId)
        .order('shop_name');
      
      if (error) {
        console.error(`KOL ID ${kolId}의 전문점 조회 중 오류 발생:`, error.message, error.details, error.hint);
        return [];
      }
      
      if (!kolShopsData) {
        console.log(`KOL ID ${kolId}에 대한 전문점 데이터가 없습니다.`);
        return [];
      }
      
      console.log(`KOL ID ${kolId}에 ${kolShopsData.length}개의 전문점이 있습니다.`);
      
      // 타입 안전하게 처리
      const shopsWithEmail: Shop[] = kolShopsData.map((shop: any) => {
        return {
          id: shop.id,
          shop_name: shop.shop_name,
          owner_name: shop.owner_name,
          kol_id: shop.kol_id || null,
          region: shop.region,
          status: shop.status,
          email: shop.email || ''
        };
      });
      
      const updatedShopsByKol = { ...shopsByKol };
      updatedShopsByKol[kolId] = shopsWithEmail;
      setShopsByKol(updatedShopsByKol);
      
      return shopsWithEmail;
    } catch (error: any) {
      console.error(`KOL ID ${kolId}의 전문점 조회 중 오류 발생:`, 
        error.message || '알 수 없는 오류', 
        error.details || '', 
        error.code || '');
      return [];
    }
  };

  // 초기 데이터 로드
  useEffect(() => {
    if (isInitialized && supabase) {
      console.log('Supabase 클라이언트가 초기화되었습니다. 데이터 로드를 시작합니다.');
      
      // 데이터 로드 시작
      const loadData = async () => {
        try {
          setIsLoading(true);
          await fetchKols();
          await fetchAllShops();
        } catch (error: any) {
          console.error('데이터 로드 중 오류 발생:', error.message || '알 수 없는 오류');
          alert('데이터를 불러오는 데 실패했습니다. 페이지를 새로고침하거나 관리자에게 문의하세요.');
        } finally {
          setIsLoading(false);
        }
      };
      
      loadData();
    }
  }, [isInitialized, supabase]);

  // KOL 확장 토글
  const toggleKol = async (kolId: number) => {
    try {
      if (!supabase) {
        console.error('Supabase 클라이언트가 초기화되지 않았습니다.');
        return;
      }
      
      console.log(`KOL ID ${kolId} 토글 시도 중...`);
      
      // 유효한 KOL인지 검증
      const { data: kolData, error: kolError } = await supabase
        .from('kols')
        .select('id')
        .eq('id', kolId)
        .single();
        
      if (kolError && kolError.code !== 'PGRST116') { // PGRST116: No rows returned (이건 정상적인 경우일 수 있음)
        console.error(`KOL ID ${kolId} 확인 중 오류:`, kolError.message, kolError.details);
        alert(`KOL 정보를 확인하는 중 오류가 발생했습니다: ${kolError.message}`);
        return;
      }
      
      if (!kolData && kolError?.code === 'PGRST116') {
        console.error(`KOL ID ${kolId}가 데이터베이스에 존재하지 않습니다.`);
        alert(`KOL ID ${kolId}는 존재하지 않는 KOL입니다.`);
        return;
      }
      
      if (expandedKolId === kolId) {
        console.log(`KOL ID ${kolId} 접기`);
        setExpandedKolId(null);
      } else {
        console.log(`KOL ID ${kolId} 펼치기`);
        setExpandedKolId(kolId);
        
        // 전문점 목록이 없거나 비어있으면 새로 가져옴
        if (!shopsByKol[kolId] || shopsByKol[kolId].length === 0) {
          console.log(`KOL ${kolId} 소속 전문점 목록을 가져옵니다.`);
          const shops = await fetchShopsByKol(kolId);
          console.log(`KOL ${kolId} 소속 전문점 ${shops.length}개 로드 완료`);
        } else {
          console.log(`KOL ${kolId} 소속 전문점 목록이 이미 로드되어 있습니다. (${shopsByKol[kolId].length}개)`);
        }
      }
    } catch (error: any) {
      console.error(`KOL ${kolId} 토글 중 오류 발생:`, 
        error.message || '알 수 없는 오류', 
        error.details || '', 
        error.code || '');
      alert(`KOL 정보를 처리하는 중 오류가 발생했습니다.`);
    }
  };
  
  // 엔티티 선택 핸들러
  const handleSelectKol = (kol: KOL) => {
    setSelectedEntityType('kol');
    setSelectedEntityId(kol.id);
  };
  
  const handleSelectShop = (shop: Shop) => {
    setSelectedEntityType('shop');
    setSelectedEntityId(shop.id);
  };

  // KOL 추가 함수
  const addKol = async () => {
    if (!kolForm.name || !kolForm.shop_name) {
      alert('이름과 샵명은 필수 입력사항입니다.');
      return;
    }

    if (!kolForm.email) {
      alert('이메일은 필수 입력사항입니다.');
      return;
    }

    // 이메일로 사용자 정보 조회
    const { data: userData, error: userError } = await supabase
      .from('users')
      .select('id')
      .eq('email', kolForm.email)
      .single();

    if (userError) {
      if (userError.code === 'PGRST116') { // 사용자가 없는 경우
        alert(`입력한 이메일(${kolForm.email})로 등록된 사용자가 없습니다. 먼저 사용자 등록이 필요합니다.`);
      } else {
        alert(`사용자 조회 중 오류가 발생했습니다: ${userError.message}`);
      }
      return;
    }

    if (!userData) {
      alert('해당 이메일의 사용자를 찾을 수 없습니다.');
      return;
    }

    const { data, error } = await supabase
      .from('kols')
      .insert([
        {
          name: kolForm.name,
          shop_name: kolForm.shop_name,
          region: kolForm.region || null,
          user_id: userData.id,
          status: 'active',
        },
      ])
      .select();

    if (error) {
      alert(`오류가 발생했습니다: ${error.message}`);
    } else {
      setKolForm({ name: '', shop_name: '', region: '', email: '' });
      setIsKolModalOpen(false);
      fetchKols();
    }
  };

  // KOL 수정 함수
  const updateKol = async () => {
    if (!selectedKol) return;
    if (!kolForm.name || !kolForm.shop_name) {
      alert('이름과 샵명은 필수 입력사항입니다.');
      return;
    }

    const { error } = await supabase
      .from('kols')
      .update({
        name: kolForm.name,
        shop_name: kolForm.shop_name,
        region: kolForm.region || null,
      })
      .eq('id', selectedKol.id);

    if (error) {
      alert(`오류가 발생했습니다: ${error.message}`);
    } else {
      setKolForm({ name: '', shop_name: '', region: '', email: '' });
      setSelectedKol(null);
      setIsKolModalOpen(false);
      fetchKols();
    }
  };

  // KOL 삭제 함수
  const deleteKol = async () => {
    if (!deleteItemId) return;

    // 해당 KOL에 속한 전문점이 있는지 확인
    const { data: relatedShops } = await supabase
      .from('shops')
      .select('id')
      .eq('kol_id', deleteItemId);

    const hasRelatedShops = relatedShops && relatedShops.length > 0;
    
    try {
      // 1. sales_activities 테이블에서 해당 kol_id와 관련된 데이터 삭제
      const { error: kolActivitiesDeleteError } = await supabase
        .from('sales_activities')
        .delete()
        .eq('kol_id', deleteItemId);
      
      if (kolActivitiesDeleteError) {
        throw new Error(`KOL 활동 데이터 삭제 중 오류 발생: ${kolActivitiesDeleteError.message}`);
      }

      // 소속된 전문점이 있으면 함께 삭제
      if (hasRelatedShops) {
        try {
          // 먼저 각 shop에 대한 orders를 조회
          for (const shop of relatedShops) {
            const { data: relatedOrders } = await supabase
              .from('orders')
              .select('id')
              .eq('shop_id', shop.id);
            
            if (relatedOrders && relatedOrders.length > 0) {
              // -1. 각 order의 commissions를 먼저 삭제
              for (const order of relatedOrders) {
                const { error: commissionsDeleteError } = await supabase
                  .from('commissions')
                  .delete()
                  .eq('order_id', order.id);
                
                if (commissionsDeleteError) {
                  throw new Error(`수수료 데이터 삭제 중 오류 발생: ${commissionsDeleteError.message}`);
                }
              }
            }
          }

          // 0. 이제 orders 테이블에서 관련된 shop_id를 가진 레코드들을 삭제
          for (const shop of relatedShops) {
            const { error: ordersDeleteError } = await supabase
              .from('orders')
              .delete()
              .eq('shop_id', shop.id);
            
            if (ordersDeleteError) {
              throw new Error(`주문 데이터 삭제 중 오류 발생: ${ordersDeleteError.message}`);
            }
          }

          // 1. 먼저 monthly_sales 테이블에서 관련된 shop_id를 가진 레코드들을 삭제
          for (const shop of relatedShops) {
            const { error: monthlySalesDeleteError } = await supabase
              .from('monthly_sales')
              .delete()
              .eq('shop_id', shop.id);
            
            if (monthlySalesDeleteError) {
              throw new Error(`월별 매출 데이터 삭제 중 오류 발생: ${monthlySalesDeleteError.message}`);
            }
          }

          // 2. 그 다음 shop_sales_metrics 테이블에서 관련된 shop_id를 가진 레코드들을 삭제
          for (const shop of relatedShops) {
            const { error: shopSalesMetricsDeleteError } = await supabase
              .from('shop_sales_metrics')
              .delete()
              .eq('shop_id', shop.id);
            
            if (shopSalesMetricsDeleteError) {
              throw new Error(`전문점 매출 지표 삭제 중 오류 발생: ${shopSalesMetricsDeleteError.message}`);
            }
          }

          // 2.1 shop_sales_summary 테이블에서 관련된 shop_id 삭제
          for (const shop of relatedShops) {
            const { error: shopSalesSummaryDeleteError } = await supabase
              .from('shop_sales_summary')
              .delete()
              .eq('shop_id', shop.id);
            
            if (shopSalesSummaryDeleteError) {
              throw new Error(`전문점 매출 요약 삭제 중 오류 발생: ${shopSalesSummaryDeleteError.message}`);
            }
          }

          // 2.2 shop_product_sales 테이블에서 관련된 shop_id 삭제
          for (const shop of relatedShops) {
            const { error: shopProductSalesDeleteError } = await supabase
              .from('shop_product_sales')
              .delete()
              .eq('shop_id', shop.id);
            
            if (shopProductSalesDeleteError) {
              throw new Error(`전문점 제품 매출 삭제 중 오류 발생: ${shopProductSalesDeleteError.message}`);
            }
          }

          // 소속된 모든 전문점 삭제
          const { error: shopsDeleteError } = await supabase
            .from('shops')
            .delete()
            .eq('kol_id', deleteItemId);

          if (shopsDeleteError) {
            throw new Error(`소속된 전문점 삭제 중 오류 발생: ${shopsDeleteError.message}`);
          }
        } catch (error) {
          alert(`삭제 중 오류가 발생했습니다: ${error instanceof Error ? error.message : '알 수 없는 오류'}`);
          setIsDeleteModalOpen(false);
          setDeleteItemId(null);
          setDeleteType(null);
          return;
        }
      }
      
      // 3. KOL 관련 매출 지표 삭제
      // 3.1 product_sales_metrics 테이블에서 관련 데이터 삭제
      const { error: productSalesMetricsDeleteError } = await supabase
        .from('product_sales_metrics')
        .delete()
        .eq('kol_id', deleteItemId);
        
      if (productSalesMetricsDeleteError) {
        throw new Error(`제품 매출 메트릭 삭제 중 오류 발생: ${productSalesMetricsDeleteError.message}`);
      }

      // 3.2 kol_product_summary 테이블에서 관련 데이터 삭제
      const { error: kolProductSummaryDeleteError } = await supabase
        .from('kol_product_summary')
        .delete()
        .eq('kol_id', deleteItemId);
        
      if (kolProductSummaryDeleteError) {
        throw new Error(`KOL 제품 요약 삭제 중 오류 발생: ${kolProductSummaryDeleteError.message}`);
      }

      // 3.3 kol_total_monthly_sales 테이블에서 관련 데이터 삭제
      const { error: kolTotalMonthlySalesDeleteError } = await supabase
        .from('kol_total_monthly_sales')
        .delete()
        .eq('kol_id', deleteItemId);
        
      if (kolTotalMonthlySalesDeleteError) {
        throw new Error(`KOL 월간 매출 합계 삭제 중 오류 발생: ${kolTotalMonthlySalesDeleteError.message}`);
      }

      // 3.4 kol_monthly_summary 테이블에서 관련 데이터 삭제
      const { error: kolMonthlySummaryDeleteError } = await supabase
        .from('kol_monthly_summary')
        .delete()
        .eq('kol_id', deleteItemId);
        
      if (kolMonthlySummaryDeleteError) {
        throw new Error(`KOL 월간 요약 삭제 중 오류 발생: ${kolMonthlySummaryDeleteError.message}`);
      }

      // 3.5 monthly_sales 테이블에서 관련 데이터 삭제
      const { error: monthlySalesKolDeleteError } = await supabase
        .from('monthly_sales')
        .delete()
        .eq('kol_id', deleteItemId);
        
      if (monthlySalesKolDeleteError) {
        throw new Error(`월별 매출 데이터 삭제 중 오류 발생: ${monthlySalesKolDeleteError.message}`);
      }

      // 3.6 commissions 테이블에서 관련 데이터 삭제
      const { error: commissionsKolDeleteError } = await supabase
        .from('commissions')
        .delete()
        .eq('kol_id', deleteItemId);
        
      if (commissionsKolDeleteError) {
        throw new Error(`수수료 데이터 삭제 중 오류 발생: ${commissionsKolDeleteError.message}`);
      }

      // 3.7 product_sales_ratios 테이블에서 관련 데이터 삭제
      const { error: productSalesRatiosDeleteError } = await supabase
        .from('product_sales_ratios')
        .delete()
        .eq('kol_id', deleteItemId);
        
      if (productSalesRatiosDeleteError) {
        throw new Error(`제품 매출 비율 삭제 중 오류 발생: ${productSalesRatiosDeleteError.message}`);
      }

      // kol_dashboard_metrics 테이블에서 관련 데이터 삭제
      const { error: kolMetricsDeleteError } = await supabase
        .from('kol_dashboard_metrics')
        .delete()
        .eq('kol_id', deleteItemId);
        
      if (kolMetricsDeleteError) {
        throw new Error(`KOL 지표 데이터 삭제 중 오류 발생: ${kolMetricsDeleteError.message}`);
      }
    } catch (error) {
      alert(`KOL 지표 삭제 중 오류가 발생했습니다: ${error instanceof Error ? error.message : '알 수 없는 오류'}`);
      setIsDeleteModalOpen(false);
      setDeleteItemId(null);
      setDeleteType(null);
      return;
    }

    const { error } = await supabase
      .from('kols')
      .delete()
      .eq('id', deleteItemId);

    if (error) {
      alert(`오류가 발생했습니다: ${error.message}`);
    } else {
      setIsDeleteModalOpen(false);
      setDeleteItemId(null);
      setDeleteType(null);
      
      // 데이터 다시 로드
      fetchKols();
      // KOL이 삭제되면 해당 KOL의 전문점 정보도 상태에서 제거
      const updatedShopsByKol = { ...shopsByKol };
      delete updatedShopsByKol[deleteItemId];
      setShopsByKol(updatedShopsByKol);
      
      // 현재 선택된 항목이 삭제된 KOL인 경우 선택 해제
      if (selectedEntityType === 'kol' && selectedEntityId === deleteItemId) {
        setSelectedEntityType(null);
        setSelectedEntityId(null);
      }
    }
  };

  // 전문점 추가 함수
  const addShop = async () => {
    if (!shopForm.shop_name || !shopForm.owner_name) {
      alert('매장명과 소유자명은 필수 입력사항입니다.');
      return;
    }

    // 사용자 검색 (관리자 계정 사용)
    const { data: userData } = await supabase
      .from('users')
      .select('id')
      .eq('role', 'admin')
      .limit(1)
      .single();

    if (!userData) {
      alert('관리자 계정을 찾을 수 없습니다.');
      return;
    }

    const userId = userData.id;

    const { data, error } = await supabase
      .from('shops')
      .insert([
        {
          shop_name: shopForm.shop_name,
          owner_name: shopForm.owner_name,
          kol_id: shopForm.kol_id ? parseInt(shopForm.kol_id) : null,
          region: shopForm.region || null,
          status: 'active',
          email: shopForm.email || null
        },
      ])
      .select();

    if (error) {
      alert(`오류가 발생했습니다: ${error.message}`);
    } else {
      setShopForm({ shop_name: '', owner_name: '', kol_id: '', region: '', email: '' });
      setIsShopModalOpen(false);
      
      // 데이터 다시 로드
      await fetchAllShops();
      
      // 현재 확장된 KOL의 ID가 있다면, 그 KOL의 전문점 목록도 업데이트
      if (expandedKolId) {
        await fetchShopsByKol(expandedKolId);
      }
    }
  };

  // 전문점 수정 함수
  const updateShop = async () => {
    if (!selectedShop) return;
    if (!shopForm.shop_name || !shopForm.owner_name) {
      alert('매장명과 소유자명은 필수 입력사항입니다.');
      return;
    }

    const { error } = await supabase
      .from('shops')
      .update({
        shop_name: shopForm.shop_name,
        owner_name: shopForm.owner_name,
        kol_id: shopForm.kol_id ? parseInt(shopForm.kol_id) : null,
        region: shopForm.region || null,
        email: shopForm.email || null
      })
      .eq('id', selectedShop.id);

    if (error) {
      alert(`오류가 발생했습니다: ${error.message}`);
    } else {
      setShopForm({ shop_name: '', owner_name: '', kol_id: '', region: '', email: '' });
      setSelectedShop(null);
      setIsShopModalOpen(false);
      
      // 데이터 다시 로드
      await fetchAllShops();
      
      // 현재 확장된 KOL의 ID가 있다면, 그 KOL의 전문점 목록도 업데이트
      if (expandedKolId) {
        await fetchShopsByKol(expandedKolId);
      }
    }
  };

  // 전문점 삭제 함수
  const deleteShop = async () => {
    if (!deleteItemId) return;

    try {
      // -1. 먼저 전문점의 주문을 조회하고 각 주문에 대한 수수료 데이터를 삭제
      const { data: relatedOrders } = await supabase
        .from('orders')
        .select('id')
        .eq('shop_id', deleteItemId);
        
      if (relatedOrders && relatedOrders.length > 0) {
        for (const order of relatedOrders) {
          const { error: commissionsDeleteError } = await supabase
            .from('commissions')
            .delete()
            .eq('order_id', order.id);
            
          if (commissionsDeleteError) {
            throw new Error(`수수료 데이터 삭제 중 오류 발생: ${commissionsDeleteError.message}`);
          }
        }
      }

      // 0. sales_activities 테이블에서 해당 shop_id를 가진 레코드들을 삭제
      const { error: salesActivitiesDeleteError } = await supabase
        .from('sales_activities')
        .delete()
        .eq('shop_id', deleteItemId);
      
      if (salesActivitiesDeleteError) {
        throw new Error(`판매 활동 데이터 삭제 중 오류 발생: ${salesActivitiesDeleteError.message}`);
      }

      // 1. 그 다음 orders 테이블에서 해당 shop_id를 가진 레코드들을 삭제
      const { error: ordersDeleteError } = await supabase
        .from('orders')
        .delete()
        .eq('shop_id', deleteItemId);
      
      if (ordersDeleteError) {
        throw new Error(`주문 데이터 삭제 중 오류 발생: ${ordersDeleteError.message}`);
      }

      // 2. 다음으로 monthly_sales 테이블에서 해당 shop_id를 가진 레코드들을 삭제
      const { error: monthlySalesDeleteError } = await supabase
        .from('monthly_sales')
        .delete()
        .eq('shop_id', deleteItemId);
      
      if (monthlySalesDeleteError) {
        throw new Error(`월별 매출 데이터 삭제 중 오류 발생: ${monthlySalesDeleteError.message}`);
      }

      // 3. shop_sales_metrics 테이블에서 해당 shop_id를 가진 레코드들 삭제
      const { error: shopSalesMetricsDeleteError } = await supabase
        .from('shop_sales_metrics')
        .delete()
        .eq('shop_id', deleteItemId);
      
      if (shopSalesMetricsDeleteError) {
        throw new Error(`전문점 매출 지표 삭제 중 오류 발생: ${shopSalesMetricsDeleteError.message}`);
      }

      // 4. shop_sales_summary 테이블에서 해당 shop_id를 가진 레코드들 삭제
      const { error: shopSalesSummaryDeleteError } = await supabase
        .from('shop_sales_summary')
        .delete()
        .eq('shop_id', deleteItemId);
      
      if (shopSalesSummaryDeleteError) {
        throw new Error(`전문점 매출 요약 삭제 중 오류 발생: ${shopSalesSummaryDeleteError.message}`);
      }

      // 5. shop_product_sales 테이블에서 해당 shop_id를 가진 레코드들 삭제
      const { error: shopProductSalesDeleteError } = await supabase
        .from('shop_product_sales')
        .delete()
        .eq('shop_id', deleteItemId);
      
      if (shopProductSalesDeleteError) {
        throw new Error(`전문점 제품 매출 삭제 중 오류 발생: ${shopProductSalesDeleteError.message}`);
      }

      // 6. product_sales_ratios 테이블에서 해당 shop_id를 가진 레코드들 삭제
      const { error: productSalesRatiosDeleteError } = await supabase
        .from('product_sales_ratios')
        .delete()
        .eq('shop_id', deleteItemId);
      
      if (productSalesRatiosDeleteError) {
        throw new Error(`제품 매출 비율 삭제 중 오류 발생: ${productSalesRatiosDeleteError.message}`);
      }

      // 3. 전문점 삭제
      const { error } = await supabase
        .from('shops')
        .delete()
        .eq('id', deleteItemId);

      if (error) {
        throw new Error(`전문점 삭제 중 오류 발생: ${error.message}`);
      }

      // 삭제 성공 후 상태 업데이트
      setIsDeleteModalOpen(false);
      setDeleteItemId(null);
      setDeleteType(null);
      
      // 데이터 다시 로드
      await fetchAllShops();
      
      // 현재 확장된 KOL의 ID가 있다면, 그 KOL의 전문점 목록도 업데이트
      if (expandedKolId) {
        await fetchShopsByKol(expandedKolId);
      }
      
      // 현재 선택된 항목이 삭제된 전문점인 경우 선택 해제
      if (selectedEntityType === 'shop' && selectedEntityId === deleteItemId) {
        setSelectedEntityType(null);
        setSelectedEntityId(null);
      }
    } catch (error) {
      alert(`삭제 중 오류가 발생했습니다: ${error instanceof Error ? error.message : '알 수 없는 오류'}`);
      setIsDeleteModalOpen(false);
      setDeleteItemId(null);
      setDeleteType(null);
    }
  };

  // KOL 수정 모달 열기
  const openEditKolModal = (kol: KOL) => {
    setSelectedKol(kol);
    setKolForm({
      name: kol.name,
      shop_name: kol.shop_name,
      region: kol.region || '',
      email: kol.email || ''
    });
    setIsKolModalOpen(true);
  };

  // 전문점 수정 모달 열기
  const openEditShopModal = (shop: Shop) => {
    setSelectedShop(shop);
    setShopForm({
      shop_name: shop.shop_name,
      owner_name: shop.owner_name,
      kol_id: shop.kol_id ? shop.kol_id.toString() : '',
      region: shop.region || '',
      email: shop.email || ''
    });
    setIsShopModalOpen(true);
  };
  
  // KOL 추가 모달 열기
  const openAddKolModal = () => {
    setSelectedKol(null);
    setKolForm({ name: '', shop_name: '', region: '', email: '' });
    setIsKolModalOpen(true);
  };
  
  // 전문점 추가 모달 열기
  const openAddShopModal = (kolId: number) => {
    setSelectedShop(null);
    setShopForm({
      shop_name: '',
      owner_name: '',
      kol_id: String(kolId),
      region: kols.find(k => k.id === kolId)?.region || '',
      email: ''
    });
    setIsShopModalOpen(true);
  };

  // 삭제 모달 열기
  const openDeleteModal = (type: 'kol' | 'shop', id: number) => {
    setDeleteType(type);
    setDeleteItemId(id);
    setIsDeleteModalOpen(true);
    
    // KOL 삭제 시 소속된 전문점 수 확인
    if (type === 'kol') {
      const fetchRelatedShops = async () => {
        if (!supabase) {
          console.error('Supabase 클라이언트가 초기화되지 않았습니다.');
          return;
        }
        
        const { data: relatedShops, error } = await supabase
          .from('shops')
          .select('id')
          .eq('kol_id', id);
          
        if (error) {
          console.error(`KOL ID ${id}의 관련 전문점 조회 중 오류 발생:`, error.message, error.details);
          setRelatedShopsCount(0);
          return;
        }
        
        if (relatedShops && relatedShops.length > 0) {
          setRelatedShopsCount(relatedShops.length);
        } else {
          setRelatedShopsCount(0);
        }
      };
      
      fetchRelatedShops();
    }
  };

  // 삭제 확인 실행
  const confirmDelete = () => {
    if (deleteType === 'kol') {
      deleteKol();
    } else if (deleteType === 'shop') {
      deleteShop();
    }
  };
  
  // 선택된 엔티티 찾기
  const selectedEntity = selectedEntityType === 'kol'
    ? kols.find(k => k.id === selectedEntityId) || null
    : selectedEntityType === 'shop'
      ? shops.find(s => s.id === selectedEntityId) || null
      : null;

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold text-gray-900">KOL 및 전문점 관리</h1>
        <div className="flex space-x-2">
          <button
            onClick={openAddKolModal}
            className="bg-blue-600 text-white px-4 py-2 rounded-lg flex items-center"
          >
            <PlusCircle size={16} className="mr-2" />
            KOL 추가
          </button>
          <button
            onClick={() => {
              setSelectedShop(null);
              setShopForm({ shop_name: '', owner_name: '', kol_id: '', region: '', email: '' });
              setIsShopModalOpen(true);
            }}
            className="bg-green-600 text-white px-4 py-2 rounded-lg flex items-center"
          >
            <PlusCircle size={16} className="mr-2" />
            전문점 추가
          </button>
        </div>
      </div>

      {isLoading ? (
        <div className="p-6 text-center bg-white shadow rounded-lg">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500 mx-auto"></div>
          <p className="mt-2 text-gray-600">데이터를 불러오는 중...</p>
        </div>
      ) : (
        <div className="flex flex-col lg:flex-row gap-6 h-[calc(100vh-220px)]">
          {/* 사이드바 컴포넌트 */}
          <EntitySidebar
            kols={kols}
            shopsByKol={shopsByKol}
            searchQuery={searchQuery}
            setSearchQuery={setSearchQuery}
            expandedKolId={expandedKolId}
            toggleKol={toggleKol}
            onSelectKol={handleSelectKol}
            onSelectShop={handleSelectShop}
            openAddKolModal={openAddKolModal}
            openAddShopModal={openAddShopModal}
            openEditKolModal={openEditKolModal}
            openEditShopModal={openEditShopModal}
            openDeleteModal={openDeleteModal}
            selectedEntityId={selectedEntityId}
            selectedEntityType={selectedEntityType}
          />
          
          {/* 메인 테이블 컴포넌트 */}
          <div className="flex-1 overflow-auto">
            <EntityTable
              selectedEntityType={selectedEntityType}
              selectedEntity={selectedEntity}
              kols={kols}
              openEditKolModal={openEditKolModal}
              openEditShopModal={openEditShopModal}
              openDeleteModal={openDeleteModal}
            />
          </div>
        </div>
      )}

      {/* 모달 컴포넌트들 */}
      <KolModal 
        isOpen={isKolModalOpen}
        onClose={() => setIsKolModalOpen(false)}
        selectedKol={selectedKol}
        kolForm={kolForm}
        setKolForm={setKolForm}
        onSubmit={selectedKol ? updateKol : addKol}
      />
      
      <ShopModal
        isOpen={isShopModalOpen}
        onClose={() => setIsShopModalOpen(false)}
        selectedShop={selectedShop}
        shopForm={shopForm}
        setShopForm={setShopForm}
        onSubmit={selectedShop ? updateShop : addShop}
        kols={kols}
      />
      
      <DeleteModal
        isOpen={isDeleteModalOpen}
        onClose={() => {
          setIsDeleteModalOpen(false);
          setDeleteItemId(null);
          setDeleteType(null);
        }}
        deleteType={deleteType}
        confirmDelete={confirmDelete}
        relatedShopsCount={relatedShopsCount}
      />
    </div>
  );
}
</file>
  <file path="app/admin-dashboard/kol-dashboard/page.tsx">
'use client';

import { useState, useEffect } from 'react';
import { createClient } from '@supabase/supabase-js';
import { ChevronDown, ChevronRight, Search } from 'lucide-react';

// 인라인 스타일 상수
const tableHeaderStyle = "px-4 py-2 bg-gray-100 text-left text-sm font-medium text-gray-600 uppercase tracking-wider";
const tableCellStyle = "px-4 py-2 whitespace-nowrap text-sm text-gray-700 border-b";

// 타입 정의
type KOL = {
  id: number;
  name: string;
  shop_name: string;
};

type Shop = {
  id: number;
  shop_name: string;
  owner_name: string;
  kol_id: number;
};

type KOLMonthlyData = {
  id?: number;
  kol_id: number;
  year_month: string;
  total_sales: number;
  product_sales: number;
  device_sales: number;
  total_commission: number;
  total_active_shops: number;
  total_shops: number;
};

type ShopSalesMetrics = {
  id?: number;
  shop_id: number;
  year_month: string;
  total_sales: number;
  product_sales: number;
  device_sales: number;
  commission: number;
};

// Supabase 클라이언트 설정
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || '';
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || '';
const supabase = createClient(supabaseUrl, supabaseKey);

export default function KOLDashboardPage() {
  const [kols, setKols] = useState<KOL[]>([]);
  const [shops, setShops] = useState<Shop[]>([]);
  const [selectedKOL, setSelectedKOL] = useState<number | null>(null);
  const [selectedShop, setSelectedShop] = useState<number | null>(null);
  const [expandedKOLs, setExpandedKOLs] = useState<number[]>([]);
  const [yearMonth, setYearMonth] = useState('202505'); // 기본값 설정
  const [kolMonthlyData, setKolMonthlyData] = useState<{[key: number]: KOLMonthlyData}>({});
  const [shopSalesData, setShopSalesData] = useState<{[key: number]: ShopSalesMetrics}>({});
  const [isLoading, setIsLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');

  // KOL 목록 및 관련 데이터 로드
  useEffect(() => {
    async function fetchData() {
      setIsLoading(true);
      try {
        // KOL 목록 가져오기
        const { data: kolData, error: kolError } = await supabase
          .from('kols')
          .select('id, name, shop_name')
          .order('id');
        
        if (kolError) throw kolError;
        setKols(kolData || []);
        
        // 매장 정보 가져오기
        const { data: shopData, error: shopError } = await supabase
          .from('shops')
          .select('id, shop_name, owner_name, kol_id');
        
        if (shopError) throw shopError;
        setShops(shopData || []);
        
        // KOL 월별 데이터 가져오기
        const { data: monthlyData, error: monthlyError } = await supabase
          .from('kol_total_monthly_sales')
          .select('*')
          .eq('year_month', yearMonth);
        
        if (monthlyError) throw monthlyError;
        
        // 데이터를 KOL ID로 인덱싱
        const indexedKolData: {[key: number]: KOLMonthlyData} = {};
        monthlyData?.forEach(item => {
          indexedKolData[item.kol_id] = item;
        });
        
        setKolMonthlyData(indexedKolData);
        
        // 매장 매출 데이터 가져오기
        const { data: salesData, error: salesError } = await supabase
          .from('shop_sales_metrics')
          .select('*')
          .eq('year_month', yearMonth);
        
        if (salesError) throw salesError;
        
        // 데이터를 매장 ID로 인덱싱
        const indexedShopData: {[key: number]: ShopSalesMetrics} = {};
        salesData?.forEach(item => {
          indexedShopData[item.shop_id] = item;
        });
        
        setShopSalesData(indexedShopData);
      } catch (error) {
        console.error('데이터 로드 오류:', error);
      } finally {
        setIsLoading(false);
      }
    }
    
    fetchData();
  }, [yearMonth]);

  // KOL 확장/축소 토글
  const toggleKOL = (kolId: number) => {
    if (expandedKOLs.includes(kolId)) {
      setExpandedKOLs(expandedKOLs.filter(id => id !== kolId));
    } else {
      setExpandedKOLs([...expandedKOLs, kolId]);
    }
    setSelectedKOL(kolId);
    setSelectedShop(null);
  };

  // 전문점 선택 핸들러
  const selectShop = (shopId: number) => {
    setSelectedShop(shopId);
  };

  // 연월 변경 핸들러
  const handleYearMonthChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setYearMonth(e.target.value);
  };

  // 검색 필터링
  const filteredKols = kols.filter(kol => 
    kol.name.toLowerCase().includes(searchTerm.toLowerCase()) || 
    kol.shop_name.toLowerCase().includes(searchTerm.toLowerCase())
  );

  // 금액 포맷
  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('ko-KR', { style: 'currency', currency: 'KRW' }).format(amount);
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-full">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500 mx-auto"></div>
          <p className="mt-4">데이터를 불러오는 중입니다...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto">
      <h1 className="text-2xl font-bold mb-6">KOL 및 전문점 현황</h1>
      
      {/* 연월 선택 */}
      <div className="mb-6">
        <label htmlFor="yearMonth" className="block text-sm font-medium text-gray-700 mb-1">기준 연월:</label>
        <select 
          id="yearMonth"
          value={yearMonth}
          onChange={handleYearMonthChange}
          className="border rounded p-2 w-40"
        >
          <option value="202501">2025년 1월</option>
          <option value="202502">2025년 2월</option>
          <option value="202503">2025년 3월</option>
          <option value="202504">2025년 4월</option>
          <option value="202505">2025년 5월</option>
          <option value="202506">2025년 6월</option>
        </select>
      </div>
      
      <div className="flex flex-col md:flex-row gap-6">
        {/* 왼쪽 사이드바 */}
        <div className="w-full md:w-1/3 lg:w-1/4 bg-white rounded-lg shadow-md p-4 h-[calc(100vh-200px)] overflow-y-auto">
          {/* 검색 상자 */}
          <div className="mb-4 relative">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <Search size={16} className="text-gray-400" />
            </div>
            <input
              type="text"
              placeholder="KOL 또는 상점 검색..."
              className="pl-10 w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
          
          <h2 className="text-lg font-semibold mb-4">KOL 및 전문점 목록</h2>
          <ul className="space-y-1">
            {filteredKols.map(kol => (
              <li key={kol.id}>
                <button 
                  onClick={() => toggleKOL(kol.id)}
                  className={`flex items-center w-full text-left p-2 rounded hover:bg-gray-100 ${selectedKOL === kol.id && !selectedShop ? 'bg-blue-50' : ''}`}
                >
                  {expandedKOLs.includes(kol.id) ? <ChevronDown size={16} /> : <ChevronRight size={16} />}
                  <span className="ml-2">{kol.shop_name} / {kol.name}</span>
                </button>
                
                {expandedKOLs.includes(kol.id) && (
                  <ul className="ml-6 mt-1 space-y-1">
                    {shops
                      .filter(shop => shop.kol_id === kol.id)
                      .map(shop => (
                        <li key={shop.id}>
                          <button
                            onClick={() => selectShop(shop.id)}
                            className={`flex items-center w-full text-left p-2 rounded hover:bg-gray-100 ${selectedShop === shop.id ? 'bg-blue-50' : ''}`}
                          >
                            <span className="text-sm">{shop.shop_name}</span>
                          </button>
                        </li>
                      ))
                    }
                  </ul>
                )}
              </li>
            ))}
          </ul>
        </div>
        
        {/* 오른쪽 내용 - 데이터 표시 */}
        <div className="w-full md:flex-1 bg-white rounded-lg shadow-md p-4 h-[calc(100vh-200px)] overflow-y-auto">
          {selectedKOL && !selectedShop ? (
            <>
              <h2 className="text-lg font-semibold mb-4">
                {kols.find(k => k.id === selectedKOL)?.shop_name} / {kols.find(k => k.id === selectedKOL)?.name} 현황
              </h2>
              
              {/* KOL 데이터 테이블 */}
              <div className="border rounded-lg p-4 mb-6">
                <h3 className="text-md font-medium mb-3">월별 종합 지표</h3>
                <table className="min-w-full">
                  <thead>
                    <tr>
                      <th className={tableHeaderStyle}>지표</th>
                      <th className={tableHeaderStyle}>값</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td className={tableCellStyle}>총 매출</td>
                      <td className={tableCellStyle}>{formatCurrency(kolMonthlyData[selectedKOL]?.total_sales || 0)}</td>
                    </tr>
                    <tr>
                      <td className={tableCellStyle}>제품 매출</td>
                      <td className={tableCellStyle}>{formatCurrency(kolMonthlyData[selectedKOL]?.product_sales || 0)}</td>
                    </tr>
                    <tr>
                      <td className={tableCellStyle}>장비 매출</td>
                      <td className={tableCellStyle}>{formatCurrency(kolMonthlyData[selectedKOL]?.device_sales || 0)}</td>
                    </tr>
                    <tr>
                      <td className={tableCellStyle}>총 수당</td>
                      <td className={tableCellStyle}>{formatCurrency(kolMonthlyData[selectedKOL]?.total_commission || 0)}</td>
                    </tr>
                    <tr>
                      <td className={tableCellStyle}>활성 전문점 수</td>
                      <td className={tableCellStyle}>{kolMonthlyData[selectedKOL]?.total_active_shops || 0}</td>
                    </tr>
                    <tr>
                      <td className={tableCellStyle}>총 전문점 수</td>
                      <td className={tableCellStyle}>{kolMonthlyData[selectedKOL]?.total_shops || 0}</td>
                    </tr>
                  </tbody>
                </table>
              </div>
              
              {/* 소속 전문점 목록 */}
              <div>
                <h3 className="text-md font-medium mb-3">소속 전문점 목록</h3>
                {shops.filter(shop => shop.kol_id === selectedKOL).length > 0 ? (
                  <table className="min-w-full">
                    <thead>
                      <tr>
                        <th className={tableHeaderStyle}>전문점명</th>
                        <th className={tableHeaderStyle}>소유자</th>
                        <th className={tableHeaderStyle}>총 매출</th>
                        <th className={tableHeaderStyle}>제품 매출</th>
                        <th className={tableHeaderStyle}>장비 매출</th>
                        <th className={tableHeaderStyle}>수당</th>
                      </tr>
                    </thead>
                    <tbody>
                      {shops
                        .filter(shop => shop.kol_id === selectedKOL)
                        .map(shop => (
                          <tr key={shop.id}>
                            <td className={tableCellStyle}>{shop.shop_name}</td>
                            <td className={tableCellStyle}>{shop.owner_name}</td>
                            <td className={tableCellStyle}>{formatCurrency(shopSalesData[shop.id]?.total_sales || 0)}</td>
                            <td className={tableCellStyle}>{formatCurrency(shopSalesData[shop.id]?.product_sales || 0)}</td>
                            <td className={tableCellStyle}>{formatCurrency(shopSalesData[shop.id]?.device_sales || 0)}</td>
                            <td className={tableCellStyle}>{formatCurrency(shopSalesData[shop.id]?.commission || 0)}</td>
                          </tr>
                        ))
                      }
                    </tbody>
                  </table>
                ) : (
                  <p className="text-gray-500 italic">소속 전문점이 없습니다.</p>
                )}
              </div>
            </>
          ) : selectedShop ? (
            <>
              {/* 선택된 전문점 데이터 */}
              {(() => {
                const shop = shops.find(s => s.id === selectedShop);
                if (!shop) return <p className="text-red-500">전문점 데이터를 찾을 수 없습니다.</p>;
                
                const kol = kols.find(k => k.id === shop.kol_id);
                return (
                  <>
                    <h2 className="text-lg font-semibold mb-4">
                      {shop.shop_name} (소유자: {shop.owner_name})
                    </h2>
                    <p className="text-gray-600 mb-4">소속 KOL: {kol?.shop_name} / {kol?.name}</p>
                    
                    <div className="border rounded-lg p-4">
                      <h3 className="text-md font-medium mb-3">월별 매출 지표</h3>
                      <table className="min-w-full">
                        <thead>
                          <tr>
                            <th className={tableHeaderStyle}>지표</th>
                            <th className={tableHeaderStyle}>값</th>
                          </tr>
                        </thead>
                        <tbody>
                          <tr>
                            <td className={tableCellStyle}>총 매출</td>
                            <td className={tableCellStyle}>{formatCurrency(shopSalesData[selectedShop]?.total_sales || 0)}</td>
                          </tr>
                          <tr>
                            <td className={tableCellStyle}>제품 매출</td>
                            <td className={tableCellStyle}>{formatCurrency(shopSalesData[selectedShop]?.product_sales || 0)}</td>
                          </tr>
                          <tr>
                            <td className={tableCellStyle}>장비 매출</td>
                            <td className={tableCellStyle}>{formatCurrency(shopSalesData[selectedShop]?.device_sales || 0)}</td>
                          </tr>
                          <tr>
                            <td className={tableCellStyle}>수당</td>
                            <td className={tableCellStyle}>{formatCurrency(shopSalesData[selectedShop]?.commission || 0)}</td>
                          </tr>
                        </tbody>
                      </table>
                    </div>
                  </>
                );
              })()}
            </>
          ) : (
            <div className="flex items-center justify-center h-full text-gray-500">
              <p>왼쪽 목록에서 KOL 또는 전문점을 선택해주세요.</p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
</file>
  <file path="app/admin-dashboard/kol-data-entry/components/kol-data-entry.tsx">
'use client';

import { useState, useEffect } from 'react';
import { createClient } from '@supabase/supabase-js';
import { ChevronDown, ChevronRight, Save, Plus } from 'lucide-react';

// 인라인 스타일 상수
const tableHeaderStyle = "px-4 py-2 bg-gray-100 text-left text-sm font-medium text-gray-600 uppercase tracking-wider";
const tableCellStyle = "px-4 py-2 whitespace-nowrap text-sm text-gray-700 border-b";
const inputStyle = "w-full px-2 py-1 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500";

// 타입 정의
type KOL = {
  id: number;
  name: string;
  shop_name: string;
};

type KOLMonthlyData = {
  id?: number;
  kol_id: number;
  year_month: string;
  total_sales: number;
  product_sales: number;
  device_sales: number;
  total_commission: number;
  total_active_shops: number;
  total_shops: number;
};

type Shop = {
  id: number;
  shop_name: string;
  owner_name: string;
  kol_id: number;
};

// Supabase 클라이언트 설정
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || '';
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || '';
const supabase = createClient(supabaseUrl, supabaseKey);

export default function KOLDataEntry() {
  const [kols, setKols] = useState<KOL[]>([]);
  const [shops, setShops] = useState<Shop[]>([]);
  const [selectedKOL, setSelectedKOL] = useState<number | null>(null);
  const [expandedKOLs, setExpandedKOLs] = useState<number[]>([]);
  const [yearMonth, setYearMonth] = useState('202505'); // 기본값 설정
  const [kolMonthlyData, setKolMonthlyData] = useState<{[key: number]: KOLMonthlyData}>({});
  const [isLoading, setIsLoading] = useState(true);
  const [saveStatus, setSaveStatus] = useState<{[key: number]: 'saved' | 'unsaved' | 'saving'}>({});

  // KOL 목록 및 관련 데이터 로드
  useEffect(() => {
    async function fetchData() {
      setIsLoading(true);
      try {
        // KOL 목록 가져오기
        const { data: kolData, error: kolError } = await supabase
          .from('kols')
          .select('id, name, shop_name')
          .order('id');
        
        if (kolError) throw kolError;
        setKols(kolData || []);
        
        // 매장 정보 가져오기
        const { data: shopData, error: shopError } = await supabase
          .from('shops')
          .select('id, shop_name, owner_name, kol_id');
        
        if (shopError) throw shopError;
        setShops(shopData || []);
        
        // KOL 월별 데이터 가져오기
        const { data: monthlyData, error: monthlyError } = await supabase
          .from('kol_total_monthly_sales')
          .select('*')
          .eq('year_month', yearMonth);
        
        if (monthlyError) throw monthlyError;
        
        // 데이터를 KOL ID로 인덱싱
        const indexedData: {[key: number]: KOLMonthlyData} = {};
        monthlyData?.forEach(item => {
          indexedData[item.kol_id] = item;
        });
        
        setKolMonthlyData(indexedData);
        
        // KOL 중 월별 데이터가 없는 경우 기본 템플릿 생성
        const newSaveStatus: {[key: number]: 'saved' | 'unsaved' | 'saving'} = {};
        kolData?.forEach(kol => {
          if (!indexedData[kol.id]) {
            indexedData[kol.id] = {
              kol_id: kol.id,
              year_month: yearMonth,
              total_sales: 0,
              product_sales: 0,
              device_sales: 0,
              total_commission: 0,
              total_active_shops: 0,
              total_shops: shops.filter(shop => shop.kol_id === kol.id).length
            };
            newSaveStatus[kol.id] = 'unsaved';
          } else {
            newSaveStatus[kol.id] = 'saved';
          }
        });
        
        setKolMonthlyData(indexedData);
        setSaveStatus(newSaveStatus);
      } catch (error) {
        console.error('데이터 로드 오류:', error);
      } finally {
        setIsLoading(false);
      }
    }
    
    fetchData();
  }, [yearMonth]);

  // KOL 확장/축소 토글
  const toggleKOL = (kolId: number) => {
    if (expandedKOLs.includes(kolId)) {
      setExpandedKOLs(expandedKOLs.filter(id => id !== kolId));
    } else {
      setExpandedKOLs([...expandedKOLs, kolId]);
    }
    setSelectedKOL(kolId);
  };

  // 데이터 변경 핸들러
  const handleDataChange = (kolId: number, field: keyof KOLMonthlyData, value: number) => {
    setKolMonthlyData(prev => ({
      ...prev,
      [kolId]: {
        ...prev[kolId],
        [field]: value
      }
    }));
    
    setSaveStatus(prev => ({
      ...prev,
      [kolId]: 'unsaved'
    }));
  };

  // 데이터 저장 핸들러
  const saveKolData = async (kolId: number) => {
    try {
      setSaveStatus(prev => ({
        ...prev,
        [kolId]: 'saving'
      }));
      
      const dataToSave = kolMonthlyData[kolId];
      
      // 이미 존재하는 데이터인지 확인
      const { data: existingData, error: checkError } = await supabase
        .from('kol_total_monthly_sales')
        .select('id')
        .eq('kol_id', kolId)
        .eq('year_month', yearMonth)
        .maybeSingle();
      
      if (checkError) throw checkError;
      
      if (existingData?.id) {
        // 업데이트
        const { error: updateError } = await supabase
          .from('kol_total_monthly_sales')
          .update({
            total_sales: dataToSave.total_sales,
            product_sales: dataToSave.product_sales,
            device_sales: dataToSave.device_sales,
            total_commission: dataToSave.total_commission,
            total_active_shops: dataToSave.total_active_shops,
            total_shops: dataToSave.total_shops
          })
          .eq('id', existingData.id);
        
        if (updateError) throw updateError;
      } else {
        // 새로 생성
        const { error: insertError } = await supabase
          .from('kol_total_monthly_sales')
          .insert([dataToSave]);
        
        if (insertError) throw insertError;
      }
      
      setSaveStatus(prev => ({
        ...prev,
        [kolId]: 'saved'
      }));
      
      alert(`KOL ID ${kolId}의 데이터가 저장되었습니다.`);
    } catch (error) {
      console.error('데이터 저장 오류:', error);
      alert('데이터 저장 중 오류가 발생했습니다.');
      
      setSaveStatus(prev => ({
        ...prev,
        [kolId]: 'unsaved'
      }));
    }
  };

  // 연월 변경 핸들러
  const handleYearMonthChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setYearMonth(e.target.value);
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-full">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500 mx-auto"></div>
          <p className="mt-4">데이터를 불러오는 중입니다...</p>
        </div>
      </div>
    );
  }

  return (
    <>
      {/* 연월 선택 */}
      <div className="mb-6">
        <label htmlFor="yearMonth" className="block text-sm font-medium text-gray-700 mb-1">기준 연월:</label>
        <select 
          id="yearMonth"
          value={yearMonth}
          onChange={handleYearMonthChange}
          className="border rounded p-2 w-40"
        >
          <option value="202501">2025년 1월</option>
          <option value="202502">2025년 2월</option>
          <option value="202503">2025년 3월</option>
          <option value="202504">2025년 4월</option>
          <option value="202505">2025년 5월</option>
          <option value="202506">2025년 6월</option>
        </select>
      </div>
      
      <div className="flex flex-col md:flex-row gap-6">
        {/* 왼쪽 사이드바 */}
        <div className="w-full md:w-1/3 lg:w-1/4 bg-white rounded-lg shadow-md p-4 h-[calc(100vh-300px)] overflow-y-auto">
          <h2 className="text-lg font-semibold mb-4">KOL 목록</h2>
          <ul>
            {kols.map(kol => (
              <li key={kol.id} className="mb-1">
                <button 
                  onClick={() => toggleKOL(kol.id)}
                  className={`flex items-center w-full text-left p-2 rounded hover:bg-gray-100 ${selectedKOL === kol.id ? 'bg-blue-50' : ''}`}
                >
                  {expandedKOLs.includes(kol.id) ? <ChevronDown size={16} /> : <ChevronRight size={16} />}
                  <span className="ml-2">{kol.shop_name} / {kol.name}</span>
                  {saveStatus[kol.id] === 'unsaved' && (
                    <span className="ml-auto text-xs text-red-500">저장 필요</span>
                  )}
                </button>
              </li>
            ))}
          </ul>
        </div>
        
        {/* 오른쪽 내용 */}
        <div className="w-full md:flex-1 bg-white rounded-lg shadow-md p-4 h-[calc(100vh-300px)] overflow-y-auto">
          {selectedKOL ? (
            <>
              <div className="flex justify-between items-center mb-4">
                <h2 className="text-lg font-semibold">
                  {kols.find(k => k.id === selectedKOL)?.shop_name} / {kols.find(k => k.id === selectedKOL)?.name} 데이터
                </h2>
                <button
                  onClick={() => saveKolData(selectedKOL)}
                  disabled={saveStatus[selectedKOL] === 'saving' || saveStatus[selectedKOL] === 'saved'}
                  className={`flex items-center px-4 py-2 rounded ${
                    saveStatus[selectedKOL] === 'saved' 
                      ? 'bg-green-100 text-green-700' 
                      : saveStatus[selectedKOL] === 'saving'
                        ? 'bg-gray-100 text-gray-500'
                        : 'bg-blue-500 text-white hover:bg-blue-600'
                  }`}
                >
                  <Save size={16} className="mr-2" />
                  {saveStatus[selectedKOL] === 'saved' 
                    ? '저장됨' 
                    : saveStatus[selectedKOL] === 'saving'
                      ? '저장 중...'
                      : '저장하기'}
                </button>
              </div>
              
              {/* KOL 데이터 테이블 */}
              <table className="min-w-full">
                <thead>
                  <tr>
                    <th className={tableHeaderStyle}>항목</th>
                    <th className={tableHeaderStyle}>값</th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td className={tableCellStyle}>총 매출 (₩)</td>
                    <td className={tableCellStyle}>
                      <input
                        type="number"
                        value={kolMonthlyData[selectedKOL]?.total_sales || 0}
                        onChange={(e) => handleDataChange(selectedKOL, 'total_sales', Number(e.target.value))}
                        className={inputStyle}
                      />
                    </td>
                  </tr>
                  <tr>
                    <td className={tableCellStyle}>제품 매출 (₩)</td>
                    <td className={tableCellStyle}>
                      <input
                        type="number"
                        value={kolMonthlyData[selectedKOL]?.product_sales || 0}
                        onChange={(e) => handleDataChange(selectedKOL, 'product_sales', Number(e.target.value))}
                        className={inputStyle}
                      />
                    </td>
                  </tr>
                  <tr>
                    <td className={tableCellStyle}>장비 매출 (₩)</td>
                    <td className={tableCellStyle}>
                      <input
                        type="number"
                        value={kolMonthlyData[selectedKOL]?.device_sales || 0}
                        onChange={(e) => handleDataChange(selectedKOL, 'device_sales', Number(e.target.value))}
                        className={inputStyle}
                      />
                    </td>
                  </tr>
                  <tr>
                    <td className={tableCellStyle}>총 수당 (₩)</td>
                    <td className={tableCellStyle}>
                      <input
                        type="number"
                        value={kolMonthlyData[selectedKOL]?.total_commission || 0}
                        onChange={(e) => handleDataChange(selectedKOL, 'total_commission', Number(e.target.value))}
                        className={inputStyle}
                      />
                    </td>
                  </tr>
                  <tr>
                    <td className={tableCellStyle}>활성 전문점 수</td>
                    <td className={tableCellStyle}>
                      <input
                        type="number"
                        value={kolMonthlyData[selectedKOL]?.total_active_shops || 0}
                        onChange={(e) => handleDataChange(selectedKOL, 'total_active_shops', Number(e.target.value))}
                        className={inputStyle}
                      />
                    </td>
                  </tr>
                  <tr>
                    <td className={tableCellStyle}>총 전문점 수</td>
                    <td className={tableCellStyle}>
                      <input
                        type="number"
                        value={kolMonthlyData[selectedKOL]?.total_shops || 0}
                        onChange={(e) => handleDataChange(selectedKOL, 'total_shops', Number(e.target.value))}
                        className={inputStyle}
                      />
                    </td>
                  </tr>
                </tbody>
              </table>
              
              {/* 소속 전문점 목록 */}
              <div className="mt-8">
                <h3 className="text-md font-semibold mb-2">소속 전문점 목록</h3>
                {shops.filter(shop => shop.kol_id === selectedKOL).length > 0 ? (
                  <table className="min-w-full">
                    <thead>
                      <tr>
                        <th className={tableHeaderStyle}>ID</th>
                        <th className={tableHeaderStyle}>전문점명</th>
                        <th className={tableHeaderStyle}>소유자</th>
                      </tr>
                    </thead>
                    <tbody>
                      {shops
                        .filter(shop => shop.kol_id === selectedKOL)
                        .map(shop => (
                          <tr key={shop.id}>
                            <td className={tableCellStyle}>{shop.id}</td>
                            <td className={tableCellStyle}>{shop.shop_name}</td>
                            <td className={tableCellStyle}>{shop.owner_name}</td>
                          </tr>
                        ))
                      }
                    </tbody>
                  </table>
                ) : (
                  <p className="text-gray-500 italic">소속 전문점이 없습니다.</p>
                )}
              </div>
            </>
          ) : (
            <div className="flex items-center justify-center h-full text-gray-500">
              <p>왼쪽 목록에서 KOL을 선택해주세요.</p>
            </div>
          )}
        </div>
      </div>
    </>
  );
}
</file>
  <file path="app/admin-dashboard/kol-data-entry/components/shop-data-entry.tsx">
'use client';

import { useState, useEffect } from 'react';
import { createClient } from '@supabase/supabase-js';
import { ChevronDown, ChevronRight, Save, Plus } from 'lucide-react';

// 인라인 스타일 상수
const tableHeaderStyle = "px-4 py-2 bg-gray-100 text-left text-sm font-medium text-gray-600 uppercase tracking-wider";
const tableCellStyle = "px-4 py-2 whitespace-nowrap text-sm text-gray-700 border-b";
const inputStyle = "w-full px-2 py-1 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500";

// 타입 정의
type KOL = {
  id: number;
  name: string;
  shop_name: string;
};

type Shop = {
  id: number;
  shop_name: string;
  owner_name: string;
  kol_id: number;
};

type ShopSalesMetrics = {
  id?: number;
  shop_id: number;
  year_month: string;
  total_sales: number;
  product_sales: number;
  device_sales: number;
  commission: number;
};

// Supabase 클라이언트 설정
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || '';
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || '';
const supabase = createClient(supabaseUrl, supabaseKey);

export default function ShopDataEntry() {
  const [kols, setKols] = useState<KOL[]>([]);
  const [shops, setShops] = useState<Shop[]>([]);
  const [selectedKOL, setSelectedKOL] = useState<number | null>(null);
  const [expandedKOLs, setExpandedKOLs] = useState<number[]>([]);
  const [yearMonth, setYearMonth] = useState('202505'); // 기본값 설정
  const [shopSalesData, setShopSalesData] = useState<{[key: number]: ShopSalesMetrics}>({});
  const [isLoading, setIsLoading] = useState(true);
  const [saveStatus, setSaveStatus] = useState<{[key: number]: 'saved' | 'unsaved' | 'saving'}>({});

  // KOL 목록 및 관련 데이터 로드
  useEffect(() => {
    async function fetchData() {
      setIsLoading(true);
      try {
        // KOL 목록 가져오기
        const { data: kolData, error: kolError } = await supabase
          .from('kols')
          .select('id, name, shop_name')
          .order('id');
        
        if (kolError) throw kolError;
        setKols(kolData || []);
        
        // 매장 정보 가져오기
        const { data: shopData, error: shopError } = await supabase
          .from('shops')
          .select('id, shop_name, owner_name, kol_id');
        
        if (shopError) throw shopError;
        setShops(shopData || []);
        
        // 매장 매출 데이터 가져오기
        const { data: salesData, error: salesError } = await supabase
          .from('shop_sales_metrics')
          .select('*')
          .eq('year_month', yearMonth);
        
        if (salesError) throw salesError;
        
        // 데이터를 매장 ID로 인덱싱
        const indexedData: {[key: number]: ShopSalesMetrics} = {};
        salesData?.forEach(item => {
          indexedData[item.shop_id] = item;
        });
        
        setShopSalesData(indexedData);
        
        // 기본 저장 상태 설정
        const newSaveStatus: {[key: number]: 'saved' | 'unsaved' | 'saving'} = {};
        shopData?.forEach(shop => {
          newSaveStatus[shop.id] = indexedData[shop.id] ? 'saved' : 'unsaved';
        });
        
        setSaveStatus(newSaveStatus);
      } catch (error) {
        console.error('데이터 로드 오류:', error);
      } finally {
        setIsLoading(false);
      }
    }
    
    fetchData();
  }, [yearMonth]);

  // KOL 확장/축소 토글
  const toggleKOL = (kolId: number) => {
    if (expandedKOLs.includes(kolId)) {
      setExpandedKOLs(expandedKOLs.filter(id => id !== kolId));
    } else {
      setExpandedKOLs([...expandedKOLs, kolId]);
    }
    setSelectedKOL(kolId);
  };

  // 데이터 변경 핸들러
  const handleDataChange = (shopId: number, field: keyof ShopSalesMetrics, value: number) => {
    setShopSalesData(prev => ({
      ...prev,
      [shopId]: {
        ...prev[shopId] || {
          shop_id: shopId,
          year_month: yearMonth,
          total_sales: 0,
          product_sales: 0,
          device_sales: 0,
          commission: 0
        },
        [field]: value
      }
    }));
    
    setSaveStatus(prev => ({
      ...prev,
      [shopId]: 'unsaved'
    }));
  };

  // 데이터 저장 핸들러
  const saveShopData = async (shopId: number) => {
    try {
      setSaveStatus(prev => ({
        ...prev,
        [shopId]: 'saving'
      }));
      
      const dataToSave = shopSalesData[shopId];
      
      // 이미 존재하는 데이터인지 확인
      const { data: existingData, error: checkError } = await supabase
        .from('shop_sales_metrics')
        .select('id')
        .eq('shop_id', shopId)
        .eq('year_month', yearMonth)
        .maybeSingle();
      
      if (checkError) throw checkError;
      
      if (existingData?.id) {
        // 업데이트
        const { error: updateError } = await supabase
          .from('shop_sales_metrics')
          .update({
            total_sales: dataToSave.total_sales,
            product_sales: dataToSave.product_sales,
            device_sales: dataToSave.device_sales,
            commission: dataToSave.commission
          })
          .eq('id', existingData.id);
        
        if (updateError) throw updateError;
      } else {
        // 새로 생성
        const { error: insertError } = await supabase
          .from('shop_sales_metrics')
          .insert([dataToSave]);
        
        if (insertError) throw insertError;
      }
      
      setSaveStatus(prev => ({
        ...prev,
        [shopId]: 'saved'
      }));
      
      alert(`매장 ID ${shopId}의 데이터가 저장되었습니다.`);
    } catch (error) {
      console.error('데이터 저장 오류:', error);
      alert('데이터 저장 중 오류가 발생했습니다.');
      
      setSaveStatus(prev => ({
        ...prev,
        [shopId]: 'unsaved'
      }));
    }
  };

  // 연월 변경 핸들러
  const handleYearMonthChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setYearMonth(e.target.value);
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-full">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500 mx-auto"></div>
          <p className="mt-4">데이터를 불러오는 중입니다...</p>
        </div>
      </div>
    );
  }

  return (
    <>
      {/* 연월 선택 */}
      <div className="mb-6">
        <label htmlFor="yearMonth" className="block text-sm font-medium text-gray-700 mb-1">기준 연월:</label>
        <select 
          id="yearMonth"
          value={yearMonth}
          onChange={handleYearMonthChange}
          className="border rounded p-2 w-40"
        >
          <option value="202501">2025년 1월</option>
          <option value="202502">2025년 2월</option>
          <option value="202503">2025년 3월</option>
          <option value="202504">2025년 4월</option>
          <option value="202505">2025년 5월</option>
          <option value="202506">2025년 6월</option>
        </select>
      </div>
      
      <div className="flex flex-col md:flex-row gap-6">
        {/* 왼쪽 사이드바 */}
        <div className="w-full md:w-1/3 lg:w-1/4 bg-white rounded-lg shadow-md p-4 h-[calc(100vh-300px)] overflow-y-auto">
          <h2 className="text-lg font-semibold mb-4">KOL 목록</h2>
          <ul className="space-y-1">
            {kols.map(kol => (
              <li key={kol.id}>
                <button 
                  onClick={() => toggleKOL(kol.id)}
                  className="flex items-center w-full text-left p-2 rounded hover:bg-gray-100"
                >
                  {expandedKOLs.includes(kol.id) ? <ChevronDown size={16} /> : <ChevronRight size={16} />}
                  <span className="ml-2">{kol.shop_name} / {kol.name}</span>
                </button>
                
                {expandedKOLs.includes(kol.id) && (
                  <ul className="ml-6 mt-1 space-y-1">
                    {shops
                      .filter(shop => shop.kol_id === kol.id)
                      .map(shop => (
                        <li key={shop.id}>
                          <button
                            onClick={() => setSelectedKOL(kol.id)}
                            className="flex items-center w-full text-left p-2 rounded hover:bg-gray-100"
                          >
                            <span className="text-sm">{shop.shop_name}</span>
                            {saveStatus[shop.id] === 'unsaved' && (
                              <span className="ml-auto text-xs text-red-500">저장 필요</span>
                            )}
                          </button>
                        </li>
                      ))
                    }
                  </ul>
                )}
              </li>
            ))}
          </ul>
        </div>
        
        {/* 오른쪽 내용 */}
        <div className="w-full md:flex-1 bg-white rounded-lg shadow-md p-4 h-[calc(100vh-300px)] overflow-y-auto">
          {selectedKOL ? (
            <>
              <h2 className="text-lg font-semibold mb-4">
                {kols.find(k => k.id === selectedKOL)?.shop_name} / {kols.find(k => k.id === selectedKOL)?.name} 소속 전문점
              </h2>
              
              {shops.filter(shop => shop.kol_id === selectedKOL).length > 0 ? (
                <div className="space-y-6">
                  {shops
                    .filter(shop => shop.kol_id === selectedKOL)
                    .map(shop => (
                      <div key={shop.id} className="border rounded-lg p-4">
                        <div className="flex justify-between items-center mb-4">
                          <h3 className="text-md font-medium">{shop.shop_name} (소유자: {shop.owner_name})</h3>
                          <button
                            onClick={() => saveShopData(shop.id)}
                            disabled={saveStatus[shop.id] === 'saving' || saveStatus[shop.id] === 'saved'}
                            className={`flex items-center px-4 py-2 rounded ${
                              saveStatus[shop.id] === 'saved' 
                                ? 'bg-green-100 text-green-700' 
                                : saveStatus[shop.id] === 'saving'
                                  ? 'bg-gray-100 text-gray-500'
                                  : 'bg-blue-500 text-white hover:bg-blue-600'
                            }`}
                          >
                            <Save size={16} className="mr-2" />
                            {saveStatus[shop.id] === 'saved' 
                              ? '저장됨' 
                              : saveStatus[shop.id] === 'saving'
                                ? '저장 중...'
                                : '저장하기'}
                          </button>
                        </div>
                        
                        <table className="min-w-full">
                          <thead>
                            <tr>
                              <th className={tableHeaderStyle}>항목</th>
                              <th className={tableHeaderStyle}>값</th>
                            </tr>
                          </thead>
                          <tbody>
                            <tr>
                              <td className={tableCellStyle}>총 매출 (₩)</td>
                              <td className={tableCellStyle}>
                                <input
                                  type="number"
                                  value={shopSalesData[shop.id]?.total_sales || 0}
                                  onChange={(e) => handleDataChange(shop.id, 'total_sales', Number(e.target.value))}
                                  className={inputStyle}
                                />
                              </td>
                            </tr>
                            <tr>
                              <td className={tableCellStyle}>제품 매출 (₩)</td>
                              <td className={tableCellStyle}>
                                <input
                                  type="number"
                                  value={shopSalesData[shop.id]?.product_sales || 0}
                                  onChange={(e) => handleDataChange(shop.id, 'product_sales', Number(e.target.value))}
                                  className={inputStyle}
                                />
                              </td>
                            </tr>
                            <tr>
                              <td className={tableCellStyle}>장비 매출 (₩)</td>
                              <td className={tableCellStyle}>
                                <input
                                  type="number"
                                  value={shopSalesData[shop.id]?.device_sales || 0}
                                  onChange={(e) => handleDataChange(shop.id, 'device_sales', Number(e.target.value))}
                                  className={inputStyle}
                                />
                              </td>
                            </tr>
                            <tr>
                              <td className={tableCellStyle}>수당 (₩)</td>
                              <td className={tableCellStyle}>
                                <input
                                  type="number"
                                  value={shopSalesData[shop.id]?.commission || 0}
                                  onChange={(e) => handleDataChange(shop.id, 'commission', Number(e.target.value))}
                                  className={inputStyle}
                                />
                              </td>
                            </tr>
                          </tbody>
                        </table>
                      </div>
                    ))
                  }
                </div>
              ) : (
                <p className="text-gray-500 italic">소속 전문점이 없습니다.</p>
              )}
            </>
          ) : (
            <div className="flex items-center justify-center h-full text-gray-500">
              <p>왼쪽 목록에서 KOL을 선택해주세요.</p>
            </div>
          )}
        </div>
      </div>
    </>
  );
}
</file>
  <file path="app/admin-dashboard/kol-data-entry/page.tsx">
'use client';

import { useState } from 'react';
import dynamic from 'next/dynamic';

// 동적 임포트로 컴포넌트 로드
const KOLDataEntry = dynamic(() => import('./components/kol-data-entry'), { ssr: false });
const ShopDataEntry = dynamic(() => import('./components/shop-data-entry'), { ssr: false });

export default function KOLDataEntryPage() {
  const [activeTab, setActiveTab] = useState<'kol' | 'shop'>('kol');
  
  return (
    <div className="container mx-auto">
      <h1 className="text-2xl font-bold mb-6">KOL 데이터 입력</h1>
      
      {/* 탭 네비게이션 */}
      <div className="flex border-b border-gray-200 mb-6">
        <button
          className={`py-2 px-4 font-medium ${
            activeTab === 'kol'
              ? 'text-blue-600 border-b-2 border-blue-500'
              : 'text-gray-500 hover:text-gray-700'
          }`}
          onClick={() => setActiveTab('kol')}
        >
          KOL 데이터 입력
        </button>
        <button
          className={`py-2 px-4 font-medium ${
            activeTab === 'shop'
              ? 'text-blue-600 border-b-2 border-blue-500'
              : 'text-gray-500 hover:text-gray-700'
          }`}
          onClick={() => setActiveTab('shop')}
        >
          전문점 매출 데이터 입력
        </button>
      </div>
      
      {/* 탭 컨텐츠 */}
      <div>
        {activeTab === 'kol' && <KOLDataEntry />}
        {activeTab === 'shop' && <ShopDataEntry />}
      </div>
    </div>
  );
}
</file>
  <file path="app/admin-dashboard/kol-data-entry/shop-page.tsx">
'use client';

import { useState, useEffect } from 'react';
import { createClient } from '@supabase/supabase-js';
import { ChevronDown, ChevronRight, Save, Plus } from 'lucide-react';

// 인라인 스타일 상수
const tableHeaderStyle = "px-4 py-2 bg-gray-100 text-left text-sm font-medium text-gray-600 uppercase tracking-wider";
const tableCellStyle = "px-4 py-2 whitespace-nowrap text-sm text-gray-700 border-b";
const inputStyle = "w-full px-2 py-1 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500";

// 타입 정의
type KOL = {
  id: number;
  name: string;
  shop_name: string;
};

type Shop = {
  id: number;
  shop_name: string;
  owner_name: string;
  kol_id: number;
};

type ShopSalesMetrics = {
  id?: number;
  shop_id: number;
  year_month: string;
  total_sales: number;
  product_sales: number;
  device_sales: number;
  commission: number;
};

// Supabase 클라이언트 설정
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || '';
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || '';
const supabase = createClient(supabaseUrl, supabaseKey);

export default function ShopDataEntryPage() {
  const [kols, setKols] = useState<KOL[]>([]);
  const [shops, setShops] = useState<Shop[]>([]);
  const [selectedKOL, setSelectedKOL] = useState<number | null>(null);
  const [expandedKOLs, setExpandedKOLs] = useState<number[]>([]);
  const [yearMonth, setYearMonth] = useState('202505'); // 기본값 설정
  const [shopSalesData, setShopSalesData] = useState<{[key: number]: ShopSalesMetrics}>({});
  const [isLoading, setIsLoading] = useState(true);
  const [saveStatus, setSaveStatus] = useState<{[key: number]: 'saved' | 'unsaved' | 'saving'}>({});

  // KOL 목록 및 관련 데이터 로드
  useEffect(() => {
    async function fetchData() {
      setIsLoading(true);
      try {
        // KOL 목록 가져오기
        const { data: kolData, error: kolError } = await supabase
          .from('kols')
          .select('id, name, shop_name')
          .order('id');
        
        if (kolError) throw kolError;
        setKols(kolData || []);
        
        // 매장 정보 가져오기
        const { data: shopData, error: shopError } = await supabase
          .from('shops')
          .select('id, shop_name, owner_name, kol_id');
        
        if (shopError) throw shopError;
        setShops(shopData || []);
        
        // 매장 매출 데이터 가져오기
        const { data: salesData, error: salesError } = await supabase
          .from('shop_sales_metrics')
          .select('*')
          .eq('year_month', yearMonth);
        
        if (salesError) throw salesError;
        
        // 데이터를 매장 ID로 인덱싱
        const indexedData: {[key: number]: ShopSalesMetrics} = {};
        salesData?.forEach(item => {
          indexedData[item.shop_id] = item;
        });
        
        setShopSalesData(indexedData);
        
        // 기본 저장 상태 설정
        const newSaveStatus: {[key: number]: 'saved' | 'unsaved' | 'saving'} = {};
        shopData?.forEach(shop => {
          newSaveStatus[shop.id] = indexedData[shop.id] ? 'saved' : 'unsaved';
        });
        
        setSaveStatus(newSaveStatus);
      } catch (error) {
        console.error('데이터 로드 오류:', error);
      } finally {
        setIsLoading(false);
      }
    }
    
    fetchData();
  }, [yearMonth]);

  // KOL 확장/축소 토글
  const toggleKOL = (kolId: number) => {
    if (expandedKOLs.includes(kolId)) {
      setExpandedKOLs(expandedKOLs.filter(id => id !== kolId));
    } else {
      setExpandedKOLs([...expandedKOLs, kolId]);
    }
    setSelectedKOL(kolId);
  };

  // 데이터 변경 핸들러
  const handleDataChange = (shopId: number, field: keyof ShopSalesMetrics, value: number) => {
    setShopSalesData(prev => ({
      ...prev,
      [shopId]: {
        ...prev[shopId] || {
          shop_id: shopId,
          year_month: yearMonth,
          total_sales: 0,
          product_sales: 0,
          device_sales: 0,
          commission: 0
        },
        [field]: value
      }
    }));
    
    setSaveStatus(prev => ({
      ...prev,
      [shopId]: 'unsaved'
    }));
  };

  // 데이터 저장 핸들러
  const saveShopData = async (shopId: number) => {
    try {
      setSaveStatus(prev => ({
        ...prev,
        [shopId]: 'saving'
      }));
      
      const dataToSave = shopSalesData[shopId];
      
      // 이미 존재하는 데이터인지 확인
      const { data: existingData, error: checkError } = await supabase
        .from('shop_sales_metrics')
        .select('id')
        .eq('shop_id', shopId)
        .eq('year_month', yearMonth)
        .maybeSingle();
      
      if (checkError) throw checkError;
      
      if (existingData?.id) {
        // 업데이트
        const { error: updateError } = await supabase
          .from('shop_sales_metrics')
          .update({
            total_sales: dataToSave.total_sales,
            product_sales: dataToSave.product_sales,
            device_sales: dataToSave.device_sales,
            commission: dataToSave.commission
          })
          .eq('id', existingData.id);
        
        if (updateError) throw updateError;
      } else {
        // 새로 생성
        const { error: insertError } = await supabase
          .from('shop_sales_metrics')
          .insert([dataToSave]);
        
        if (insertError) throw insertError;
      }
      
      setSaveStatus(prev => ({
        ...prev,
        [shopId]: 'saved'
      }));
      
      alert(`매장 ID ${shopId}의 데이터가 저장되었습니다.`);
    } catch (error) {
      console.error('데이터 저장 오류:', error);
      alert('데이터 저장 중 오류가 발생했습니다.');
      
      setSaveStatus(prev => ({
        ...prev,
        [shopId]: 'unsaved'
      }));
    }
  };

  // 연월 변경 핸들러
  const handleYearMonthChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setYearMonth(e.target.value);
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-full">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500 mx-auto"></div>
          <p className="mt-4">데이터를 불러오는 중입니다...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto">
      <h1 className="text-2xl font-bold mb-6">전문점 매출 데이터 입력</h1>
      
      {/* 연월 선택 */}
      <div className="mb-6">
        <label htmlFor="yearMonth" className="block text-sm font-medium text-gray-700 mb-1">기준 연월:</label>
        <select 
          id="yearMonth"
          value={yearMonth}
          onChange={handleYearMonthChange}
          className="border rounded p-2 w-40"
        >
          <option value="202501">2025년 1월</option>
          <option value="202502">2025년 2월</option>
          <option value="202503">2025년 3월</option>
          <option value="202504">2025년 4월</option>
          <option value="202505">2025년 5월</option>
          <option value="202506">2025년 6월</option>
        </select>
      </div>
      
      <div className="flex flex-col md:flex-row gap-6">
        {/* 왼쪽 사이드바 */}
        <div className="w-full md:w-1/3 lg:w-1/4 bg-white rounded-lg shadow-md p-4 h-[calc(100vh-200px)] overflow-y-auto">
          <h2 className="text-lg font-semibold mb-4">KOL 목록</h2>
          <ul className="space-y-1">
            {kols.map(kol => (
              <li key={kol.id}>
                <button 
                  onClick={() => toggleKOL(kol.id)}
                  className="flex items-center w-full text-left p-2 rounded hover:bg-gray-100"
                >
                  {expandedKOLs.includes(kol.id) ? <ChevronDown size={16} /> : <ChevronRight size={16} />}
                  <span className="ml-2">{kol.shop_name} / {kol.name}</span>
                </button>
                
                {expandedKOLs.includes(kol.id) && (
                  <ul className="ml-6 mt-1 space-y-1">
                    {shops
                      .filter(shop => shop.kol_id === kol.id)
                      .map(shop => (
                        <li key={shop.id}>
                          <button
                            onClick={() => setSelectedKOL(kol.id)}
                            className="flex items-center w-full text-left p-2 rounded hover:bg-gray-100"
                          >
                            <span className="text-sm">{shop.shop_name}</span>
                            {saveStatus[shop.id] === 'unsaved' && (
                              <span className="ml-auto text-xs text-red-500">저장 필요</span>
                            )}
                          </button>
                        </li>
                      ))
                    }
                  </ul>
                )}
              </li>
            ))}
          </ul>
        </div>
        
        {/* 오른쪽 내용 */}
        <div className="w-full md:flex-1 bg-white rounded-lg shadow-md p-4 h-[calc(100vh-200px)] overflow-y-auto">
          {selectedKOL ? (
            <>
              <h2 className="text-lg font-semibold mb-4">
                {kols.find(k => k.id === selectedKOL)?.shop_name} / {kols.find(k => k.id === selectedKOL)?.name} 소속 전문점
              </h2>
              
              {shops.filter(shop => shop.kol_id === selectedKOL).length > 0 ? (
                <div className="space-y-6">
                  {shops
                    .filter(shop => shop.kol_id === selectedKOL)
                    .map(shop => (
                      <div key={shop.id} className="border rounded-lg p-4">
                        <div className="flex justify-between items-center mb-4">
                          <h3 className="text-md font-medium">{shop.shop_name} (소유자: {shop.owner_name})</h3>
                          <button
                            onClick={() => saveShopData(shop.id)}
                            disabled={saveStatus[shop.id] === 'saving' || saveStatus[shop.id] === 'saved'}
                            className={`flex items-center px-4 py-2 rounded ${
                              saveStatus[shop.id] === 'saved' 
                                ? 'bg-green-100 text-green-700' 
                                : saveStatus[shop.id] === 'saving'
                                  ? 'bg-gray-100 text-gray-500'
                                  : 'bg-blue-500 text-white hover:bg-blue-600'
                            }`}
                          >
                            <Save size={16} className="mr-2" />
                            {saveStatus[shop.id] === 'saved' 
                              ? '저장됨' 
                              : saveStatus[shop.id] === 'saving'
                                ? '저장 중...'
                                : '저장하기'}
                          </button>
                        </div>
                        
                        <table className="min-w-full">
                          <thead>
                            <tr>
                              <th className={tableHeaderStyle}>항목</th>
                              <th className={tableHeaderStyle}>값</th>
                            </tr>
                          </thead>
                          <tbody>
                            <tr>
                              <td className={tableCellStyle}>총 매출 (₩)</td>
                              <td className={tableCellStyle}>
                                <input
                                  type="number"
                                  value={shopSalesData[shop.id]?.total_sales || 0}
                                  onChange={(e) => handleDataChange(shop.id, 'total_sales', Number(e.target.value))}
                                  className={inputStyle}
                                />
                              </td>
                            </tr>
                            <tr>
                              <td className={tableCellStyle}>제품 매출 (₩)</td>
                              <td className={tableCellStyle}>
                                <input
                                  type="number"
                                  value={shopSalesData[shop.id]?.product_sales || 0}
                                  onChange={(e) => handleDataChange(shop.id, 'product_sales', Number(e.target.value))}
                                  className={inputStyle}
                                />
                              </td>
                            </tr>
                            <tr>
                              <td className={tableCellStyle}>장비 매출 (₩)</td>
                              <td className={tableCellStyle}>
                                <input
                                  type="number"
                                  value={shopSalesData[shop.id]?.device_sales || 0}
                                  onChange={(e) => handleDataChange(shop.id, 'device_sales', Number(e.target.value))}
                                  className={inputStyle}
                                />
                              </td>
                            </tr>
                            <tr>
                              <td className={tableCellStyle}>수당 (₩)</td>
                              <td className={tableCellStyle}>
                                <input
                                  type="number"
                                  value={shopSalesData[shop.id]?.commission || 0}
                                  onChange={(e) => handleDataChange(shop.id, 'commission', Number(e.target.value))}
                                  className={inputStyle}
                                />
                              </td>
                            </tr>
                          </tbody>
                        </table>
                      </div>
                    ))
                  }
                </div>
              ) : (
                <p className="text-gray-500 italic">소속 전문점이 없습니다.</p>
              )}
            </>
          ) : (
            <div className="flex items-center justify-center h-full text-gray-500">
              <p>왼쪽 목록에서 KOL을 선택해주세요.</p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
</file>
  <file path="app/admin-dashboard/kol-metrics/page.tsx">
"use client";

import { useState, useEffect } from 'react';
import { createClient } from '@supabase/supabase-js';
import { BarChart3, Calendar, Search, Edit, Save, X } from 'lucide-react';

// 타입 정의
type KOL = {
  id: number;
  name: string;
  shop_name: string;
};

type KolMetric = {
  id: number;
  kol_id: number;
  year_month: string;
  monthly_sales: number;
  monthly_commission: number;
  active_shops_count: number;
  total_shops_count: number;
};

// KOL 월별 지표 관리 페이지
export default function KolMetricsPage() {
  const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL || '',
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || ''
  );
  const [kols, setKols] = useState<KOL[]>([]);
  const [selectedKolId, setSelectedKolId] = useState<number | null>(null);
  const [yearMonth, setYearMonth] = useState<string>('');
  const [metrics, setMetrics] = useState<KolMetric[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState('');
  
  // 편집 상태
  const [editingId, setEditingId] = useState<number | null>(null);
  const [editForm, setEditForm] = useState({
    monthly_sales: 0,
    monthly_commission: 0,
    active_shops_count: 0,
    total_shops_count: 0,
  });

  // 현재 년월 설정 (기본값)
  useEffect(() => {
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0');
    setYearMonth(`${year}-${month}`);
  }, []);

  // KOL 목록 조회
  const fetchKols = async () => {
    const { data } = await supabase
      .from('kols')
      .select('id, name, shop_name')
      .order('id');
    
    if (data) {
      setKols(data);
      if (data.length > 0 && !selectedKolId) {
        setSelectedKolId(data[0].id);
      }
    }
  };

  // KOL 월별 지표 조회
  const fetchMetrics = async () => {
    setIsLoading(true);
    let query = supabase
      .from('kol_dashboard_metrics')
      .select('*');
    
    if (selectedKolId) {
      query = query.eq('kol_id', selectedKolId);
    }
    
    if (yearMonth) {
      query = query.eq('year_month', yearMonth);
    }
    
    const { data } = await query.order('kol_id').order('year_month');
    
    if (data) {
      setMetrics(data);
    }
    
    setIsLoading(false);
  };

  // 초기 데이터 로드
  useEffect(() => {
    fetchKols();
  }, []);

  // 선택된 KOL 또는 년월이 바뀔 때 지표 다시 조회
  useEffect(() => {
    if (selectedKolId || yearMonth) {
      fetchMetrics();
    }
  }, [selectedKolId, yearMonth]);

  // 지표 추가 함수
  const addMetric = async () => {
    if (!selectedKolId || !yearMonth) {
      alert('KOL과 년월을 선택해주세요.');
      return;
    }

    // 이미 존재하는지 확인
    const { data: existingData } = await supabase
      .from('kol_dashboard_metrics')
      .select('id')
      .eq('kol_id', selectedKolId)
      .eq('year_month', yearMonth)
      .maybeSingle();
    
    if (existingData) {
      alert('해당 KOL과 년월의 데이터가 이미 존재합니다.');
      return;
    }

    const { error } = await supabase
      .from('kol_dashboard_metrics')
      .insert([
        {
          kol_id: selectedKolId,
          year_month: yearMonth,
          monthly_sales: 0,
          monthly_commission: 0,
          active_shops_count: 0,
          total_shops_count: 0,
        },
      ]);

    if (error) {
      alert(`오류가 발생했습니다: ${error.message}`);
    } else {
      fetchMetrics();
    }
  };

  // 지표 수정 시작
  const startEdit = (metric: KolMetric) => {
    setEditingId(metric.id);
    setEditForm({
      monthly_sales: metric.monthly_sales,
      monthly_commission: metric.monthly_commission,
      active_shops_count: metric.active_shops_count,
      total_shops_count: metric.total_shops_count,
    });
  };

  // 지표 수정 취소
  const cancelEdit = () => {
    setEditingId(null);
    setEditForm({
      monthly_sales: 0,
      monthly_commission: 0,
      active_shops_count: 0,
      total_shops_count: 0,
    });
  };

  // 지표 수정 저장
  const saveEdit = async () => {
    if (!editingId) return;

    const { error } = await supabase
      .from('kol_dashboard_metrics')
      .update({
        monthly_sales: editForm.monthly_sales,
        monthly_commission: editForm.monthly_commission,
        active_shops_count: editForm.active_shops_count,
        total_shops_count: editForm.total_shops_count,
      })
      .eq('id', editingId);

    if (error) {
      alert(`오류가 발생했습니다: ${error.message}`);
    } else {
      setEditingId(null);
      setEditForm({
        monthly_sales: 0,
        monthly_commission: 0,
        active_shops_count: 0,
        total_shops_count: 0,
      });
      fetchMetrics();
    }
  };

  // KOL 이름으로 검색 필터링
  const filteredKols = kols.filter(
    (kol) =>
      kol.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      kol.shop_name.toLowerCase().includes(searchQuery.toLowerCase())
  );

  // KOL 이름 찾기 함수
  const getKolName = (kolId: number) => {
    const kol = kols.find(k => k.id === kolId);
    return kol ? kol.name : `KOL #${kolId}`;
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold text-gray-900">KOL 월별 지표 관리</h1>
        <button
          onClick={addMetric}
          className="bg-blue-600 text-white px-4 py-2 rounded-lg flex items-center"
        >
          <BarChart3 size={16} className="mr-2" />
          지표 추가
        </button>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        {/* KOL 선택 */}
        <div className="bg-white p-4 rounded-lg shadow">
          <h3 className="text-lg font-medium text-gray-900 mb-4">KOL 선택</h3>
          
          <div className="relative mb-4">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <Search size={18} className="text-gray-400" />
            </div>
            <input
              type="text"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              placeholder="KOL 이름 검색..."
              className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
            />
          </div>
          
          <div className="max-h-60 overflow-y-auto border border-gray-200 rounded-md">
            <ul className="divide-y divide-gray-200">
              {filteredKols.map((kol) => (
                <li key={kol.id}>
                  <button
                    onClick={() => setSelectedKolId(kol.id)}
                    className={`w-full text-left px-4 py-2 hover:bg-gray-50 focus:outline-none ${
                      selectedKolId === kol.id ? 'bg-blue-50 text-blue-600' : ''
                    }`}
                  >
                    <div className="font-medium">{kol.name}</div>
                    <div className="text-sm text-gray-500">{kol.shop_name}</div>
                  </button>
                </li>
              ))}
            </ul>
          </div>
        </div>

        {/* 년월 선택 */}
        <div className="bg-white p-4 rounded-lg shadow">
          <h3 className="text-lg font-medium text-gray-900 mb-4">년월 선택</h3>
          
          <div className="flex items-center">
            <Calendar size={20} className="text-gray-400 mr-2" />
            <input
              type="month"
              value={yearMonth}
              onChange={(e) => setYearMonth(e.target.value)}
              className="block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
            />
          </div>
        </div>
      </div>

      {/* 지표 테이블 */}
      <div className="bg-white shadow rounded-lg overflow-hidden">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                KOL
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                년월
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                월 매출 (원)
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                월 수수료 (원)
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                활성 전문점 수
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                전체 전문점 수
              </th>
              <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                관리
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {isLoading ? (
              <tr>
                <td colSpan={7} className="px-6 py-4 whitespace-nowrap text-center text-sm text-gray-500">
                  로딩 중...
                </td>
              </tr>
            ) : metrics.length === 0 ? (
              <tr>
                <td colSpan={7} className="px-6 py-4 whitespace-nowrap text-center text-sm text-gray-500">
                  데이터가 없습니다.
                </td>
              </tr>
            ) : (
              metrics.map((metric) => (
                <tr key={metric.id}>
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                    {getKolName(metric.kol_id)}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {metric.year_month}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {editingId === metric.id ? (
                      <input
                        type="number"
                        value={editForm.monthly_sales}
                        onChange={(e) => setEditForm({ ...editForm, monthly_sales: Number(e.target.value) })}
                        className="w-full border border-gray-300 rounded-md shadow-sm py-1 px-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                      />
                    ) : (
                      new Intl.NumberFormat('ko-KR').format(metric.monthly_sales)
                    )}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {editingId === metric.id ? (
                      <input
                        type="number"
                        value={editForm.monthly_commission}
                        onChange={(e) => setEditForm({ ...editForm, monthly_commission: Number(e.target.value) })}
                        className="w-full border border-gray-300 rounded-md shadow-sm py-1 px-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                      />
                    ) : (
                      new Intl.NumberFormat('ko-KR').format(metric.monthly_commission)
                    )}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {editingId === metric.id ? (
                      <input
                        type="number"
                        value={editForm.active_shops_count}
                        onChange={(e) => setEditForm({ ...editForm, active_shops_count: Number(e.target.value) })}
                        className="w-full border border-gray-300 rounded-md shadow-sm py-1 px-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                      />
                    ) : (
                      metric.active_shops_count
                    )}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {editingId === metric.id ? (
                      <input
                        type="number"
                        value={editForm.total_shops_count}
                        onChange={(e) => setEditForm({ ...editForm, total_shops_count: Number(e.target.value) })}
                        className="w-full border border-gray-300 rounded-md shadow-sm py-1 px-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                      />
                    ) : (
                      metric.total_shops_count
                    )}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                    {editingId === metric.id ? (
                      <div className="flex justify-end space-x-2">
                        <button onClick={saveEdit} className="text-green-600 hover:text-green-900">
                          <Save size={16} />
                        </button>
                        <button onClick={cancelEdit} className="text-red-600 hover:text-red-900">
                          <X size={16} />
                        </button>
                      </div>
                    ) : (
                      <button
                        onClick={() => startEdit(metric)}
                        className="text-blue-600 hover:text-blue-900"
                      >
                        <Edit size={16} />
                      </button>
                    )}
                  </td>
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}
</file>
  <file path="app/admin-dashboard/main/page.tsx">
'use client';

import { useEffect, useState } from 'react';
import Link from 'next/link';
import { BarChart3, Users, Store, PieChart } from 'lucide-react';
import { createClient } from '@supabase/supabase-js';
import { useUser } from '@clerk/nextjs';

// 대시보드 카드 컴포넌트
function DashboardCard({
  title,
  description,
  icon,
  linkText,
  linkHref,
}: {
  title: string;
  description: string;
  icon: React.ReactNode;
  linkText: string;
  linkHref: string;
}) {
  return (
    <div className="bg-white rounded-lg shadow p-6 transition-all hover:shadow-md">
      <div className="flex items-center mb-4">
        <div className="bg-blue-100 p-3 rounded-full mr-4 text-blue-600">
          {icon}
        </div>
        <h3 className="text-lg font-medium text-gray-900">{title}</h3>
      </div>
      <p className="text-gray-600 mb-4">{description}</p>
      <Link 
        href={linkHref}
        className="text-blue-600 hover:text-blue-800 flex items-center font-medium"
      >
        {linkText}
        <svg className="ml-1 w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
          <path fillRule="evenodd" d="M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z" clipRule="evenodd"></path>
        </svg>
      </Link>
    </div>
  );
}

// 통계 카드 컴포넌트
function StatCard({ title, value, subtitle }: { title: string; value: string | number; subtitle?: string }) {
  return (
    <div className="bg-white rounded-lg shadow p-6">
      <h3 className="text-sm font-medium text-gray-500 mb-1">{title}</h3>
      <p className="text-2xl font-bold text-gray-900 mb-1">{value}</p>
      {subtitle && <p className="text-sm text-gray-600">{subtitle}</p>}
    </div>
  );
}

// 메인 페이지 컴포넌트
export default function AdminDashboardMainPage() {
  const { isLoaded, isSignedIn, user } = useUser();
  const [stats, setStats] = useState({
    kolsCount: 0,
    shopsCount: 0,
    productsCount: 0,
    isLoading: true
  });

  useEffect(() => {
    // Clerk 로딩 및 인증 확인
    if (!isLoaded || !isSignedIn) return;

    async function fetchStats() {
      try {
        // Supabase 클라이언트 생성
        const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL as string;
        const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY as string;
        const supabase = createClient(supabaseUrl, supabaseAnonKey);

        // KOL 수 조회
        const { data: kols, error: kolsError } = await supabase
          .from('kols')
          .select('id', { count: 'exact' });

        // 전문점 수 조회
        const { data: shops, error: shopsError } = await supabase
          .from('shops')
          .select('id', { count: 'exact' });

        // 제품 수 조회
        const { data: products, error: productsError } = await supabase
          .from('products')
          .select('id', { count: 'exact' });

        if (kolsError || shopsError || productsError) {
          console.error('데이터 조회 중 오류 발생:', { kolsError, shopsError, productsError });
        }

        setStats({
          kolsCount: kols?.length || 0,
          shopsCount: shops?.length || 0,
          productsCount: products?.length || 0,
          isLoading: false
        });
      } catch (error) {
        console.error('통계 데이터 조회 오류:', error);
        setStats(prev => ({ ...prev, isLoading: false }));
      }
    }

    fetchStats();
  }, [isLoaded, isSignedIn]);

  return (
    <div className="space-y-6">
      <h1 className="text-2xl font-bold text-gray-900">관리자 대시보드</h1>
      
      {/* 통계 요약 */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        {stats.isLoading ? (
          // 로딩 표시
          Array(3).fill(0).map((_, index) => (
            <div key={index} className="bg-white rounded-lg shadow p-6 animate-pulse">
              <div className="h-2 bg-gray-200 rounded w-1/3 mb-4"></div>
              <div className="h-6 bg-gray-200 rounded w-1/2 mb-2"></div>
            </div>
          ))
        ) : (
          <>
            <StatCard title="전체 KOL 수" value={stats.kolsCount} />
            <StatCard title="전체 전문점 수" value={stats.shopsCount} />
            <StatCard title="전체 제품 수" value={stats.productsCount} />
          </>
        )}
      </div>
      
      {/* 관리 섹션 카드 */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <DashboardCard
          title="KOL 및 전문점 관리"
          description="KOL과 전문점 정보를 추가, 수정, 조회합니다."
          icon={<Users size={24} />}
          linkText="관리하기"
          linkHref="/admin-dashboard/entities"
        />
        
        <DashboardCard
          title="KOL 월별 지표 관리"
          description="KOL의 월별 실적 및 통계 데이터를 관리합니다."
          icon={<BarChart3 size={24} />}
          linkText="관리하기"
          linkHref="/admin-dashboard/kol-metrics"
        />
        
        <DashboardCard
          title="전문점 매출 관리"
          description="전문점별 매출 데이터를 관리합니다."
          icon={<Store size={24} />}
          linkText="관리하기"
          linkHref="/admin-dashboard/shop-sales"
        />
        
        <DashboardCard
          title="제품 매출 비율 관리"
          description="제품별 매출 비율 및 수량을 관리합니다."
          icon={<PieChart size={24} />}
          linkText="관리하기"
          linkHref="/admin-dashboard/product-sales"
        />
      </div>
    </div>
  );
}
</file>
  <file path="app/admin-dashboard/product-sales/page.tsx">
"use client";

import { useState, useEffect } from 'react';
import { createClient } from '@supabase/supabase-js';
import { Calendar, PieChart, Search, Save, Plus } from 'lucide-react';

// 타입 정의
type KOL = {
  id: number;
  name: string;
  shop_name: string;
};

type Product = {
  id: number;
  name: string;
  price: number;
  is_device: boolean;
  category: string;
};

type ProductSalesMetric = {
  id?: number;
  kol_id: number;
  product_id: number;
  year_month: string;
  quantity: number;
  sales_amount: number;
  sales_ratio: number;
  productName?: string; // UI 표시용
  productPrice?: number; // UI 표시용
  isDirty?: boolean; // 변경 여부 추적
};

// 제품 매출 비율 관리 페이지
export default function ProductSalesPage() {
  const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL || '',
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || ''
  );
  const [kols, setKols] = useState<KOL[]>([]);
  const [products, setProducts] = useState<Product[]>([]);
  const [selectedKolId, setSelectedKolId] = useState<number | null>(null);
  const [yearMonth, setYearMonth] = useState<string>('');
  const [productSalesData, setProductSalesData] = useState<ProductSalesMetric[]>([]);
  const [totalSales, setTotalSales] = useState(0);
  const [isLoading, setIsLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState('');
  const [savingStatus, setSavingStatus] = useState('');
  const [showAddProduct, setShowAddProduct] = useState(false);
  const [selectedProductId, setSelectedProductId] = useState<number | null>(null);

  // 현재 년월 설정 (기본값)
  useEffect(() => {
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0');
    setYearMonth(`${year}-${month}`);
  }, []);

  // KOL 목록 조회
  const fetchKols = async () => {
    const { data } = await supabase
      .from('kols')
      .select('id, name, shop_name')
      .order('id');
    
    if (data) {
      setKols(data);
    }
  };

  // 제품 목록 조회
  const fetchProducts = async () => {
    const { data } = await supabase
      .from('products')
      .select('id, name, price, is_device, category')
      .eq('status', 'active')
      .order('name');
    
    if (data) {
      setProducts(data);
    }
  };

  // 제품 매출 데이터 조회
  const fetchProductSalesData = async (kolId: number, yearMonth: string) => {
    setIsLoading(true);
    
    // 제품 목록이 없으면 먼저 조회
    if (products.length === 0) {
      await fetchProducts();
    }
    
    // 매출 데이터 조회
    const { data: salesData } = await supabase
      .from('product_sales_metrics')
      .select('*')
      .eq('kol_id', kolId)
      .eq('year_month', yearMonth);
    
    // 제품 정보와 매출 데이터 결합
    const enrichedSalesData = salesData?.map(data => {
      const product = products.find(p => p.id === data.product_id);
      return {
        ...data,
        productName: product?.name || `제품 #${data.product_id}`,
        productPrice: product?.price || 0,
        isDirty: false
      };
    }) || [];
    
    // 총 매출액 계산
    const totalSalesAmount = enrichedSalesData.reduce((sum, item) => sum + item.sales_amount, 0);
    setTotalSales(totalSalesAmount);
    
    setProductSalesData(enrichedSalesData);
    setIsLoading(false);
  };

  // 초기 데이터 로드
  useEffect(() => {
    fetchKols();
    fetchProducts();
  }, []);

  // 선택된 KOL 또는 년월이 바뀔 때 데이터 다시 조회
  useEffect(() => {
    if (selectedKolId && yearMonth) {
      fetchProductSalesData(selectedKolId, yearMonth);
    }
  }, [selectedKolId, yearMonth]);

  // 제품 수량 업데이트
  const updateProductQuantity = (productId: number, quantity: number) => {
    setProductSalesData(prevData => {
      // 해당 제품 찾기
      const productIndex = prevData.findIndex(item => item.product_id === productId);
      const product = products.find(p => p.id === productId);
      const price = product?.price || 0;
      
      // 판매액 계산
      const salesAmount = quantity * price;
      
      // 기존 데이터 수정
      if (productIndex >= 0) {
        const newData = [...prevData];
        newData[productIndex] = {
          ...newData[productIndex],
          quantity,
          sales_amount: salesAmount,
          isDirty: true
        };
        
        // 총 매출액 업데이트
        const newTotalSales = newData.reduce((sum, item) => sum + item.sales_amount, 0);
        setTotalSales(newTotalSales);
        
        // 비율 재계산
        return newData.map(item => ({
          ...item,
          sales_ratio: newTotalSales > 0 ? parseFloat(((item.sales_amount / newTotalSales) * 100).toFixed(2)) : 0,
          isDirty: item.product_id === productId ? true : item.isDirty
        }));
      } 
      // 새 제품 추가
      else {
        const newItem: ProductSalesMetric = {
          kol_id: selectedKolId!,
          product_id: productId,
          year_month: yearMonth,
          quantity,
          sales_amount: salesAmount,
          sales_ratio: 0, // 임시값, 아래에서 계산
          productName: product?.name || `제품 #${productId}`,
          productPrice: price,
          isDirty: true
        };
        
        const newData = [...prevData, newItem];
        const newTotalSales = newData.reduce((sum, item) => sum + item.sales_amount, 0);
        setTotalSales(newTotalSales);
        
        // 비율 재계산
        return newData.map(item => ({
          ...item,
          sales_ratio: newTotalSales > 0 ? parseFloat(((item.sales_amount / newTotalSales) * 100).toFixed(2)) : 0,
          isDirty: item.product_id === productId ? true : item.isDirty
        }));
      }
    });
  };

  // 제품 추가 처리
  const handleAddProduct = () => {
    if (selectedProductId) {
      // 이미 추가된 제품인지 확인
      const existingProduct = productSalesData.find(
        item => item.product_id === selectedProductId
      );
      
      if (existingProduct) {
        alert('이미 추가된 제품입니다.');
        return;
      }
      
      // 기본값 1로 추가
      updateProductQuantity(selectedProductId, 1);
      setSelectedProductId(null);
      setShowAddProduct(false);
    }
  };

  // 변경사항 저장
  const saveChanges = async () => {
    setSavingStatus('저장 중...');

    try {
      // 변경된 데이터만 필터링
      const dirtyData = productSalesData.filter(data => data.isDirty);
      
      if (dirtyData.length === 0) {
        setSavingStatus('변경사항이 없습니다');
        setTimeout(() => setSavingStatus(''), 2000);
        return;
      }

      // 저장할 데이터 준비 (UI 관련 필드 제거)
      const prepareDataForSave = (data: ProductSalesMetric) => {
        const { isDirty, productName, productPrice, ...saveData } = data;
        return saveData;
      };

      // 새로운 데이터와 업데이트할 데이터 분리
      const newData = dirtyData.filter(data => !data.id);
      const updateData = dirtyData.filter(data => data.id);

      // 새 데이터 추가
      if (newData.length > 0) {
        const dataToInsert = newData.map(prepareDataForSave);
        const { error: insertError } = await supabase
          .from('product_sales_metrics')
          .insert(dataToInsert);

        if (insertError) throw new Error(`새 데이터 추가 오류: ${insertError.message}`);
      }

      // 기존 데이터 업데이트
      for (const item of updateData) {
        const dataToUpdate = prepareDataForSave(item);
        const { error: updateError } = await supabase
          .from('product_sales_metrics')
          .update(dataToUpdate)
          .eq('id', item.id);

        if (updateError) throw new Error(`데이터 업데이트 오류: ${updateError.message}`);
      }

      // 성공 후 데이터 다시 로드
      if (selectedKolId) {
        await fetchProductSalesData(selectedKolId, yearMonth);
      }

      setSavingStatus('저장 완료!');
      setTimeout(() => setSavingStatus(''), 2000);
    } catch (error) {
      setSavingStatus(`오류: ${error instanceof Error ? error.message : '알 수 없는 오류'}`);
      setTimeout(() => setSavingStatus(''), 5000);
    }
  };

  // 제품 필터링 (검색)
  const filteredProducts = products.filter(product =>
    product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
    (product.category && product.category.toLowerCase().includes(searchQuery.toLowerCase()))
  );

  // 제품 정렬 (장비 구분)
  const sortedProducts = [...filteredProducts].sort((a, b) => {
    // 우선 장비/제품 구분
    if (a.is_device !== b.is_device) {
      return a.is_device ? -1 : 1;
    }
    // 그 다음 카테고리
    if (a.category !== b.category) {
      return (a.category || '').localeCompare(b.category || '');
    }
    // 마지막으로 이름
    return a.name.localeCompare(b.name);
  });

  // KOL 이름 찾기
  const getKolName = (kolId: number) => {
    const kol = kols.find(k => k.id === kolId);
    return kol ? kol.name : `KOL #${kolId}`;
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold text-gray-900">제품 매출 비율 관리</h1>
        <div className="flex items-center space-x-2">
          <div className="flex items-center bg-white rounded-lg shadow-sm px-4 py-2">
            <Calendar size={20} className="text-gray-400 mr-2" />
            <input
              type="month"
              value={yearMonth}
              onChange={(e) => setYearMonth(e.target.value)}
              className="border-none focus:outline-none text-sm"
            />
          </div>
          <button
            onClick={saveChanges}
            className="bg-blue-600 text-white px-4 py-2 rounded-lg flex items-center"
            disabled={!productSalesData.some(data => data.isDirty)}
          >
            <Save size={16} className="mr-2" />
            변경사항 저장
          </button>
        </div>
      </div>

      {savingStatus && (
        <div className={`p-2 rounded-md text-center text-sm ${
          savingStatus.includes('오류') 
            ? 'bg-red-100 text-red-700' 
            : savingStatus.includes('완료') 
              ? 'bg-green-100 text-green-700' 
              : 'bg-blue-100 text-blue-700'
        }`}>
          {savingStatus}
        </div>
      )}

      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        {/* KOL 선택 */}
        <div className="bg-white p-4 rounded-lg shadow">
          <h3 className="text-lg font-medium text-gray-900 mb-4">KOL 선택</h3>
          
          <div className="max-h-60 overflow-y-auto border border-gray-200 rounded-md">
            <ul className="divide-y divide-gray-200">
              {kols.map((kol) => (
                <li key={kol.id}>
                  <button
                    onClick={() => setSelectedKolId(kol.id)}
                    className={`w-full text-left px-4 py-2 hover:bg-gray-50 focus:outline-none ${
                      selectedKolId === kol.id ? 'bg-blue-50 text-blue-600' : ''
                    }`}
                  >
                    <div className="font-medium">{kol.name}</div>
                    <div className="text-sm text-gray-500">{kol.shop_name}</div>
                  </button>
                </li>
              ))}
            </ul>
          </div>
        </div>

        {/* 매출 요약 */}
        {selectedKolId && (
          <div className="md:col-span-2 bg-white p-4 rounded-lg shadow">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-medium text-gray-900">
                {getKolName(selectedKolId)} - {yearMonth} 제품 매출
              </h3>
              <button
                onClick={() => setShowAddProduct(!showAddProduct)}
                className="bg-green-600 text-white px-3 py-1 rounded-lg flex items-center text-sm"
              >
                <Plus size={16} className="mr-1" />
                제품 추가
              </button>
            </div>
            
            {showAddProduct && (
              <div className="mb-4 p-3 border border-gray-200 rounded-lg">
                <div className="relative mb-2">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <Search size={18} className="text-gray-400" />
                  </div>
                  <input
                    type="text"
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    placeholder="제품 검색..."
                    className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                  />
                </div>
                
                <div className="max-h-40 overflow-y-auto border border-gray-200 rounded-md mb-2">
                  <ul className="divide-y divide-gray-200">
                    {sortedProducts.map((product) => (
                      <li 
                        key={product.id}
                        className={`cursor-pointer hover:bg-gray-50 ${
                          selectedProductId === product.id ? 'bg-blue-50' : ''
                        }`}
                        onClick={() => setSelectedProductId(product.id)}
                      >
                        <div className="px-4 py-2">
                          <div className="flex justify-between">
                            <div className="font-medium">
                              {product.name}
                              {product.is_device && (
                                <span className="ml-2 text-xs bg-yellow-100 text-yellow-800 px-2 py-0.5 rounded-full">
                                  장비
                                </span>
                              )}
                            </div>
                            <div className="text-sm text-gray-600">
                              {new Intl.NumberFormat('ko-KR').format(product.price)}원
                            </div>
                          </div>
                          {product.category && (
                            <div className="text-xs text-gray-500">{product.category}</div>
                          )}
                        </div>
                      </li>
                    ))}
                  </ul>
                </div>
                
                <div className="flex justify-end">
                  <button
                    onClick={() => setShowAddProduct(false)}
                    className="mr-2 bg-gray-100 text-gray-700 px-3 py-1 rounded text-sm"
                  >
                    취소
                  </button>
                  <button
                    onClick={handleAddProduct}
                    className="bg-blue-600 text-white px-3 py-1 rounded text-sm"
                    disabled={!selectedProductId}
                  >
                    추가
                  </button>
                </div>
              </div>
            )}

            <div>
              <div className="bg-blue-50 p-3 rounded-lg mb-4">
                <div className="flex justify-between">
                  <span className="font-medium">총 매출액:</span>
                  <span className="font-bold">
                    {new Intl.NumberFormat('ko-KR').format(totalSales)}원
                  </span>
                </div>
                <div className="flex justify-between text-sm text-gray-600">
                  <span>등록된 제품:</span>
                  <span>{productSalesData.length}개</span>
                </div>
              </div>

              {isLoading ? (
                <div className="text-center py-4 text-gray-500">데이터 로딩 중...</div>
              ) : productSalesData.length === 0 ? (
                <div className="text-center py-4 text-gray-500">
                  제품 매출 데이터가 없습니다. 제품을 추가해주세요.
                </div>
              ) : (
                <div className="overflow-x-auto">
                  <table className="min-w-full divide-y divide-gray-200">
                    <thead className="bg-gray-50">
                      <tr>
                        <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          제품명
                        </th>
                        <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          단가
                        </th>
                        <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          수량
                        </th>
                        <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          매출액
                        </th>
                        <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          비율
                        </th>
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                      {productSalesData.map((data) => (
                        <tr key={data.product_id} className={data.isDirty ? 'bg-blue-50' : ''}>
                          <td className="px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-900">
                            {data.productName}
                          </td>
                          <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                            {new Intl.NumberFormat('ko-KR').format(data.productPrice || 0)}원
                          </td>
                          <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                            <input
                              type="number"
                              min="0"
                              value={data.quantity}
                              onChange={(e) => updateProductQuantity(data.product_id, Number(e.target.value))}
                              className="w-20 border border-gray-300 rounded-md shadow-sm py-1 px-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                            />
                          </td>
                          <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                            {new Intl.NumberFormat('ko-KR').format(data.sales_amount)}원
                          </td>
                          <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                            {data.sales_ratio.toFixed(2)}%
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
</file>
  <file path="app/admin-dashboard/shop-sales/page.tsx">
"use client";

import { useState, useEffect } from 'react';
import { createClient } from '@supabase/supabase-js';
import { Calendar, Store, Save, ChevronDown, ChevronRight } from 'lucide-react';

// 타입 정의
type KOL = {
  id: number;
  name: string;
  shop_name: string;
};

type Shop = {
  id: number;
  shop_name: string;
  owner_name: string;
  kol_id: number;
  region: string;
};

type ShopSalesMetric = {
  id?: number;
  shop_id: number;
  year_month: string;
  total_sales: number;
  product_sales: number;
  device_sales: number;
  commission: number;
  isDirty?: boolean;  // 변경 여부 추적
};

// 전문점 매출 관리 페이지
export default function ShopSalesPage() {
  const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL || '',
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || ''
  );
  const [kols, setKols] = useState<KOL[]>([]);
  const [selectedKolId, setSelectedKolId] = useState<number | null>(null);
  const [shops, setShops] = useState<Shop[]>([]);
  const [yearMonth, setYearMonth] = useState<string>('');
  const [shopSalesData, setShopSalesData] = useState<ShopSalesMetric[]>([]);
  const [expandedKolId, setExpandedKolId] = useState<number | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [savingStatus, setSavingStatus] = useState('');

  // 현재 년월 설정 (기본값)
  useEffect(() => {
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0');
    setYearMonth(`${year}-${month}`);
  }, []);

  // KOL 목록 조회
  const fetchKols = async () => {
    const { data } = await supabase
      .from('kols')
      .select('id, name, shop_name')
      .order('id');
    
    if (data) {
      setKols(data);
    }
  };

  // 전문점 목록 조회
  const fetchShops = async (kolId: number) => {
    const { data } = await supabase
      .from('shops')
      .select('id, shop_name, owner_name, kol_id, region')
      .eq('kol_id', kolId)
      .order('shop_name');
    
    if (data) {
      setShops(data);
      return data;
    }
    return [];
  };

  // 전문점 매출 데이터 조회
  const fetchShopSalesData = async (kolId: number, yearMonth: string) => {
    setIsLoading(true);
    
    // 해당 KOL의 모든 전문점 조회
    const shopsData = await fetchShops(kolId);
    
    if (!shopsData || shopsData.length === 0) {
      setShopSalesData([]);
      setIsLoading(false);
      return;
    }

    const shopIds = shopsData.map(shop => shop.id);
    
    // 매출 데이터 조회
    const { data: salesData } = await supabase
      .from('shop_sales_metrics')
      .select('*')
      .in('shop_id', shopIds)
      .eq('year_month', yearMonth);
    
    // 모든 전문점에 대한 매출 데이터 준비
    const allShopSalesData = shopsData.map(shop => {
      // 기존 데이터 찾기
      const existingData = salesData?.find(d => d.shop_id === shop.id);
      
      if (existingData) {
        return {
          ...existingData,
          isDirty: false
        };
      } else {
        // 없으면 기본 데이터 생성
        return {
          shop_id: shop.id,
          year_month: yearMonth,
          total_sales: 0,
          product_sales: 0,
          device_sales: 0,
          commission: 0,
          isDirty: false
        };
      }
    });
    
    setShopSalesData(allShopSalesData);
    setIsLoading(false);
  };

  // 초기 데이터 로드
  useEffect(() => {
    fetchKols();
  }, []);

  // KOL 확장 토글
  const toggleKol = (kolId: number) => {
    if (expandedKolId === kolId) {
      setExpandedKolId(null);
    } else {
      setExpandedKolId(kolId);
      setSelectedKolId(kolId);
      fetchShopSalesData(kolId, yearMonth);
    }
  };

  // 연월 변경 시 데이터 다시 조회
  useEffect(() => {
    if (selectedKolId && yearMonth) {
      fetchShopSalesData(selectedKolId, yearMonth);
    }
  }, [yearMonth]);

  // 매출 데이터 업데이트
  const updateShopSalesField = (shopId: number, field: string, value: number) => {
    setShopSalesData(prevData => 
      prevData.map(item => {
        if (item.shop_id === shopId) {
          // 총 매출 자동 계산 (제품 + 기기)
          if (field === 'product_sales' || field === 'device_sales') {
            const otherField = field === 'product_sales' ? 'device_sales' : 'product_sales';
            const otherValue = item[otherField as keyof ShopSalesMetric] as number;
            return {
              ...item,
              [field]: value,
              total_sales: value + otherValue,
              isDirty: true
            };
          }
          
          return {
            ...item,
            [field]: value,
            isDirty: true
          };
        }
        return item;
      })
    );
  };

  // 모든 변경사항 저장
  const saveAllChanges = async () => {
    setSavingStatus('저장 중...');

    try {
      // 변경된 데이터만 필터링
      const dirtyData = shopSalesData.filter(data => data.isDirty);
      
      if (dirtyData.length === 0) {
        setSavingStatus('변경사항이 없습니다');
        setTimeout(() => setSavingStatus(''), 2000);
        return;
      }

      // 새로운 데이터와 업데이트할 데이터 분리
      const newData = dirtyData.filter(data => !data.id);
      const updateData = dirtyData.filter(data => data.id);

      // 새 데이터 추가
      if (newData.length > 0) {
        const dataToInsert = newData.map(({ isDirty, ...data }) => data);
        const { error: insertError } = await supabase
          .from('shop_sales_metrics')
          .insert(dataToInsert);

        if (insertError) throw new Error(`새 데이터 추가 오류: ${insertError.message}`);
      }

      // 기존 데이터 업데이트
      for (const item of updateData) {
        const { isDirty, id, ...dataToUpdate } = item;
        const { error: updateError } = await supabase
          .from('shop_sales_metrics')
          .update(dataToUpdate)
          .eq('id', id);

        if (updateError) throw new Error(`데이터 업데이트 오류: ${updateError.message}`);
      }

      // 성공 후 데이터 다시 로드
      if (selectedKolId) {
        await fetchShopSalesData(selectedKolId, yearMonth);
      }

      setSavingStatus('저장 완료!');
      setTimeout(() => setSavingStatus(''), 2000);
    } catch (error) {
      setSavingStatus(`오류: ${error instanceof Error ? error.message : '알 수 없는 오류'}`);
      setTimeout(() => setSavingStatus(''), 5000);
    }
  };

  // 매장 이름 찾기
  const getShopName = (shopId: number) => {
    const shop = shops.find(s => s.id === shopId);
    return shop ? shop.shop_name : `매장 #${shopId}`;
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold text-gray-900">전문점 매출 관리</h1>
        <div className="flex items-center space-x-2">
          <div className="flex items-center bg-white rounded-lg shadow-sm px-4 py-2">
            <Calendar size={20} className="text-gray-400 mr-2" />
            <input
              type="month"
              value={yearMonth}
              onChange={(e) => setYearMonth(e.target.value)}
              className="border-none focus:outline-none text-sm"
            />
          </div>
          <button
            onClick={saveAllChanges}
            className="bg-blue-600 text-white px-4 py-2 rounded-lg flex items-center"
            disabled={!shopSalesData.some(data => data.isDirty)}
          >
            <Save size={16} className="mr-2" />
            변경사항 저장
          </button>
        </div>
      </div>

      {savingStatus && (
        <div className={`p-2 rounded-md text-center text-sm ${
          savingStatus.includes('오류') 
            ? 'bg-red-100 text-red-700' 
            : savingStatus.includes('완료') 
              ? 'bg-green-100 text-green-700' 
              : 'bg-blue-100 text-blue-700'
        }`}>
          {savingStatus}
        </div>
      )}

      <div className="grid grid-cols-1 gap-4">
        {/* KOL 목록과 전문점 트리 */}
        <div className="bg-white p-4 rounded-lg shadow-sm">
          <h3 className="text-lg font-medium text-gray-900 mb-4">KOL 및 전문점 목록</h3>
          
          <div className="space-y-2">
            {kols.map((kol) => (
              <div key={kol.id} className="border border-gray-200 rounded-md overflow-hidden">
                <button
                  onClick={() => toggleKol(kol.id)}
                  className="w-full flex items-center justify-between p-3 hover:bg-gray-50 focus:outline-none"
                >
                  <div className="flex items-center">
                    {expandedKolId === kol.id ? (
                      <ChevronDown size={18} className="text-gray-400 mr-2" />
                    ) : (
                      <ChevronRight size={18} className="text-gray-400 mr-2" />
                    )}
                    <div>
                      <div className="font-medium">{kol.name}</div>
                      <div className="text-sm text-gray-500">{kol.shop_name}</div>
                    </div>
                  </div>
                </button>
                
                {expandedKolId === kol.id && (
                  <div className="border-t border-gray-200 pl-10 pr-3 py-2">
                    {isLoading ? (
                      <div className="text-center text-sm text-gray-500 py-2">로딩 중...</div>
                    ) : shops.length === 0 ? (
                      <div className="text-center text-sm text-gray-500 py-2">전문점 없음</div>
                    ) : (
                      <ul className="space-y-1">
                        {shops.map((shop) => (
                          <li key={shop.id} className="flex items-center py-1">
                            <Store size={14} className="text-gray-400 mr-2" />
                            <span className="text-sm">{shop.shop_name}</span>
                            <span className="text-xs text-gray-500 ml-2">({shop.owner_name})</span>
                          </li>
                        ))}
                      </ul>
                    )}
                  </div>
                )}
              </div>
            ))}
          </div>
        </div>

        {/* 매출 데이터 테이블 */}
        {selectedKolId && expandedKolId && (
          <div className="bg-white shadow rounded-lg overflow-hidden">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    전문점
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    년월
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    제품 매출 (원)
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    기기 매출 (원)
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    총 매출 (원)
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    수수료 (원)
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {isLoading ? (
                  <tr>
                    <td colSpan={6} className="px-6 py-4 whitespace-nowrap text-center text-sm text-gray-500">
                      로딩 중...
                    </td>
                  </tr>
                ) : shopSalesData.length === 0 ? (
                  <tr>
                    <td colSpan={6} className="px-6 py-4 whitespace-nowrap text-center text-sm text-gray-500">
                      데이터가 없습니다.
                    </td>
                  </tr>
                ) : (
                  shopSalesData.map((data) => (
                    <tr key={data.shop_id} className={data.isDirty ? 'bg-blue-50' : ''}>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                        {getShopName(data.shop_id)}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {data.year_month}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        <input
                          type="number"
                          value={data.product_sales}
                          onChange={(e) => updateShopSalesField(data.shop_id, 'product_sales', Number(e.target.value))}
                          className="w-full border border-gray-300 rounded-md shadow-sm py-1 px-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                        />
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        <input
                          type="number"
                          value={data.device_sales}
                          onChange={(e) => updateShopSalesField(data.shop_id, 'device_sales', Number(e.target.value))}
                          className="w-full border border-gray-300 rounded-md shadow-sm py-1 px-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                        />
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {new Intl.NumberFormat('ko-KR').format(data.total_sales)}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        <input
                          type="number"
                          value={data.commission}
                          onChange={(e) => updateShopSalesField(data.shop_id, 'commission', Number(e.target.value))}
                          className="w-full border border-gray-300 rounded-md shadow-sm py-1 px-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                        />
                      </td>
                    </tr>
                  ))
                )}
              </tbody>
            </table>
          </div>
        )}
      </div>
    </div>
  );
}
</file>
  <file path="app/admin-dashboard/user-management/page.tsx">
'use client';

import { useEffect, useState } from 'react';
import { 
  Plus, Pencil, Trash2, UserCheck, MailCheck, 
  AlertCircle, RefreshCw, Search 
} from 'lucide-react';
import { useToast } from '@/components/ui/use-toast';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { AddUserModal, EditRoleModal, DeleteUserModal } from '@/app/components/admin/UserModals';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';

// 사용자 타입 정의
type User = {
  id: string;
  email: string;
  firstName?: string;
  lastName?: string;
  role?: string;
  createdAt: string;
};

// 필터 상태 타입 정의
type FilterState = {
  search: string;
  role: string;
};

export default function UserManagementPage() {
  const { toast } = useToast();
  const [users, setUsers] = useState<User[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [filters, setFilters] = useState<FilterState>({
    search: '',
    role: '',
  });
  
  // 모달 상태 관리
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [selectedUser, setSelectedUser] = useState<User | null>(null);
  
  // 새 사용자 폼 상태
  const [newUser, setNewUser] = useState({
    email: '',
    name: '',
    shopName: '',
    role: 'kol', // 기본값은 KOL
  });

  // 편집 사용자 폼 상태
  const [editRole, setEditRole] = useState('');
  
  // 사용자 데이터 불러오기
  const fetchUsers = async () => {
    try {
      setLoading(true);
      // 직접 Clerk API 호출 대신 Admin API 사용
      const response = await fetch('/api/admin/users', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error('사용자 목록을 불러오는데 실패했습니다.');
      }

      const data = await response.json();
      setUsers(data.users);
      setError(null);
    } catch (err) {
      console.error('사용자 목록 로딩 실패:', err);
      setError('사용자 목록을 불러오는데 실패했습니다.');
      toast({
        title: '오류 발생',
        description: '사용자 목록을 불러오는데 실패했습니다.',
        variant: 'destructive',
      });
    } finally {
      setLoading(false);
    }
  };

  // 초기 데이터 로드
  useEffect(() => {
    fetchUsers();
  }, []);

  // 필터링된 사용자 목록
  const filteredUsers = users.filter((user) => {
    const searchMatch = 
      user.email.toLowerCase().includes(filters.search.toLowerCase()) || 
      (user.firstName && user.firstName.toLowerCase().includes(filters.search.toLowerCase())) ||
      (user.lastName && user.lastName.toLowerCase().includes(filters.search.toLowerCase()));
      
    const roleMatch = !filters.role || user.role === filters.role;
    
    return searchMatch && roleMatch;
  });

  // 사용자 추가 핸들러
  const handleAddUser = async () => {
    try {
      // 폼 유효성 검사
      if (!newUser.email || !newUser.role) {
        toast({
          title: '입력 오류',
          description: '이메일과 역할은 필수 입력 항목입니다.',
          variant: 'destructive',
        });
        return;
      }
      
      // 서버 API 호출
      console.log('사용자 추가 요청:', newUser);

      const response = await fetch('/api/admin/users', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(newUser),
      });

      const responseData = await response.json();

      if (!response.ok) {
        console.error('사용자 추가 API 응답 오류:', responseData);
        const errorMessage = responseData.details
          ? `${responseData.error}: ${responseData.details}`
          : responseData.error || '사용자를 추가하는 중 오류가 발생했습니다.';
        throw new Error(errorMessage);
      }

      console.log('사용자 추가 성공 응답:', responseData);
      
      // 성공 알림
      toast({
        title: '사용자 초대 성공',
        description: '이메일로 사용자가 등록되었습니다. 사용자는 첫 로그인 시 계정을 설정할 수 있습니다.',
      });
      
      // 모달 닫고 폼 초기화
      setIsAddModalOpen(false);
      setNewUser({
        email: '',
        name: '',
        shopName: '',
        role: 'kol',
      });
      
      // 사용자 목록 새로고침
      fetchUsers();
    } catch (error: any) {
      console.error('사용자 추가 실패:', error);
      toast({
        title: '사용자 추가 실패',
        description: error.message || '사용자를 추가하는 중 오류가 발생했습니다.',
        variant: 'destructive',
      });
    }
  };

  // 사용자 역할 변경 핸들러
  const handleUpdateRole = async () => {
    if (!selectedUser || !editRole) return;

    try {
      // 서버 API 호출
      console.log('사용자 역할 변경 요청:', { userId: selectedUser.id, role: editRole });

      const response = await fetch('/api/admin/users', {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId: selectedUser.id,
          role: editRole,
        }),
      });

      const responseData = await response.json();

      if (!response.ok) {
        console.error('사용자 역할 변경 API 응답 오류:', responseData);
        const errorMessage = responseData.details
          ? `${responseData.error}: ${responseData.details}`
          : responseData.error || '사용자 역할을 변경하는 중 오류가 발생했습니다.';
        throw new Error(errorMessage);
      }

      console.log('사용자 역할 변경 성공 응답:', responseData);

      toast({
        title: '역할 변경 성공',
        description: '사용자 역할이 변경되었습니다.',
      });

      setIsEditModalOpen(false);
      fetchUsers();
    } catch (error: any) {
      console.error('역할 변경 실패:', error);
      toast({
        title: '역할 변경 실패',
        description: error.message || '사용자 역할을 변경하는 중 오류가 발생했습니다.',
        variant: 'destructive',
      });
    }
  };

  // 사용자 삭제 핸들러
  const handleDeleteUser = async () => {
    if (!selectedUser) return;

    try {
      // 서버 API 호출
      console.log('사용자 삭제 요청:', selectedUser.id);

      const response = await fetch(`/api/admin/users?id=${selectedUser.id}`, {
        method: 'DELETE',
      });

      const responseData = await response.json();

      if (!response.ok) {
        console.error('사용자 삭제 API 응답 오류:', responseData);
        let errorMessage = '사용자를 삭제하는 중 오류가 발생했습니다.';
        
        if (responseData.error) {
          errorMessage = responseData.error;
          
          // 상세 메시지가 있으면 포함
          if (responseData.details) {
            errorMessage += `\n${responseData.details}`;
          }
        }
        
        throw new Error(errorMessage);
      }

      console.log('사용자 삭제 성공 응답:', responseData);

      toast({
        title: '사용자 삭제 성공',
        description: '사용자가 삭제되었습니다.',
      });

      setIsDeleteModalOpen(false);
      fetchUsers();
    } catch (error: any) {
      console.error('사용자 삭제 중 오류가 발생했습니다:', error);
      toast({
        title: '사용자 삭제 실패',
        description: error.message || '사용자를 삭제하는 중 오류가 발생했습니다.',
        variant: 'destructive',
      });
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex flex-col md:flex-row justify-between md:items-center gap-4">
        <div>
          <h1 className="text-2xl font-bold tracking-tight">사용자 관리</h1>
          <p className="text-muted-foreground">시스템 사용자 및 권한을 관리합니다.</p>
        </div>
        
        <div className="flex flex-col sm:flex-row gap-3">
          <Button onClick={() => setIsAddModalOpen(true)}>
            <Plus className="mr-2 h-4 w-4" />
            사용자 추가
          </Button>
          <Button variant="outline" onClick={fetchUsers}>
            <RefreshCw className="mr-2 h-4 w-4" />
            새로고침
          </Button>
        </div>
      </div>
      
      {/* 필터링 영역 */}
      <div className="flex flex-col sm:flex-row gap-4">
        <div className="relative flex-1">
          <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="이메일 또는 이름으로 검색"
            className="pl-9"
            value={filters.search}
            onChange={(e) => setFilters({ ...filters, search: e.target.value })}
          />
        </div>
        <Select
          value={filters.role}
          onValueChange={(role) => setFilters({ ...filters, role })}
        >
          <SelectTrigger className="w-full sm:w-[200px]">
            <SelectValue placeholder="역할별 필터링" />
          </SelectTrigger>
          <SelectContent className="bg-white border-2 border-gray-300 shadow-lg">
            <SelectItem value="">전체 역할</SelectItem>
            <SelectItem value="admin">본사관리자</SelectItem>
            <SelectItem value="kol">KOL</SelectItem>
          </SelectContent>
        </Select>
      </div>
      
      {/* 사용자 테이블 */}
      {loading ? (
        <div className="flex justify-center items-center h-60">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
          <span className="ml-3">사용자 정보를 불러오는 중...</span>
        </div>
      ) : error ? (
        <div className="flex flex-col items-center justify-center h-60 text-center">
          <AlertCircle className="h-10 w-10 text-red-500 mb-4" />
          <p className="text-lg font-medium text-gray-700">{error}</p>
          <Button variant="outline" className="mt-4" onClick={fetchUsers}>
            다시 시도
          </Button>
        </div>
      ) : (
        <div className="border rounded-md">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>이메일</TableHead>
                <TableHead>이름</TableHead>
                <TableHead>역할</TableHead>
                <TableHead>생성일</TableHead>
                <TableHead className="text-right">관리</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredUsers.length === 0 ? (
                <TableRow>
                  <TableCell colSpan={5} className="text-center h-32">
                    <div className="flex flex-col items-center justify-center">
                      <p className="mb-2 text-muted-foreground">사용자가 없습니다.</p>
                      {filters.search || filters.role ? (
                        <Button 
                          variant="outline" 
                          size="sm"
                          onClick={() => setFilters({ search: '', role: '' })}
                        >
                          필터 초기화
                        </Button>
                      ) : null}
                    </div>
                  </TableCell>
                </TableRow>
              ) : (
                filteredUsers.map((user) => (
                  <TableRow key={user.id}>
                    <TableCell className="font-medium">{user.email}</TableCell>
                    <TableCell>{`${user.firstName || ''} ${user.lastName || ''}`}</TableCell>
                    <TableCell>
                      <div className="flex items-center">
                        {user.role === 'admin' ? (
                          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                            본사관리자
                          </span>
                        ) : user.role === 'kol' ? (
                          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                            KOL
                          </span>
                        ) : (
                          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                            {user.role || '미지정'}
                          </span>
                        )}
                      </div>
                    </TableCell>
                    <TableCell>{user.createdAt}</TableCell>
                    <TableCell className="text-right">
                      <div className="flex justify-end gap-2">
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={() => {
                            setSelectedUser(user);
                            setEditRole(user.role || '');
                            setIsEditModalOpen(true);
                          }}
                        >
                          <Pencil className="h-4 w-4" />
                          <span className="sr-only">역할 수정</span>
                        </Button>
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={() => {
                            setSelectedUser(user);
                            setIsDeleteModalOpen(true);
                          }}
                        >
                          <Trash2 className="h-4 w-4" />
                          <span className="sr-only">사용자 삭제</span>
                        </Button>
                      </div>
                    </TableCell>
                  </TableRow>
                ))
              )}
            </TableBody>
          </Table>
        </div>
      )}
      
      {/* 사용자 추가 모달 */}
      <AddUserModal
        isOpen={isAddModalOpen}
        onClose={() => setIsAddModalOpen(false)}
        userForm={newUser}
        setUserForm={setNewUser}
        onSubmit={handleAddUser}
      />

      {/* 역할 수정 모달 */}
      <EditRoleModal
        isOpen={isEditModalOpen}
        onClose={() => setIsEditModalOpen(false)}
        selectedUser={selectedUser}
        editRole={editRole}
        setEditRole={setEditRole}
        onSubmit={handleUpdateRole}
      />

      {/* 사용자 삭제 확인 모달 */}
      <DeleteUserModal
        isOpen={isDeleteModalOpen}
        onClose={() => setIsDeleteModalOpen(false)}
        selectedUser={selectedUser}
        onSubmit={handleDeleteUser}
      />
    </div>
  );
}
</file>
  <file path="app/admin-dashboard/page.tsx">
import { redirect } from 'next/navigation';

export default function AdminDashboardPage() {
  // 기본적으로 메인 페이지로 리다이렉트
  redirect('/admin-dashboard/main');
  
  // 실제로는 실행되지 않는 부분
  return null;
}
</file>
  <file path="app/api/admin-dashboard/kol-metrics/route.ts">
import { NextRequest, NextResponse } from 'next/server';
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs';
import { cookies } from 'next/headers';
import { Database } from '@/types/supabase';

// 관리자 권한 검증 함수
async function verifyAdmin() {
  const supabase = createRouteHandlerClient<Database>({ cookies });
  const { data: { session } } = await supabase.auth.getSession();
  
  if (!session) {
    return false;
  }
  
  const { data: user } = await supabase
    .from('users')
    .select('role')
    .eq('clerk_id', session.user.id)
    .single();
  
  return user && user.role === 'admin';
}

// GET - KOL 지표 조회
export async function GET(request: NextRequest) {
  // 관리자 권한 확인
  const isAdmin = await verifyAdmin();
  if (!isAdmin) {
    return NextResponse.json({ error: '접근 권한이 없습니다.' }, { status: 403 });
  }
  
  const supabase = createRouteHandlerClient<Database>({ cookies });
  const url = new URL(request.url);
  
  // 쿼리 파라미터
  const kolId = url.searchParams.get('kol_id');
  const yearMonth = url.searchParams.get('year_month');
  
  // 기본 쿼리
  let query = supabase.from('kol_dashboard_metrics').select('*');
  
  // 필터 적용
  if (kolId) {
    query = query.eq('kol_id', kolId);
  }
  
  if (yearMonth) {
    query = query.eq('year_month', yearMonth);
  }
  
  // 정렬
  query = query.order('year_month', { ascending: false });
  
  const { data, error } = await query;
  
  if (error) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
  
  return NextResponse.json({ data });
}

// POST - 새로운 KOL 지표 추가
export async function POST(request: NextRequest) {
  // 관리자 권한 확인
  const isAdmin = await verifyAdmin();
  if (!isAdmin) {
    return NextResponse.json({ error: '접근 권한이 없습니다.' }, { status: 403 });
  }
  
  const supabase = createRouteHandlerClient<Database>({ cookies });
  const body = await request.json();
  
  // 필수 필드 검증
  if (!body.kol_id || !body.year_month) {
    return NextResponse.json(
      { error: 'KOL ID와 년월은 필수 입력사항입니다.' },
      { status: 400 }
    );
  }
  
  // 중복 체크
  const { data: existingData } = await supabase
    .from('kol_dashboard_metrics')
    .select('id')
    .eq('kol_id', body.kol_id)
    .eq('year_month', body.year_month)
    .maybeSingle();
  
  if (existingData) {
    return NextResponse.json(
      { error: '해당 KOL과 년월의 데이터가 이미 존재합니다.' },
      { status: 409 }
    );
  }
  
  // 데이터 삽입
  const { data, error } = await supabase
    .from('kol_dashboard_metrics')
    .insert([{
      kol_id: body.kol_id,
      year_month: body.year_month,
      monthly_sales: body.monthly_sales || 0,
      monthly_commission: body.monthly_commission || 0,
      active_shops_count: body.active_shops_count || 0,
      total_shops_count: body.total_shops_count || 0
    }])
    .select();
  
  if (error) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
  
  return NextResponse.json({ data: data[0] }, { status: 201 });
}

// PUT - KOL 지표 업데이트
export async function PUT(request: NextRequest) {
  // 관리자 권한 확인
  const isAdmin = await verifyAdmin();
  if (!isAdmin) {
    return NextResponse.json({ error: '접근 권한이 없습니다.' }, { status: 403 });
  }
  
  const supabase = createRouteHandlerClient<Database>({ cookies });
  const body = await request.json();
  
  // ID 필수 확인
  if (!body.id) {
    return NextResponse.json(
      { error: '업데이트할 지표의 ID가 필요합니다.' },
      { status: 400 }
    );
  }
  
  // 업데이트할 필드 준비
  const updateFields: any = {};
  if (body.monthly_sales !== undefined) updateFields.monthly_sales = body.monthly_sales;
  if (body.monthly_commission !== undefined) updateFields.monthly_commission = body.monthly_commission;
  if (body.active_shops_count !== undefined) updateFields.active_shops_count = body.active_shops_count;
  if (body.total_shops_count !== undefined) updateFields.total_shops_count = body.total_shops_count;
  
  // 업데이트할 데이터가 없으면 오류
  if (Object.keys(updateFields).length === 0) {
    return NextResponse.json(
      { error: '업데이트할 데이터가 없습니다.' },
      { status: 400 }
    );
  }
  
  // 데이터 업데이트
  const { data, error } = await supabase
    .from('kol_dashboard_metrics')
    .update(updateFields)
    .eq('id', body.id)
    .select();
  
  if (error) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
  
  if (!data || data.length === 0) {
    return NextResponse.json(
      { error: '해당 ID의 지표를 찾을 수 없습니다.' },
      { status: 404 }
    );
  }
  
  return NextResponse.json({ data: data[0] });
}

// DELETE - KOL 지표 삭제
export async function DELETE(request: NextRequest) {
  // 관리자 권한 확인
  const isAdmin = await verifyAdmin();
  if (!isAdmin) {
    return NextResponse.json({ error: '접근 권한이 없습니다.' }, { status: 403 });
  }
  
  const supabase = createRouteHandlerClient<Database>({ cookies });
  const url = new URL(request.url);
  const id = url.searchParams.get('id');
  
  if (!id) {
    return NextResponse.json(
      { error: '삭제할 지표의 ID가 필요합니다.' },
      { status: 400 }
    );
  }
  
  // 데이터 삭제
  const { error } = await supabase
    .from('kol_dashboard_metrics')
    .delete()
    .eq('id', id);
  
  if (error) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
  
  return NextResponse.json({ success: true });
}
</file>
  <file path="app/api/admin-dashboard/product-sales/route.ts">
import { NextRequest, NextResponse } from 'next/server';
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs';
import { cookies } from 'next/headers';
import { Database } from '@/types/supabase';

// 관리자 권한 검증 함수
async function verifyAdmin() {
  const supabase = createRouteHandlerClient<Database>({ cookies });
  const { data: { session } } = await supabase.auth.getSession();
  
  if (!session) {
    return false;
  }
  
  const { data: user } = await supabase
    .from('users')
    .select('role')
    .eq('clerk_id', session.user.id)
    .single();
  
  return user && user.role === 'admin';
}

// GET - 제품 매출 데이터 조회
export async function GET(request: NextRequest) {
  // 관리자 권한 확인
  const isAdmin = await verifyAdmin();
  if (!isAdmin) {
    return NextResponse.json({ error: '접근 권한이 없습니다.' }, { status: 403 });
  }
  
  const supabase = createRouteHandlerClient<Database>({ cookies });
  const url = new URL(request.url);
  
  // 쿼리 파라미터
  const kolId = url.searchParams.get('kol_id');
  const productId = url.searchParams.get('product_id');
  const yearMonth = url.searchParams.get('year_month');
  
  // 기본 쿼리
  let query = supabase.from('product_sales_metrics').select('*');
  
  // 필터 적용
  if (kolId) {
    query = query.eq('kol_id', kolId);
  }
  
  if (productId) {
    query = query.eq('product_id', productId);
  }
  
  if (yearMonth) {
    query = query.eq('year_month', yearMonth);
  }
  
  // 정렬
  query = query.order('kol_id').order('year_month', { ascending: false });
  
  const { data, error } = await query;
  
  if (error) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
  
  // 제품 정보 조회
  if (data && data.length > 0) {
    const productIds = [...new Set(data.map(item => item.product_id))];
    
    const { data: products } = await supabase
      .from('products')
      .select('id, name, price')
      .in('id', productIds);
    
    // 제품 정보를 매출 데이터에 결합
    const enrichedData = data.map(item => {
      const product = products?.find(p => p.id === item.product_id);
      return {
        ...item,
        product_name: product?.name || `제품 #${item.product_id}`,
        product_price: product?.price || 0
      };
    });
    
    return NextResponse.json({ data: enrichedData });
  }
  
  return NextResponse.json({ data });
}

// POST - 신규 제품 매출 데이터 추가
export async function POST(request: NextRequest) {
  // 관리자 권한 확인
  const isAdmin = await verifyAdmin();
  if (!isAdmin) {
    return NextResponse.json({ error: '접근 권한이 없습니다.' }, { status: 403 });
  }
  
  const supabase = createRouteHandlerClient<Database>({ cookies });
  const body = await request.json();
  
  // 필수 필드 검증
  if (!body.kol_id || !body.product_id || !body.year_month) {
    return NextResponse.json(
      { error: 'KOL ID, 제품 ID, 년월은 필수 입력사항입니다.' },
      { status: 400 }
    );
  }
  
  // 중복 체크
  const { data: existingData } = await supabase
    .from('product_sales_metrics')
    .select('id')
    .eq('kol_id', body.kol_id)
    .eq('product_id', body.product_id)
    .eq('year_month', body.year_month)
    .maybeSingle();
  
  if (existingData) {
    return NextResponse.json(
      { error: '해당 KOL, 제품, 년월의 데이터가 이미 존재합니다.' },
      { status: 409 }
    );
  }
  
  // 제품 가격 조회
  const { data: productData } = await supabase
    .from('products')
    .select('price')
    .eq('id', body.product_id)
    .single();
  
  if (!productData) {
    return NextResponse.json(
      { error: '해당 제품을 찾을 수 없습니다.' },
      { status: 404 }
    );
  }
  
  // 매출액 계산
  const quantity = body.quantity || 0;
  const salesAmount = quantity * productData.price;
  
  // 해당 KOL의 총 매출액 계산 (비율 계산용)
  const { data: kolProducts } = await supabase
    .from('product_sales_metrics')
    .select('sales_amount')
    .eq('kol_id', body.kol_id)
    .eq('year_month', body.year_month);
  
  const totalSales = (kolProducts?.reduce((sum, item) => sum + item.sales_amount, 0) || 0) + salesAmount;
  
  // 모든 제품의 비율 업데이트를 위한 데이터 준비
  const salesRatio = totalSales > 0 ? (salesAmount / totalSales) * 100 : 0;
  
  // 데이터 삽입
  const { data, error } = await supabase
    .from('product_sales_metrics')
    .insert([{
      kol_id: body.kol_id,
      product_id: body.product_id,
      year_month: body.year_month,
      quantity,
      sales_amount: salesAmount,
      sales_ratio: salesRatio
    }])
    .select();
  
  if (error) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
  
  // 다른 제품들의 비율도 업데이트
  if (kolProducts && kolProducts.length > 0) {
    // 각 제품의 비율 업데이트
    const updatePromises = kolProducts.map(async product => {
      const { error } = await supabase
        .from('product_sales_metrics')
        .update({
          sales_ratio: (product.sales_amount / totalSales) * 100
        })
        .eq('kol_id', body.kol_id)
        .eq('year_month', body.year_month)
        .neq('product_id', body.product_id);
      
      return error;
    });
    
    await Promise.all(updatePromises);
  }
  
  return NextResponse.json({ data: data[0] }, { status: 201 });
}

// PUT - 제품 매출 데이터 업데이트
export async function PUT(request: NextRequest) {
  // 관리자 권한 확인
  const isAdmin = await verifyAdmin();
  if (!isAdmin) {
    return NextResponse.json({ error: '접근 권한이 없습니다.' }, { status: 403 });
  }
  
  const supabase = createRouteHandlerClient<Database>({ cookies });
  const body = await request.json();
  
  // ID 필수 확인
  if (!body.id) {
    return NextResponse.json(
      { error: '업데이트할 데이터의 ID가 필요합니다.' },
      { status: 400 }
    );
  }
  
  // 현재 데이터 조회
  const { data: currentData } = await supabase
    .from('product_sales_metrics')
    .select('*')
    .eq('id', body.id)
    .single();
  
  if (!currentData) {
    return NextResponse.json(
      { error: '해당 ID의 데이터를 찾을 수 없습니다.' },
      { status: 404 }
    );
  }
  
  // 제품 가격 조회
  const { data: productData } = await supabase
    .from('products')
    .select('price')
    .eq('id', currentData.product_id)
    .single();
  
  if (!productData) {
    return NextResponse.json(
      { error: '해당 제품을 찾을 수 없습니다.' },
      { status: 404 }
    );
  }
  
  // 업데이트할 필드 준비
  const updateFields: any = {};
  
  // 수량이 변경된 경우 매출액도 업데이트
  if (body.quantity !== undefined && body.quantity !== currentData.quantity) {
    updateFields.quantity = body.quantity;
    updateFields.sales_amount = body.quantity * productData.price;
  }
  
  // 업데이트할 데이터가 없으면 오류
  if (Object.keys(updateFields).length === 0) {
    return NextResponse.json(
      { error: '업데이트할 데이터가 없습니다.' },
      { status: 400 }
    );
  }
  
  // 데이터 업데이트
  const { data, error } = await supabase
    .from('product_sales_metrics')
    .update(updateFields)
    .eq('id', body.id)
    .select();
  
  if (error) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
  
  // 매출액이 변경된 경우 모든 관련 제품의 비율 재계산
  if (updateFields.sales_amount !== undefined) {
    // 해당 KOL의 모든 제품 매출 조회
    const { data: kolProducts } = await supabase
      .from('product_sales_metrics')
      .select('*')
      .eq('kol_id', currentData.kol_id)
      .eq('year_month', currentData.year_month);
    
    if (kolProducts && kolProducts.length > 0) {
      // 총 매출액 계산
      const totalSales = kolProducts.reduce((sum, item) => sum + item.sales_amount, 0);
      
      // 각 제품의 비율 업데이트
      if (totalSales > 0) {
        const updatePromises = kolProducts.map(async product => {
          const { error } = await supabase
            .from('product_sales_metrics')
            .update({
              sales_ratio: (product.sales_amount / totalSales) * 100
            })
            .eq('id', product.id);
          
          return error;
        });
        
        await Promise.all(updatePromises);
      }
    }
  }
  
  return NextResponse.json({ data: data && data[0] });
}

// DELETE - 제품 매출 데이터 삭제
export async function DELETE(request: NextRequest) {
  // 관리자 권한 확인
  const isAdmin = await verifyAdmin();
  if (!isAdmin) {
    return NextResponse.json({ error: '접근 권한이 없습니다.' }, { status: 403 });
  }
  
  const supabase = createRouteHandlerClient<Database>({ cookies });
  const url = new URL(request.url);
  const id = url.searchParams.get('id');
  
  if (!id) {
    return NextResponse.json(
      { error: '삭제할 데이터의 ID가 필요합니다.' },
      { status: 400 }
    );
  }
  
  // 삭제할 데이터 정보 조회 (KOL ID와 년월 필요)
  const { data: targetData } = await supabase
    .from('product_sales_metrics')
    .select('kol_id, year_month')
    .eq('id', id)
    .single();
  
  if (!targetData) {
    return NextResponse.json(
      { error: '해당 ID의 데이터를 찾을 수 없습니다.' },
      { status: 404 }
    );
  }
  
  // 데이터 삭제
  const { error } = await supabase
    .from('product_sales_metrics')
    .delete()
    .eq('id', id);
  
  if (error) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
  
  // 남은 제품들의 비율 재계산
  const { data: remainingProducts } = await supabase
    .from('product_sales_metrics')
    .select('*')
    .eq('kol_id', targetData.kol_id)
    .eq('year_month', targetData.year_month);
  
  if (remainingProducts && remainingProducts.length > 0) {
    // 총 매출액 계산
    const totalSales = remainingProducts.reduce((sum, item) => sum + item.sales_amount, 0);
    
    // 각 제품의 비율 업데이트
    if (totalSales > 0) {
      const updatePromises = remainingProducts.map(async product => {
        const { error } = await supabase
          .from('product_sales_metrics')
          .update({
            sales_ratio: (product.sales_amount / totalSales) * 100
          })
          .eq('id', product.id);
        
        return error;
      });
      
      await Promise.all(updatePromises);
    }
  }
  
  return NextResponse.json({ success: true });
}
</file>
  <file path="app/api/admin-dashboard/shop-sales/route.ts">
import { NextRequest, NextResponse } from 'next/server';
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs';
import { cookies } from 'next/headers';
import { Database } from '@/types/supabase';

// 관리자 권한 검증 함수
async function verifyAdmin() {
  const supabase = createRouteHandlerClient<Database>({ cookies });
  const { data: { session } } = await supabase.auth.getSession();
  
  if (!session) {
    return false;
  }
  
  const { data: user } = await supabase
    .from('users')
    .select('role')
    .eq('clerk_id', session.user.id)
    .single();
  
  return user && user.role === 'admin';
}

// GET - 전문점 매출 데이터 조회
export async function GET(request: NextRequest) {
  // 관리자 권한 확인
  const isAdmin = await verifyAdmin();
  if (!isAdmin) {
    return NextResponse.json({ error: '접근 권한이 없습니다.' }, { status: 403 });
  }
  
  const supabase = createRouteHandlerClient<Database>({ cookies });
  const url = new URL(request.url);
  
  // 쿼리 파라미터
  const shopId = url.searchParams.get('shop_id');
  const kolId = url.searchParams.get('kol_id');
  const yearMonth = url.searchParams.get('year_month');
  
  // 기본 쿼리
  let query = supabase.from('shop_sales_metrics').select('*');
  
  // 필터 적용
  if (shopId) {
    query = query.eq('shop_id', shopId);
  }
  
  // KOL ID로 전문점 필터링
  if (kolId && !shopId) {
    // 먼저 해당 KOL의 전문점 목록 조회
    const { data: shopData } = await supabase
      .from('shops')
      .select('id')
      .eq('kol_id', kolId);
    
    if (shopData && shopData.length > 0) {
      const shopIds = shopData.map(shop => shop.id);
      query = query.in('shop_id', shopIds);
    } else {
      return NextResponse.json({ data: [] });
    }
  }
  
  if (yearMonth) {
    query = query.eq('year_month', yearMonth);
  }
  
  // 정렬
  query = query.order('shop_id').order('year_month', { ascending: false });
  
  const { data, error } = await query;
  
  if (error) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
  
  return NextResponse.json({ data });
}

// POST - 신규 전문점 매출 데이터 추가
export async function POST(request: NextRequest) {
  // 관리자 권한 확인
  const isAdmin = await verifyAdmin();
  if (!isAdmin) {
    return NextResponse.json({ error: '접근 권한이 없습니다.' }, { status: 403 });
  }
  
  const supabase = createRouteHandlerClient<Database>({ cookies });
  const body = await request.json();
  
  // 필수 필드 검증
  if (!body.shop_id || !body.year_month) {
    return NextResponse.json(
      { error: '전문점 ID와 년월은 필수 입력사항입니다.' },
      { status: 400 }
    );
  }
  
  // 중복 체크
  const { data: existingData } = await supabase
    .from('shop_sales_metrics')
    .select('id')
    .eq('shop_id', body.shop_id)
    .eq('year_month', body.year_month)
    .maybeSingle();
  
  if (existingData) {
    return NextResponse.json(
      { error: '해당 전문점과 년월의 데이터가 이미 존재합니다.' },
      { status: 409 }
    );
  }
  
  // 총 매출 계산 (제품 + 기기)
  const totalSales = (body.product_sales || 0) + (body.device_sales || 0);
  
  // 데이터 삽입
  const { data, error } = await supabase
    .from('shop_sales_metrics')
    .insert([{
      shop_id: body.shop_id,
      year_month: body.year_month,
      total_sales: totalSales,
      product_sales: body.product_sales || 0,
      device_sales: body.device_sales || 0,
      commission: body.commission || 0
    }])
    .select();
  
  if (error) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
  
  return NextResponse.json({ data: data[0] }, { status: 201 });
}

// PUT - 전문점 매출 데이터 업데이트
export async function PUT(request: NextRequest) {
  // 관리자 권한 확인
  const isAdmin = await verifyAdmin();
  if (!isAdmin) {
    return NextResponse.json({ error: '접근 권한이 없습니다.' }, { status: 403 });
  }
  
  const supabase = createRouteHandlerClient<Database>({ cookies });
  const body = await request.json();
  
  // ID 필수 확인
  if (!body.id) {
    return NextResponse.json(
      { error: '업데이트할 데이터의 ID가 필요합니다.' },
      { status: 400 }
    );
  }
  
  // 업데이트할 필드 준비
  const updateFields: any = {};
  if (body.product_sales !== undefined) updateFields.product_sales = body.product_sales;
  if (body.device_sales !== undefined) updateFields.device_sales = body.device_sales;
  if (body.commission !== undefined) updateFields.commission = body.commission;
  
  // 총 매출 계산
  if (body.product_sales !== undefined || body.device_sales !== undefined) {
    // 기존 데이터 조회
    const { data: existingData } = await supabase
      .from('shop_sales_metrics')
      .select('product_sales, device_sales')
      .eq('id', body.id)
      .single();
    
    if (!existingData) {
      return NextResponse.json(
        { error: '해당 ID의 데이터를 찾을 수 없습니다.' },
        { status: 404 }
      );
    }
    
    const productSales = body.product_sales !== undefined ? body.product_sales : existingData.product_sales;
    const deviceSales = body.device_sales !== undefined ? body.device_sales : existingData.device_sales;
    
    updateFields.total_sales = productSales + deviceSales;
  }
  
  // 업데이트할 데이터가 없으면 오류
  if (Object.keys(updateFields).length === 0) {
    return NextResponse.json(
      { error: '업데이트할 데이터가 없습니다.' },
      { status: 400 }
    );
  }
  
  // 데이터 업데이트
  const { data, error } = await supabase
    .from('shop_sales_metrics')
    .update(updateFields)
    .eq('id', body.id)
    .select();
  
  if (error) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
  
  if (!data || data.length === 0) {
    return NextResponse.json(
      { error: '해당 ID의 데이터를 찾을 수 없습니다.' },
      { status: 404 }
    );
  }
  
  return NextResponse.json({ data: data[0] });
}

// DELETE - 전문점 매출 데이터 삭제
export async function DELETE(request: NextRequest) {
  // 관리자 권한 확인
  const isAdmin = await verifyAdmin();
  if (!isAdmin) {
    return NextResponse.json({ error: '접근 권한이 없습니다.' }, { status: 403 });
  }
  
  const supabase = createRouteHandlerClient<Database>({ cookies });
  const url = new URL(request.url);
  const id = url.searchParams.get('id');
  
  if (!id) {
    return NextResponse.json(
      { error: '삭제할 데이터의 ID가 필요합니다.' },
      { status: 400 }
    );
  }
  
  // 데이터 삭제
  const { error } = await supabase
    .from('shop_sales_metrics')
    .delete()
    .eq('id', id);
  
  if (error) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
  
  return NextResponse.json({ success: true });
}
</file>
  <file path="app/api/kol-new/notifications/read-all/route.ts">
import { NextRequest, NextResponse } from 'next/server';
import { auth } from '@clerk/nextjs/server';
import { db } from '@/lib/db';

// PUT: 모든 알림을 읽음으로 표시
export async function PUT(req: NextRequest) {
  try {
    // 현재 인증된 사용자 확인
    const authResult = await auth();
    const userId = authResult.userId;
    
    if (!userId) {
      console.error('인증되지 않은 사용자');
      return NextResponse.json(
        { error: '인증되지 않은 사용자입니다.' },
        { status: 401 }
      );
    }

    console.log('현재 사용자 ID:', userId);

    // 사용자 정보 가져오기
    const user = await db.query(
      `SELECT id FROM users WHERE clerk_id = $1`,
      [userId]
    );
    
    if (user.rows.length === 0) {
      console.error('사용자 정보를 찾을 수 없음:', userId);
      return NextResponse.json(
        { error: '사용자 정보를 찾을 수 없습니다.' },
        { status: 404 }
      );
    }
    
    const userIdFromDb = user.rows[0].id;
    console.log('DB 사용자 ID:', userIdFromDb);
    
    // 사용자의 모든 알림을 읽음으로 표시
    const result = await db.query(
      `UPDATE notifications 
       SET read = true, updated_at = NOW() 
       WHERE user_id = $1 AND read = false
       RETURNING *`,
      [userIdFromDb]
    );

    const rowCount = result?.rowCount || 0;
    console.log('모든 알림 읽음 처리 결과:', rowCount);

    return NextResponse.json({
      success: true,
      message: `${rowCount}개의 알림이 읽음으로 표시되었습니다.`,
      count: rowCount
    });
  } catch (error) {
    console.error('알림 상태 변경 중 오류 발생:', error);
    return NextResponse.json(
      { error: '알림 상태 변경에 실패했습니다.' },
      { status: 500 }
    );
  }
}
</file>
  <file path="app/api/kol-new/notifications/test/route.ts">
import { NextResponse } from 'next/server';

export async function GET() {
  return NextResponse.json({ message: '알림 API 테스트 성공' });
}
</file>
  <file path="app/api/kol-new/notifications/route.ts">
import { NextRequest, NextResponse } from 'next/server';
import { auth } from '@clerk/nextjs/server';
import { db } from '@/lib/db';

// GET: 로그인한 KOL의 알림 목록 조회
export async function GET(req: NextRequest) {
  try {
    console.log('알림 API GET 요청 처리 시작');
    
    // 현재 인증된 사용자 확인
    const authResult = await auth();
    const userId = authResult.userId;
    
    if (!userId) {
      console.error('인증되지 않은 사용자');
      return NextResponse.json(
        { error: '인증되지 않은 사용자입니다.' },
        { status: 401 }
      );
    }

    console.log('현재 사용자 ID:', userId);

    // 사용자 정보 가져오기 (알림 테이블의 user_id와 연결하기 위함)
    const user = await db.query(
      `SELECT id FROM users WHERE clerk_id = $1`,
      [userId]
    );
    
    if (user.rows.length === 0) {
      console.error('사용자 정보를 찾을 수 없음:', userId);
      return NextResponse.json(
        { error: '사용자 정보를 찾을 수 없습니다.' },
        { status: 404 }
      );
    }
    
    const userIdFromDb = user.rows[0].id;
    console.log('DB 사용자 ID:', userIdFromDb);
    
    // 알림 목록 가져오기 (최신순 정렬)
    console.log('알림 쿼리 실행 시작...');
    
    try {
      const notifications = await db.query(
        `SELECT * FROM notifications 
         WHERE user_id = $1 
         ORDER BY created_at DESC`,
        [userIdFromDb]
      );

      const rowCount = notifications?.rowCount || 0;
      console.log('알림 조회 결과 건수:', rowCount);
      
      if (rowCount > 0) {
        // 실제 데이터가 있으면 반환
        return NextResponse.json(notifications.rows);
      } else {
        // 테스트용 더미 데이터 (실제 데이터가 없을 경우)
        console.log('알림 데이터 없음, 더미 데이터 반환');
        const dummyNotifications = [
          {
            id: 1,
            user_id: userIdFromDb,
            title: '테스트 알림 1',
            content: '이것은 테스트 알림입니다.',
            read: false,
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
          },
          {
            id: 2,
            user_id: userIdFromDb,
            title: '테스트 알림 2',
            content: '두 번째 테스트 알림입니다.',
            read: true,
            created_at: new Date(Date.now() - 86400000).toISOString(), // 하루 전
            updated_at: new Date(Date.now() - 86400000).toISOString()
          }
        ];
        return NextResponse.json(dummyNotifications);
      }
    } catch (dbError) {
      console.error('DB 쿼리 오류:', dbError);
      
      // 오류 발생 시 더미 데이터로 대체
      console.log('DB 오류, 더미 데이터 반환');
      const dummyNotifications = [
        {
          id: 1,
          user_id: userIdFromDb,
          title: '[오류 복구] 테스트 알림',
          content: 'DB 오류가 발생했지만 복구했습니다.',
          read: false,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        }
      ];
      return NextResponse.json(dummyNotifications);
    }
    
  } catch (error) {
    console.error('알림 목록 조회 중 오류 발생:', error);
    return NextResponse.json(
      { error: '알림 목록을 불러오는데 실패했습니다.' },
      { status: 500 }
    );
  }
}
</file>
  <file path="app/api/kol-new/tasks/route.ts">
import { NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase';
import { auth } from '@clerk/nextjs/server';

// KOL 태스크 목록 API 라우트
export async function GET() {
  try {
    // 인증 확인
    const { userId } = await auth();
    if (!userId) {
      return NextResponse.json(
        { error: '인증되지 않은 요청입니다.' },
        { status: 401 }
      );
    }

    // KOL ID 조회 - 로그인한 사용자의 KOL ID 가져오기
    const { data: userData, error: userError } = await supabase
      .from('users')
      .select('id')
      .eq('clerk_id', userId)
      .single();

    if (userError || !userData) {
      return NextResponse.json(
        { error: '사용자 정보를 찾을 수 없습니다.' },
        { status: 404 }
      );
    }

    const { data: kolData, error: kolError } = await supabase
      .from('kols')
      .select('id')
      .eq('user_id', userData.id)
      .single();

    if (kolError || !kolData) {
      return NextResponse.json(
        { error: 'KOL 정보를 찾을 수 없습니다.' },
        { status: 404 }
      );
    }

    // 알림 정보를 통해 태스크 목록 조회 (현재는 notifications 테이블 활용)
    const { data: tasks, error: tasksError } = await supabase
      .from('notifications')
      .select('id, title, content, created_at, read')
      .eq('user_id', userData.id)
      .order('created_at', { ascending: false })
      .limit(10);

    if (tasksError) {
      return NextResponse.json(
        { error: '태스크 정보를 조회하는 중 오류가 발생했습니다.' },
        { status: 500 }
      );
    }

    // 태스크 데이터 형식 변환
    const formattedTasks = tasks.map(task => ({
      id: task.id,
      title: task.title,
      description: task.content,
      createdAt: task.created_at,
      completed: task.read,
      dueDate: null, // 현재 notifications에는 due_date가 없어서 null로 설정
      type: getTaskType(task.title) // 태스크 타입 추론
    }));

    return NextResponse.json(formattedTasks);
  } catch (error) {
    console.error('KOL 태스크 목록 조회 에러:', error);
    return NextResponse.json(
      { error: '데이터 조회 중 오류가 발생했습니다.' },
      { status: 500 }
    );
  }
}

// 태스크 타입 추론 함수
function getTaskType(title: string): string {
  const lowerTitle = title.toLowerCase();
  
  if (lowerTitle.includes('주문') || lowerTitle.includes('order')) {
    return 'order';
  } else if (lowerTitle.includes('세미나') || lowerTitle.includes('seminar')) {
    return 'seminar';
  } else if (lowerTitle.includes('교육') || lowerTitle.includes('training')) {
    return 'training';
  } else if (lowerTitle.includes('미팅') || lowerTitle.includes('meeting')) {
    return 'meeting';
  } else {
    return 'etc';
  }
}
</file>
  <file path="app/components/LoginButtons.tsx">
'use client';

import Link from "next/link";
import { useRouter } from "next/navigation";

export default function LoginButtons() {
  const router = useRouter();
  
  const handleLogin = () => {
    router.push('/signin');
  };
  
  const handleSignup = () => {
    router.push('/signup');
  };
  
  return (
    <div className="flex gap-6 items-center flex-col sm:flex-row mb-12">
      <button
        onClick={handleLogin}
        className="rounded-full border border-solid border-transparent transition-colors flex items-center justify-center bg-biofox-purple text-white gap-2 hover:bg-aurora-violet font-medium text-sm sm:text-base h-12 sm:h-14 px-8 sm:px-10 w-full sm:w-auto"
      >
        로그인
      </button>
      <button
        onClick={handleSignup}
        className="rounded-full border border-solid border-biofox-purple-light transition-colors flex items-center justify-center hover:bg-[#f2f2f2] dark:hover:bg-[#1a1a1a] hover:border-transparent font-medium text-sm sm:text-base h-12 sm:h-14 px-8 sm:px-10 w-full sm:w-auto"
      >
        회원가입
      </button>
    </div>
  );
}
</file>
  <file path="app/kol-new/activities/page.tsx">
'use client';

import { useState, useEffect } from 'react';
import { redirect } from 'next/navigation';
import { useUser, useClerk } from '@clerk/nextjs';
import Link from 'next/link';
import { format } from 'date-fns';
import { ko } from 'date-fns/locale';
import { 
  Search, 
  Calendar,
  Store,
  Plus,
  Filter,
  FileText,
  ClipboardList,
  ChevronLeft,
  ChevronRight,
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Sheet, SheetContent, SheetTrigger } from "@/components/ui/sheet";
import KolHeader from "../../components/layout/KolHeader";
import KolSidebar from "../../components/layout/KolSidebar";
import KolFooter from "../../components/layout/KolFooter";
import KolMobileMenu from "../../components/layout/KolMobileMenu";

// 영업 일지 데이터 타입 정의
interface ActivityData {
  id: number;
  shop_id?: number;
  shop_name?: string;
  activity_date: string;
  content: string;
  created_at: string;
}

// 전문점 타입 정의
interface Shop {
  id: number;
  name: string;
}

export default function ActivitiesPage() {
  const { isLoaded, isSignedIn, user } = useUser();
  const { signOut } = useClerk();
  const [isKol, setIsKol] = useState<boolean | null>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [activities, setActivities] = useState<ActivityData[]>([]);
  const [shops, setShops] = useState<Shop[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);
  const [activityForm, setActivityForm] = useState({
    shop_id: '',
    activity_date: format(new Date(), 'yyyy-MM-dd'),
    content: ''
  });
  const [filterOptions, setFilterOptions] = useState({
    shopId: 'all',
    dateRange: 'all',
    searchTerm: ''
  });
  const [page, setPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const activitiesPerPage = 10;

  // 사용자 역할 확인
  useEffect(() => {
    if (isLoaded && isSignedIn && user) {
      const userRole = user.publicMetadata?.role as string || "kol";
      setIsKol(userRole === "kol");
    }
  }, [isLoaded, isSignedIn, user]);

  // 영업 일지 데이터 로드
  useEffect(() => {
    if (isLoaded && isSignedIn && isKol) {
      const fetchData = async () => {
        try {
          setLoading(true);
          
          // 영업 일지 데이터 로드
          const activitiesResponse = await fetch('/api/kol-new/activities');
          if (!activitiesResponse.ok) {
            const errorData = await activitiesResponse.json();
            throw new Error(errorData.error || '영업 일지 데이터를 불러오는데 실패했습니다.');
          }
          const activitiesData = await activitiesResponse.json();
          setActivities(activitiesData);

          // 전문점 데이터 로드 (영업 일지 생성 시 선택을 위해)
          const shopsResponse = await fetch('/api/kol-new/shops');
          if (!shopsResponse.ok) {
            const errorData = await shopsResponse.json();
            throw new Error(errorData.error || '전문점 데이터를 불러오는데 실패했습니다.');
          }
          
          const shopsData = await shopsResponse.json();
          const formattedShops = shopsData.map((shop: any) => ({
            id: shop.id,
            name: shop.shop_name || shop.ownerName
          }));
          
          setShops(formattedShops);
          setTotalPages(Math.ceil(activitiesData.length / activitiesPerPage) || 1);
          setLoading(false);
        } catch (err: unknown) {
          console.error('데이터 로드 에러:', err);
          setError(err instanceof Error ? err.message : '데이터를 불러오는데 실패했습니다.');
          setLoading(false);
        }
      };
      fetchData();
    }
  }, [isLoaded, isSignedIn, isKol]);

  // 로그아웃 함수
  const handleSignOut = async () => {
    try {
      await signOut();
    } catch (error) {
      console.error('로그아웃 중 오류가 발생했습니다:', error);
    }
  };

  // 영업 일지 추가 폼 제출 핸들러
  const handleAddActivity = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      const response = await fetch('/api/kol-new/activities', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          shop_id: activityForm.shop_id === '' ? null : parseInt(activityForm.shop_id),
          activity_date: activityForm.activity_date,
          content: activityForm.content
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || '영업 일지 등록에 실패했습니다.');
      }

      // 영업 일지 데이터 새로 로드
      const refreshResponse = await fetch('/api/kol-new/activities');
      if (!refreshResponse.ok) {
        throw new Error('영업 일지 데이터 새로고침에 실패했습니다.');
      }
      
      const refreshedActivities = await refreshResponse.json();
      setActivities(refreshedActivities);
      
      // 폼 초기화 및 다이얼로그 닫기
      setActivityForm({
        shop_id: '',
        activity_date: format(new Date(), 'yyyy-MM-dd'),
        content: ''
      });
      setIsAddDialogOpen(false);
      
      // 성공 메시지 표시 (선택적)
      alert('영업 일지가 성공적으로 등록되었습니다.');
    } catch (err) {
      console.error('영업 일지 등록 에러:', err);
      alert(err instanceof Error ? err.message : '영업 일지 등록에 실패했습니다.');
    }
  };

  // 필터링된 영업 일지 목록 구하기
  const getFilteredActivities = (): ActivityData[] => {
    return activities.filter(activity => {
      // 전문점 필터
      if (filterOptions.shopId !== 'all' && activity.shop_id !== parseInt(filterOptions.shopId)) {
        return false;
      }

      // 날짜 범위 필터
      if (filterOptions.dateRange !== 'all') {
        const activityDate = new Date(activity.activity_date);
        const today = new Date();
        
        if (filterOptions.dateRange === 'week') {
          // 1주일 이내
          const weekAgo = new Date();
          weekAgo.setDate(today.getDate() - 7);
          if (activityDate < weekAgo) return false;
        } else if (filterOptions.dateRange === 'month') {
          // 1개월 이내
          const monthAgo = new Date();
          monthAgo.setMonth(today.getMonth() - 1);
          if (activityDate < monthAgo) return false;
        }
      }

      // 검색어 필터
      if (filterOptions.searchTerm) {
        const searchLower = filterOptions.searchTerm.toLowerCase();
        const contentLower = activity.content.toLowerCase();
        const shopNameLower = activity.shop_name?.toLowerCase() || '';
        
        return contentLower.includes(searchLower) || shopNameLower.includes(searchLower);
      }

      return true;
    });
  };

  // 페이지네이션 처리된 영업 일지 목록
  const getPaginatedActivities = (): ActivityData[] => {
    const filtered = getFilteredActivities();
    const startIndex = (page - 1) * activitiesPerPage;
    const endIndex = startIndex + activitiesPerPage;
    
    return filtered.slice(startIndex, endIndex);
  };

  // 필터 변경 시 페이지를 1로 초기화
  const handleFilterChange = (key: string, value: string) => {
    setFilterOptions({
      ...filterOptions,
      [key]: value
    });
    setPage(1);
  };

  // 필터링된 활동 목록이 변경될 때 totalPages 업데이트를 위한 useEffect
  useEffect(() => {
    const filtered = getFilteredActivities();
    setTotalPages(Math.ceil(filtered.length / activitiesPerPage) || 1); // 0으로 나누는 것 방지
  }, [activities, filterOptions, activitiesPerPage]);

  // 페이지 변경 핸들러
  const handlePageChange = (newPage: number) => {
    if (newPage >= 1 && newPage <= totalPages) {
      setPage(newPage);
    }
  };

  // KOL이 아닌 경우 홈으로 리다이렉트
  if (isLoaded && isSignedIn && isKol === false) {
    return redirect('/');
  }

  // 로딩 중이거나 사용자 정보 확인 중인 경우
  if (!isLoaded || isKol === null || loading) {
    return (
      <div className="flex min-h-screen flex-col items-center justify-center bg-muted/20 p-4">
        <Card className="w-full max-w-md">
          <CardHeader>
            <CardTitle className="text-center">로딩 중...</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-center text-muted-foreground">영업 일지 데이터를 불러오는 중입니다.</p>
          </CardContent>
        </Card>
      </div>
    );
  }

  // 에러가 발생한 경우
  if (error) {
    return (
      <div className="flex min-h-screen flex-col items-center justify-center bg-muted/20 p-4">
        <Card className="w-full max-w-md">
          <CardHeader>
            <CardTitle className="text-center text-destructive">에러 발생</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-center text-muted-foreground">{error}</p>
          </CardContent>
          <CardFooter className="flex justify-center">
            <Button onClick={() => window.location.reload()}>
              다시 시도
            </Button>
          </CardFooter>
        </Card>
      </div>
    );
  }

  const paginatedActivities = getPaginatedActivities();

  return (
    <div className="flex h-screen flex-col">
      {/* Header */}
      <KolHeader 
        userName={user?.publicMetadata?.kolName as string}
        shopName={user?.publicMetadata?.shopName as string}
        userImage={user?.imageUrl}
        mobileMenuOpen={mobileMenuOpen}
        setMobileMenuOpen={setMobileMenuOpen}
        onSignOut={handleSignOut}
      />

      <div className="flex flex-1 overflow-hidden">
        {/* Sidebar - Desktop Only */}
        <KolSidebar />

        {/* Main Content */}
        <main className="flex-1 overflow-auto bg-muted/10 p-4 md:p-6">
          <div className="mx-auto max-w-7xl">
            {/* 페이지 헤더 */}
            <div className="mb-6 flex flex-col sm:flex-row sm:items-center sm:justify-between">
              <div>
                <h1 className="text-lg sm:text-xl md:text-2xl font-bold">영업 일지</h1>
                <p className="text-muted-foreground text-sm">전문점 방문 및 영업 활동을 기록하세요</p>
              </div>
              
              <div className="mt-4 sm:mt-0">
                <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>
                  <DialogTrigger asChild>
                    <Button>
                      <Plus className="mr-1 h-4 w-4" /> 
                      영업 일지 추가
                    </Button>
                  </DialogTrigger>
                  <DialogContent className="sm:max-w-[425px] bg-white">
                    <DialogHeader>
                      <DialogTitle>새 영업 일지 작성</DialogTitle>
                      <DialogDescription>
                        전문점 방문 또는 영업 활동 내용을 작성하세요.
                      </DialogDescription>
                    </DialogHeader>
                    <form onSubmit={handleAddActivity}>
                      <div className="grid gap-4 py-4">
                        <div className="grid grid-cols-4 items-center gap-4">
                          <label htmlFor="shop" className="text-right text-sm">전문점</label>
                          <Select
                            value={activityForm.shop_id}
                            onValueChange={(value) => setActivityForm({...activityForm, shop_id: value})}
                          >
                            <SelectTrigger className="col-span-3">
                              <SelectValue placeholder="전문점 선택 (선택사항)" />
                            </SelectTrigger>
                            <SelectContent className="bg-white">
                              <SelectItem value="">일반 활동</SelectItem>
                              {shops.map((shop) => (
                                <SelectItem key={shop.id} value={shop.id.toString()}>
                                  {shop.name}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                        </div>
                        <div className="grid grid-cols-4 items-center gap-4">
                          <label htmlFor="date" className="text-right text-sm">날짜</label>
                          <Input
                            id="date"
                            type="date"
                            value={activityForm.activity_date}
                            onChange={(e) => setActivityForm({...activityForm, activity_date: e.target.value})}
                            className="col-span-3"
                            required
                          />
                        </div>
                        <div className="grid grid-cols-4 items-start gap-4">
                          <label htmlFor="content" className="text-right text-sm">내용</label>
                          <Textarea
                            id="content"
                            value={activityForm.content}
                            onChange={(e) => setActivityForm({...activityForm, content: e.target.value})}
                            className="col-span-3"
                            rows={5}
                            placeholder="영업 활동 내용을 작성하세요"
                            required
                          />
                        </div>
                      </div>
                      <DialogFooter>
                        <Button type="submit">저장</Button>
                      </DialogFooter>
                    </form>
                  </DialogContent>
                </Dialog>
              </div>
            </div>

            {/* 필터 영역 */}
            <Card className="mb-6">
              <CardContent className="p-4">
                <div className="grid gap-4 md:grid-cols-3">
                  <div>
                    <label htmlFor="shopFilter" className="text-sm font-medium block mb-1">전문점 필터</label>
                    <Select
                      value={filterOptions.shopId}
                      onValueChange={(value) => handleFilterChange('shopId', value)}
                    >
                      <SelectTrigger id="shopFilter" className="w-full">
                        <SelectValue placeholder="전문점 선택" />
                      </SelectTrigger>
                      <SelectContent className="bg-white">
                        <SelectItem value="all">모든 전문점</SelectItem>
                        <SelectItem value="no-shop">일반 활동</SelectItem>
                        {shops.map((shop) => (
                          <SelectItem key={shop.id} value={shop.id.toString()}>
                            {shop.name}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <div>
                    <label htmlFor="dateFilter" className="text-sm font-medium block mb-1">기간 필터</label>
                    <Select
                      value={filterOptions.dateRange}
                      onValueChange={(value) => handleFilterChange('dateRange', value)}
                    >
                      <SelectTrigger id="dateFilter" className="w-full">
                        <SelectValue placeholder="기간 선택" />
                      </SelectTrigger>
                      <SelectContent className="bg-white">
                        <SelectItem value="all">전체 기간</SelectItem>
                        <SelectItem value="week">최근 1주일</SelectItem>
                        <SelectItem value="month">최근 1개월</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <div>
                    <label htmlFor="searchFilter" className="text-sm font-medium block mb-1">검색</label>
                    <div className="relative">
                      <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
                      <Input
                        id="searchFilter"
                        placeholder="내용 또는 전문점 검색..."
                        className="pl-8"
                        value={filterOptions.searchTerm}
                        onChange={(e) => handleFilterChange('searchTerm', e.target.value)}
                      />
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* 영업 일지 테이블 */}
            <Card>
              <CardContent className="p-0">
                {activities.length === 0 ? (
                  <div className="flex flex-col items-center justify-center py-10 text-center">
                    <ClipboardList className="h-12 w-12 text-muted-foreground mb-4" />
                    <h3 className="text-lg font-medium">영업 일지가 없습니다</h3>
                    <p className="text-sm text-muted-foreground mt-1 mb-4">
                      아직 등록된 영업 일지가 없습니다. 새로운 영업 일지를 추가해보세요.
                    </p>
                    <Button onClick={() => setIsAddDialogOpen(true)}>
                      <Plus className="mr-1 h-4 w-4" /> 영업 일지 추가
                    </Button>
                  </div>
                ) : paginatedActivities.length === 0 ? (
                  <div className="flex flex-col items-center justify-center py-10 text-center">
                    <Search className="h-12 w-12 text-muted-foreground mb-4" />
                    <h3 className="text-lg font-medium">검색 결과가 없습니다</h3>
                    <p className="text-sm text-muted-foreground mt-1 mb-4">
                      현재 필터 조건에 맞는 영업 일지가 없습니다. 다른 필터 조건을 시도해보세요.
                    </p>
                    <Button variant="outline" onClick={() => {
                      setFilterOptions({
                        shopId: 'all',
                        dateRange: 'all',
                        searchTerm: ''
                      });
                    }}>
                      필터 초기화
                    </Button>
                  </div>
                ) : (
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead className="w-[100px]">날짜</TableHead>
                        <TableHead className="w-[150px]">전문점</TableHead>
                        <TableHead>활동 내용</TableHead>
                        <TableHead className="w-[100px] text-right">작성일</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {paginatedActivities.map((activity) => (
                        <TableRow key={activity.id}>
                          <TableCell className="font-medium">
                            {new Date(activity.activity_date).toLocaleDateString('ko-KR')}
                          </TableCell>
                          <TableCell>
                            {activity.shop_name ? (
                              <div className="flex items-center gap-2">
                                <Store className="h-4 w-4 text-blue-500" />
                                <span>{activity.shop_name}</span>
                              </div>
                            ) : (
                              <div className="flex items-center gap-2">
                                <ClipboardList className="h-4 w-4 text-purple-500" />
                                <span className="text-muted-foreground">일반 활동</span>
                              </div>
                            )}
                          </TableCell>
                          <TableCell>
                            <p className="line-clamp-2">{activity.content}</p>
                          </TableCell>
                          <TableCell className="text-right text-muted-foreground text-sm">
                            {new Date(activity.created_at).toLocaleDateString('ko-KR')}
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                )}
              </CardContent>

              {/* 페이지네이션 - 검색 결과가 있을 때만 표시 */}
              {totalPages > 1 && paginatedActivities.length > 0 && (
                <div className="flex items-center justify-center space-x-2 py-4">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handlePageChange(page - 1)}
                    disabled={page === 1}
                  >
                    <ChevronLeft className="h-4 w-4" />
                  </Button>
                  
                  <div className="text-sm">
                    페이지 {page} / {totalPages}
                  </div>
                  
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handlePageChange(page + 1)}
                    disabled={page === totalPages}
                  >
                    <ChevronRight className="h-4 w-4" />
                  </Button>
                </div>
              )}
            </Card>

            {/* Footer */}
            <div className="mt-10">
              <KolFooter />
            </div>
          </div>
        </main>
      </div>

      {/* Mobile Menu */}
      <Sheet open={mobileMenuOpen} onOpenChange={setMobileMenuOpen}>
        <SheetTrigger className="block sm:hidden">
          <div className="flex items-center justify-center p-2">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
              <path strokeLinecap="round" strokeLinejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5M3.75 17.25h16.5" />
            </svg>
          </div>
        </SheetTrigger>
        <SheetContent side="left" className="w-[250px] sm:w-[300px] bg-white">
          <DialogTitle className="sr-only">모바일 메뉴</DialogTitle>
          <KolMobileMenu 
            userName={user?.publicMetadata?.kolName as string}
            shopName={user?.publicMetadata?.shopName as string}
            userImage={user?.imageUrl}
            setMobileMenuOpen={setMobileMenuOpen}
            onSignOut={handleSignOut}
          />
        </SheetContent>
      </Sheet>
    </div>
  );
}
</file>
  <file path="app/kol-new/notifications/page.tsx">
'use client';

import { useEffect, useState } from 'react';
import { useUser, useClerk } from '@clerk/nextjs';
import { redirect } from 'next/navigation';
import { 
  Bell,
  CheckCircle,
  Clock,
  AlertCircle,
  Eye,
  EyeOff,
  RefreshCw,
  Search,
  Filter,
  Check
} from "lucide-react";
import { format, formatDistanceToNow } from 'date-fns';
import { ko } from 'date-fns/locale';
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Separator } from "@/components/ui/separator";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { toast } from "@/components/ui/use-toast";
import KolHeader from "../../components/layout/KolHeader";
import KolSidebar from "../../components/layout/KolSidebar";
import KolFooter from "../../components/layout/KolFooter";
import { Sheet, SheetContent, SheetTrigger } from "@/components/ui/sheet";
import { DialogClose } from "@radix-ui/react-dialog";
import KolMobileMenu from "../../components/layout/KolMobileMenu";

// 알림 데이터 타입 정의
interface Notification {
  id: number;
  title: string;
  content: string;
  read: boolean;
  created_at: string;
  updated_at: string;
  timeAgo?: string;
}

export default function NotificationsPage() {
  const { isLoaded, isSignedIn, user } = useUser();
  const { signOut } = useClerk();
  const [isKol, setIsKol] = useState<boolean | null>(null);
  const [loading, setLoading] = useState<boolean>(false);
  const [notifications, setNotifications] = useState<Notification[]>([]);
  const [filter, setFilter] = useState<'all' | 'unread' | 'read'>('all');
  const [searchTerm, setSearchTerm] = useState<string>('');
  const [error, setError] = useState<string | null>(null);
  const [selectedNotification, setSelectedNotification] = useState<Notification | null>(null);
  const [isDetailOpen, setIsDetailOpen] = useState<boolean>(false);
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  const [kolInfo, setKolInfo] = useState<{name: string, shopName: string} | null>(null);
  const [refreshing, setRefreshing] = useState<boolean>(false);

  // 사용자 역할 확인
  useEffect(() => {
    if (isLoaded && isSignedIn && user) {
      const userRole = user.publicMetadata?.role as string || "kol";
      setIsKol(userRole === "kol");
    }
  }, [isLoaded, isSignedIn, user]);

  // KOL 정보 가져오기
  useEffect(() => {
    if (isLoaded && isSignedIn && isKol) {
      const fetchKolInfo = async () => {
        try {
          setLoading(true);
          
          // 사용자의 KOL 정보 가져오기
          const response = await fetch('/api/kols/me', { 
            credentials: 'include',
            headers: { 'Cache-Control': 'no-cache' } 
          });
          
          if (!response.ok) {
            throw new Error('KOL 정보를 불러오는데 실패했습니다.');
          }
          
          const kolData = await response.json();
          
          setKolInfo({
            name: kolData.name || user?.firstName || user?.username || '사용자',
            shopName: kolData.shops?.[0]?.name || kolData.shop_name || '내 상점'
          });
        } catch (error) {
          console.error('KOL 정보 조회 중 오류:', error);
          
          // 에러 발생 시 기본 정보 설정
          setKolInfo({
            name: user?.firstName || user?.username || '사용자',
            shopName: '내 상점'
          });
        } finally {
          setLoading(false);
        }
      };
      
      fetchKolInfo();
    }
  }, [isLoaded, isSignedIn, isKol, user]);

  // API 호출 없는 임시 함수로 대체
  const markAsRead = (id: number) => {
    setNotifications(prev => 
      prev.map(notification => 
        notification.id === id ? { ...notification, read: true } : notification
      )
    );
    
    toast({
      title: "알림 읽음",
      description: "알림이 읽음으로 표시되었습니다.",
    });
  };

  // API 호출 없는 임시 함수로 대체
  const markAllAsRead = () => {
    setNotifications(prev => 
      prev.map(notification => ({ ...notification, read: true }))
    );
    
    toast({
      title: "모든 알림 읽음",
      description: "모든 알림이 읽음으로 표시되었습니다.",
    });
  };

  // API 호출 없는 임시 함수로 대체
  const refreshData = () => {
    setRefreshing(true);
    
    // 1초 후 리프레시 완료
    setTimeout(() => {
      setRefreshing(false);
      
      toast({
        title: "새로고침 완료",
        description: "알림 데이터가 업데이트되었습니다.",
      });
    }, 1000);
  };

  // 알림 상세보기
  const viewNotificationDetail = (notification: Notification) => {
    setSelectedNotification(notification);
    setIsDetailOpen(true);
    
    // 읽지 않은 알림인 경우 읽음으로 표시
    if (!notification.read) {
      markAsRead(notification.id);
    }
  };

  // 필터링된 알림 목록
  const filteredNotifications = notifications
    .filter(notification => {
      if (filter === 'read') return notification.read;
      if (filter === 'unread') return !notification.read;
      return true;
    })
    .filter(notification => 
      notification.title.toLowerCase().includes(searchTerm.toLowerCase()) || 
      notification.content.toLowerCase().includes(searchTerm.toLowerCase())
    );

  // 로그아웃 함수
  const handleSignOut = async () => {
    try {
      await signOut();
    } catch (error) {
      console.error('로그아웃 중 오류가 발생했습니다:', error);
    }
  };

  // 로딩 중이거나 사용자 정보 확인 중인 경우
  if (!isLoaded || isKol === null) {
    return (
      <div className="flex min-h-screen flex-col items-center justify-center bg-muted/20 p-4">
        <Card className="w-full max-w-md">
          <CardHeader>
            <CardTitle className="text-center">로딩 중...</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-center text-muted-foreground">사용자 정보를 확인하는 중입니다.</p>
          </CardContent>
        </Card>
      </div>
    );
  }

  // KOL이 아닌 경우 홈으로 리다이렉트
  if (!isKol) {
    return redirect('/');
  }

  return (
    <div className="flex h-screen flex-col">
      {/* Header */}
      <KolHeader 
        userName={kolInfo?.name || '사용자'}
        shopName={kolInfo?.shopName || '내 상점'}
        userImage={user?.imageUrl}
        mobileMenuOpen={mobileMenuOpen}
        setMobileMenuOpen={setMobileMenuOpen}
        onSignOut={handleSignOut}
      />

      <div className="flex flex-1 overflow-hidden">
        {/* Sidebar - Desktop Only */}
        <KolSidebar />

        {/* Main Content */}
        <main className="flex-1 overflow-auto bg-muted/10 p-4 md:p-6">
          <div className="mx-auto max-w-7xl">
            <div className="mb-6">
              <h1 className="text-lg sm:text-xl md:text-2xl font-bold">알림</h1>
              <p className="text-sm text-muted-foreground">중요한 알림과 업데이트를 확인하세요.</p>
            </div>

            {/* 검색 및 필터 영역 */}
            <div className="mb-6 flex flex-col space-y-4">
              <div className="relative w-full">
                <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
                <Input
                  type="search"
                  placeholder="알림 검색..."
                  className="pl-8"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                />
              </div>
              
              <div className="flex flex-col space-y-3 sm:flex-row sm:items-center sm:justify-between sm:space-y-0 sm:space-x-2">
                <Tabs value={filter} onValueChange={(value) => setFilter(value as 'all' | 'unread' | 'read')} className="flex-1">
                  <TabsList className="w-full sm:w-auto grid grid-cols-3">
                    <TabsTrigger value="all">전체</TabsTrigger>
                    <TabsTrigger value="unread">안 읽은 알림</TabsTrigger>
                    <TabsTrigger value="read">읽은 알림</TabsTrigger>
                  </TabsList>
                </Tabs>
                
                <div className="flex items-center justify-between sm:justify-end space-x-2">
                  <Button 
                    variant="outline" 
                    size="icon"
                    onClick={refreshData}
                    disabled={refreshing || loading}
                  >
                    <RefreshCw className={`h-4 w-4 ${refreshing ? 'animate-spin' : ''}`} />
                  </Button>
                  
                  <Button 
                    variant="outline"
                    onClick={markAllAsRead}
                    disabled={!notifications.some(n => !n.read)}
                    className="whitespace-nowrap flex-1 sm:flex-initial"
                  >
                    <CheckCircle className="mr-1 h-4 w-4" />
                    모두 읽음
                  </Button>
                </div>
              </div>
            </div>

            {/* 알림 목록 */}
            <Card>
              <CardHeader>
                <CardTitle>알림 목록</CardTitle>
                <CardDescription>
                  {filter === 'all' ? '모든 알림' : filter === 'unread' ? '읽지 않은 알림' : '읽은 알림'}
                  {` (${filteredNotifications.length}개)`}
                </CardDescription>
              </CardHeader>
              <CardContent>
                {loading ? (
                  <div className="flex flex-col items-center justify-center py-12">
                    <RefreshCw className="h-8 w-8 animate-spin text-muted-foreground" />
                    <p className="mt-4 text-sm text-muted-foreground">알림을 불러오는 중입니다...</p>
                  </div>
                ) : error ? (
                  <div className="flex flex-col items-center justify-center py-12">
                    <AlertCircle className="h-8 w-8 text-destructive" />
                    <p className="mt-4 text-sm text-destructive">{error}</p>
                    <Button 
                      className="mt-4"
                      variant="outline"
                      onClick={refreshData}
                    >
                      <RefreshCw className="mr-2 h-4 w-4" />
                      다시 시도
                    </Button>
                  </div>
                ) : (
                  <div className="flex flex-col items-center justify-center py-12">
                    <div className="rounded-full bg-blue-50 p-4 dark:bg-blue-900/20">
                      <Bell className="h-10 w-10 text-blue-500 dark:text-blue-400" />
                    </div>
                    <p className="mt-6 text-center text-base font-medium">
                      현재 알림이 없습니다.
                    </p>
                    <p className="mt-2 max-w-md text-center text-sm text-muted-foreground">
                      새로운 알림이 도착하면 여기에 표시됩니다. 중요한 업데이트나 공지사항을 놓치지 마세요.
                    </p>
                  </div>
                )}
              </CardContent>
              <CardFooter className="flex justify-between">
                <div className="text-sm text-muted-foreground">
                  새로운 알림이 오면 이곳에서 확인할 수 있습니다.
                </div>
              </CardFooter>
            </Card>

            {/* 알림 상세 보기 다이얼로그 */}
            <Dialog open={isDetailOpen} onOpenChange={setIsDetailOpen}>
              <DialogContent className="sm:max-w-md bg-white backdrop-blur-sm">
                <DialogHeader>
                  <DialogTitle>{selectedNotification?.title}</DialogTitle>
                </DialogHeader>
                <div className="space-y-4 py-4">
                  <p className="text-sm">{selectedNotification?.content}</p>
                  <Separator />
                  <div className="flex justify-between text-xs text-muted-foreground">
                    <span>
                      <Clock className="mr-1 inline-block h-3 w-3" />
                      {selectedNotification && format(new Date(selectedNotification.created_at), 'yyyy년 MM월 dd일 HH:mm', { locale: ko })}
                    </span>
                    <span>
                      {selectedNotification?.read ? (
                        <>
                          <Eye className="mr-1 inline-block h-3 w-3" />
                          읽음
                        </>
                      ) : (
                        <>
                          <EyeOff className="mr-1 inline-block h-3 w-3" />
                          읽지 않음
                        </>
                      )}
                    </span>
                  </div>
                </div>
                <DialogClose asChild>
                  <Button>확인</Button>
                </DialogClose>
              </DialogContent>
            </Dialog>

            {/* Footer */}
            <KolFooter />
          </div>
        </main>
      </div>

      {/* Mobile Menu */}
      <Sheet open={mobileMenuOpen} onOpenChange={setMobileMenuOpen}>
        <SheetTrigger className="block sm:hidden">
          <div className="flex items-center justify-center p-2">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
              <path strokeLinecap="round" strokeLinejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5M3.75 17.25h16.5" />
            </svg>
          </div>
        </SheetTrigger>
        <SheetContent side="left" className="w-[250px] sm:w-[300px] bg-white">
          <DialogTitle className="sr-only">모바일 메뉴</DialogTitle>
          <KolMobileMenu 
            userName={kolInfo?.name || '사용자'} 
            shopName={kolInfo?.shopName || '내 상점'} 
            userImage={user?.imageUrl} 
            setMobileMenuOpen={setMobileMenuOpen} 
            onSignOut={handleSignOut}
          />
        </SheetContent>
      </Sheet>
    </div>
  );
}
</file>
  <file path="app/kol-new/stores/page.tsx">
'use client';

import { useEffect, useState } from 'react';
import { redirect } from 'next/navigation';
import { useUser, useClerk } from '@clerk/nextjs';
import Link from 'next/link';
import { 
  Search, 
  Store,
  FilterIcon,
  ChevronDown,
  Trash2,
  Plus,
  Download,
  TrendingUp,
  Minus,
  CrownIcon
} from "lucide-react";

// 레이아웃 컴포넌트
import KolHeader from "../../components/layout/KolHeader";
import KolSidebar from "../../components/layout/KolSidebar";
import KolFooter from "../../components/layout/KolFooter";
import { Sheet, SheetContent, SheetTrigger } from "@/components/ui/sheet";
import { DialogTitle, Dialog, DialogContent, DialogHeader, DialogDescription, DialogFooter } from "@/components/ui/dialog";
import KolMobileMenu from "../../components/layout/KolMobileMenu";

// UI 컴포넌트
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { 
  Table, 
  TableBody, 
  TableCaption, 
  TableCell, 
  TableHead, 
  TableHeader, 
  TableRow 
} from "@/components/ui/table";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
  DropdownMenuSeparator,
  DropdownMenuCheckboxItem
} from "@/components/ui/dropdown-menu";
import {
  PieChart, 
  Pie, 
  Cell, 
  ResponsiveContainer, 
  Tooltip, 
  Legend,
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid
} from 'recharts';
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

// 타입 정의
interface ShopData {
  id: number;
  ownerName: string;
  shop_name: string;
  region: string;
  status: string;
  createdAt: string;
  is_owner_kol?: boolean;
  sales: {
    total: number;
    product: number;
    device: number;
    hasOrdered: boolean;
    avg_monthly?: number;
    accumulated?: number;
    commission?: number;
  };
}

interface ProductRatioData {
  productId: number;
  productName: string;
  totalSalesAmount: number;
  salesRatio: string;
}

// 숫자를 만 단위로 포맷팅하는 유틸리티 함수
const formatToManUnit = (value: number): string => {
  if (value === 0) return "0원";
  
  // 만 단위 계산
  const man = Math.floor(value / 10000);
  const rest = value % 10000;
  
  if (man > 0) {
    // 만 단위가 있는 경우
    if (rest > 0) {
      // 나머지가 있는 경우 (예: 510만 4740원)
      return `${man.toLocaleString()}만 ${rest}원`;
    }
    // 나머지가 없는 경우 (예: 500만원)
    return `${man.toLocaleString()}만원`;
  } else {
    // 만 단위가 없는 경우 (예: 9800원)
    return `${value.toLocaleString()}원`;
  }
};

export default function StoresPage() {
  const { isLoaded, isSignedIn, user } = useUser();
  const { signOut } = useClerk();
  const [isKol, setIsKol] = useState<boolean | null>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [shopsData, setShopsData] = useState<ShopData[]>([]);
  const [productRatioData, setProductRatioData] = useState<ProductRatioData[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  const [kolInfo, setKolInfo] = useState<{ name: string; shopName: string } | null>(null);

  // 선택된 상점의 상세 정보를 저장할 상태 추가
  const [selectedShop, setSelectedShop] = useState<ShopData | null>(null);
  const [isDetailModalOpen, setIsDetailModalOpen] = useState(false);
  // 상품 판매 비율 상태 추가
  const [selectedShopProductRatio, setSelectedShopProductRatio] = useState<{
    productId: number;
    productName: string;
    totalSalesAmount: number;
    salesRatio: string;
  }[]>([]);
  const [isLoadingShopDetail, setIsLoadingShopDetail] = useState(false);

  // 사용자 역할 확인
  useEffect(() => {
    if (isLoaded && isSignedIn && user) {
      const userRole = user.publicMetadata?.role as string || "kol";
      setIsKol(userRole === "kol");
    }
  }, [isLoaded, isSignedIn, user]);

  // 데이터 로드
  useEffect(() => {
    if (isLoaded && isSignedIn && isKol) {
      const fetchData = async () => {
        try {
          setLoading(true);
          
          // KOL 정보 로드
          const dashboardResponse = await fetch('/api/kol-new/dashboard');
          if (!dashboardResponse.ok) throw new Error('대시보드 데이터를 불러오는데 실패했습니다.');
          const dashboardResult = await dashboardResponse.json();
          setKolInfo({
            name: dashboardResult.kol.name,
            shopName: dashboardResult.kol.shopName
          });

          // 전문점 데이터 로드
          const shopsResponse = await fetch('/api/kol-new/shops');
          if (!shopsResponse.ok) throw new Error('전문점 데이터를 불러오는데 실패했습니다.');
          const shopsResult = await shopsResponse.json();
          
          // 전문점 데이터 가공 (monthly_sales 테이블의 total_sales와 commission 사용)
          const formattedShops = shopsResult.map((shop: any) => ({
            ...shop,
            shop_name: shop.shop_name || shop.ownerName,
            sales: {
              ...shop.sales,
              total: shop.sales.total,
              product: shop.sales.product,
              device: shop.sales.device,
              commission: shop.sales.commission // monthly_sales 테이블에서 직접 가져온 commission 값
            }
          }));
          
          setShopsData(formattedShops);

          // 제품 비율 데이터 로드 (API 형태에 따라 조정 필요)
          const productRatioResponse = await fetch('/api/kol-new/product-ratio');
          if (!productRatioResponse.ok) throw new Error('제품 비율 데이터를 불러오는데 실패했습니다.');
          const productRatioResult = await productRatioResponse.json();
          setProductRatioData(productRatioResult);

          setLoading(false);
        } catch (err: unknown) {
          console.error('데이터 로드 에러:', err);
          setError(err instanceof Error ? err.message : '데이터를 불러오는데 실패했습니다.');
          setLoading(false);
        }
      };
      fetchData();
    }
  }, [isLoaded, isSignedIn, isKol]);

  // 로그아웃 함수
  const handleSignOut = async () => {
    try {
      await signOut();
    } catch (error) {
      console.error('로그아웃 중 오류가 발생했습니다:', error);
    }
  };

  // 필터링된 전문점 데이터
  const filteredShops = shopsData
    .sort((a, b) => b.sales.total - a.sales.total); // 항상 매출 높은 순으로 정렬

  // 파이 차트 데이터 준비
  const pieChartColors = ['#8884d8', '#83a6ed', '#8dd1e1', '#82ca9d', '#a4de6c', '#d0ed57', '#ffc658'];
  const pieChartData = productRatioData.map((item, index) => ({
    name: item.productName,
    value: item.totalSalesAmount,
    ratio: parseFloat(item.salesRatio),
    fill: pieChartColors[index % pieChartColors.length]
  }));

  // 당월 매출 기준 바 차트 데이터 (제한 없이 전체 데이터)
  const currentMonthBarData = filteredShops
    .sort((a, b) => b.sales.total - a.sales.total)
    .map(shop => ({
      name: shop.shop_name,
      매출: shop.sales.total
    }));

  // 로딩 중이거나 사용자 정보 확인 중인 경우
  if (!isLoaded || isKol === null) {
    return (
      <div className="flex min-h-screen flex-col items-center justify-center bg-muted/20 p-4">
        <Card className="w-full max-w-md">
          <CardHeader>
            <CardTitle className="text-center">로딩 중...</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-center text-muted-foreground">사용자 정보를 확인하는 중입니다.</p>
          </CardContent>
        </Card>
      </div>
    );
  }

  // KOL이 아닌 경우 홈으로 리다이렉트
  if (!isKol) {
    return redirect('/');
  }

  // 데이터 로딩 중인 경우
  if (loading) {
    return (
      <div className="flex min-h-screen flex-col items-center justify-center bg-muted/20 p-4">
        <Card className="w-full max-w-md">
          <CardHeader>
            <CardTitle className="text-center">데이터 로딩 중...</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-center text-muted-foreground">전문점 정보를 불러오는 중입니다.</p>
          </CardContent>
        </Card>
      </div>
    );
  }

  // 에러가 발생한 경우
  if (error) {
    return (
      <div className="flex min-h-screen flex-col items-center justify-center bg-muted/20 p-4">
        <Card className="w-full max-w-md">
          <CardHeader>
            <CardTitle className="text-center text-destructive">에러 발생</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-center text-muted-foreground">{error}</p>
          </CardContent>
          <CardFooter className="flex justify-center">
            <Button onClick={() => window.location.reload()}>
              다시 시도
            </Button>
          </CardFooter>
        </Card>
      </div>
    );
  }

  // 커스텀 툴팁 컴포넌트
  const CustomTooltip = ({ active, payload, label }: any) => {
    if (active && payload && payload.length) {
      return (
        <div className="bg-white p-3 border border-gray-200 shadow-md rounded-md">
          <p className="font-semibold">{payload[0]?.name}</p>
          <p>비율: {(payload[0]?.payload.ratio * 100).toFixed(1)}%</p>
          <p>매출: {formatToManUnit(payload[0]?.value)}</p>
        </div>
      );
    }
    return null;
  };

  // 테이블 행 배경색 결정 함수
  const getRowColorClass = (rank: number, sales: number, index: number) => {
    // 매출이 0원 초과인 행
    if (sales > 0) {
      // 짝수는 보라색 계열, 홀수는 하늘색 계열 배경색 적용 + 호버 효과
      return index % 2 === 0 
        ? "bg-purple-100 hover:bg-purple-200 cursor-pointer" 
        : "bg-sky-50 hover:bg-sky-100 cursor-pointer";
    } else {
      // 매출이 0원인 경우 배경색 없음 + 가벼운 회색 호버 효과
      return "hover:bg-gray-50 cursor-pointer";
    }
  };

  // 상점 행 클릭 핸들러
  const handleShopClick = async (shop: ShopData) => {
    setSelectedShop(shop);
    setIsDetailModalOpen(true);
    setIsLoadingShopDetail(true);
    
    try {
      // 선택된 상점의 제품별 판매 비율 가져오기
      const response = await fetch(`/api/kol-new/shop-product-ratio/${shop.id}`);
      if (!response.ok) throw new Error('상점 제품 비율 데이터를 불러오는데 실패했습니다.');
      const shopProductRatioData = await response.json();
      setSelectedShopProductRatio(shopProductRatioData);
    } catch (error) {
      console.error('상점 상세 데이터 로드 에러:', error);
      setSelectedShopProductRatio([]);
    } finally {
      setIsLoadingShopDetail(false);
    }
  };

  // 상점 상세 정보 모달 컴포넌트
  const ShopDetailModal = () => {
    if (!selectedShop) return null;
    
    // 현재 날짜와 시간 포맷팅
    const now = new Date();
    const formattedDate = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}-${String(now.getDate()).padStart(2, '0')}`;
    
    // 모달 차트용 데이터
    const modalPieChartData = selectedShopProductRatio.map((item, index) => ({
      name: item.productName,
      value: item.totalSalesAmount,
      ratio: parseFloat(item.salesRatio),
      fill: pieChartColors[index % pieChartColors.length]
    }));

    return (
      <Dialog open={isDetailModalOpen} onOpenChange={setIsDetailModalOpen}>
        <DialogContent className="sm:max-w-[600px] max-h-[90vh] overflow-y-auto bg-white border border-gray-200">
          <DialogHeader>
            <div className="flex items-center justify-between pb-2 border-b">
              <DialogTitle className="text-xl font-bold">{selectedShop.shop_name} 전문점</DialogTitle>
              <div className="text-sm text-gray-600">기준일: {formattedDate}</div>
            </div>
          </DialogHeader>
          
          {/* 상점 정보 요약 */}
          <div className="py-4">
            <div className="mb-4 grid grid-cols-1 gap-4">
              <div className="border rounded-md p-4 bg-purple-50">
                <div className="text-sm text-gray-600 mb-1">제품별 매출 비율</div>
                <div className="h-[200px]">
                  {isLoadingShopDetail ? (
                    <div className="flex h-full items-center justify-center">
                      <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900"></div>
                    </div>
                  ) : modalPieChartData.length === 0 ? (
                    <div className="flex h-full items-center justify-center text-muted-foreground">
                      제품별 매출 데이터가 없습니다.
                    </div>
                  ) : (
                    <ResponsiveContainer width="100%" height="100%">
                      <PieChart>
                        <Pie
                          data={modalPieChartData}
                          cx="50%"
                          cy="50%"
                          labelLine={false}
                          outerRadius={70}
                          fill="#8884d8"
                          dataKey="value"
                        >
                          {modalPieChartData.map((entry, index) => (
                            <Cell key={`modal-cell-${index}`} fill={entry.fill} />
                          ))}
                        </Pie>
                        <Tooltip content={<CustomTooltip />} />
                        <Legend layout="vertical" verticalAlign="middle" align="right" />
                      </PieChart>
                    </ResponsiveContainer>
                  )}
                </div>
              </div>
              
              <div className="border rounded-md p-4 bg-blue-50">
                <h3 className="font-medium mb-4">당월 매출 및 수당</h3>
                <div className="space-y-4">
                  <div className="border-b pb-2">
                    <div className="flex justify-between items-center mt-1">
                      <div className="text-sm">매출</div>
                      <div className="font-bold">{formatToManUnit(selectedShop.sales.total)}</div>
                    </div>
                    <div className="flex justify-between items-center mt-1">
                      <div className="text-sm">수당</div>
                      <div className="font-bold">{formatToManUnit(selectedShop.sales.commission || 0)}</div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <DialogFooter>
            <Button onClick={() => setIsDetailModalOpen(false)}>닫기</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    );
  };

  return (
    <div className="flex h-screen flex-col">
      {/* Header */}
      <KolHeader 
        userName={kolInfo?.name}
        shopName={kolInfo?.shopName}
        userImage={user?.imageUrl}
        mobileMenuOpen={mobileMenuOpen}
        setMobileMenuOpen={setMobileMenuOpen}
        onSignOut={handleSignOut}
      />

      <div className="flex flex-1 overflow-hidden">
        {/* Sidebar - Desktop Only */}
        <KolSidebar />

        {/* Main Content */}
        <main className="flex-1 overflow-auto bg-muted/10 p-4 md:p-6">
          <div className="mx-auto max-w-7xl">
            <div className="mb-6">
              <h1 className="text-lg sm:text-xl md:text-2xl font-bold">전문점 현황</h1>
            </div>

            {/* 차트 영역 */}
            <div className="mb-6 grid grid-cols-1 gap-4 lg:grid-cols-3">
              {/* 제품 종류별 매출 비율 */}
              <Card className="lg:col-span-1">
                <CardHeader className="pb-2">
                  <CardTitle className="text-sm sm:text-base md:text-lg whitespace-normal">
                    <span className="hidden sm:inline">제품 종류별 매출 비율</span>
                    <span className="sm:hidden">제품 비율</span>
                  </CardTitle>
                  <CardDescription className="whitespace-normal text-xs sm:text-sm">
                    <span className="hidden sm:inline">당월 전체 매출 기준 판매 제품 비율</span>
                    <span className="sm:hidden">당월 판매 비율</span>
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="h-[350px] flex items-center justify-center">
                    {pieChartData.length === 0 ? (
                      <div className="flex h-full items-center justify-center text-muted-foreground">
                        제품별 매출 데이터가 없습니다.
                      </div>
                    ) : (
                      <ResponsiveContainer width="100%" height="100%">
                        <PieChart>
                          <Pie
                            data={pieChartData}
                            cx="50%"
                            cy="50%"
                            labelLine={false}
                            outerRadius={120}
                            fill="#8884d8"
                            dataKey="value"
                          >
                            {pieChartData.map((entry, index) => (
                              <Cell key={`cell-${index}`} fill={entry.fill} />
                            ))}
                          </Pie>
                          <Tooltip content={<CustomTooltip />} />
                          <Legend layout="horizontal" verticalAlign="bottom" align="center" />
                        </PieChart>
                      </ResponsiveContainer>
                    )}
                  </div>
                </CardContent>
              </Card>

              {/* 전문점별 순위 */}
              <Card className="lg:col-span-2">
                <CardHeader className="pb-2">
                  <div className="flex flex-row items-center justify-between flex-wrap gap-2">
                    <div>
                      <CardTitle className="text-sm sm:text-base md:text-lg whitespace-normal">
                        <span className="hidden sm:inline">전문점별 순위</span>
                        <span className="sm:hidden">순위</span>
                      </CardTitle>
                      <CardDescription className="whitespace-normal text-xs sm:text-sm">
                        <span className="hidden sm:inline">당월 매출액 기준 전문점 순위</span>
                        <span className="sm:hidden">당월 매출액 기준</span>
                      </CardDescription>
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="h-[400px] overflow-x-auto custom-scrollbar">
                    {currentMonthBarData.length === 0 ? (
                      <div className="flex h-full items-center justify-center text-muted-foreground">
                        전문점 매출 데이터가 없습니다.
                      </div>
                    ) : (
                      <div className="h-full pl-0">
                        <ResponsiveContainer width={Math.max(800, currentMonthBarData.length * 120)} height="100%">
                          <BarChart
                            data={currentMonthBarData}
                            margin={{ top: 30, right: 30, left: 0, bottom: 40 }}
                          >
                            <CartesianGrid strokeDasharray="3 3" vertical={false} />
                            <XAxis 
                              dataKey="name" 
                              axisLine={false} 
                              tickLine={false}
                              height={50}
                              interval={0}
                              tick={(props) => {
                                const { x, y, payload } = props;
                                return (
                                  <g transform={`translate(${x},${y})`}>
                                    <text 
                                      x={0} 
                                      y={0} 
                                      dy={16} 
                                      textAnchor="end" 
                                      transform="rotate(-90)"
                                      fill="#555"
                                      fontSize={13}
                                      fontFamily="'SF Compact Text', system-ui, sans-serif"
                                      fontWeight="500"
                                    >
                                      {payload.value}
                                    </text>
                                  </g>
                                );
                              }}
                            />
                            <YAxis 
                              tickFormatter={(value) => formatToManUnit(value).replace('원', '')} 
                              axisLine={false}
                              tickLine={false}
                              tick={{
                                fill: "#555",
                                fontSize: 13,
                                fontFamily: "'SF Compact Text', system-ui, sans-serif",
                                fontWeight: "500"
                              }}
                            />
                            <Tooltip 
                              formatter={(value) => formatToManUnit(value as number)} 
                              cursor={{ fill: 'rgba(0, 0, 0, 0.05)' }}
                              contentStyle={{
                                borderRadius: '8px',
                                fontFamily: "'SF Compact Text', system-ui, sans-serif",
                                fontSize: '13px'
                              }}
                            />
                            <Bar 
                              dataKey="매출" 
                              fill="#8884d8" 
                              radius={[4, 4, 0, 0]}
                              maxBarSize={70}
                            />
                          </BarChart>
                        </ResponsiveContainer>
                      </div>
                    )}
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* 전문점 목록 테이블 */}
            <Card className="mb-6">
              <CardHeader className="pb-2">
                <CardTitle className="text-sm sm:text-base md:text-lg">전문점 목록</CardTitle>
              </CardHeader>
              <CardContent className="p-4">
                <div className="rounded-lg p-0 overflow-hidden">
                  <div className="overflow-x-auto overflow-y-auto max-h-[500px] border border-gray-200">
                    <Table className="border-collapse w-full relative">
                      <TableHeader className="sticky top-0 z-20 bg-gray-50 shadow-sm">
                        <TableRow className="bg-gray-50">
                          <TableHead className="w-[40px] sm:w-[60px] text-center border-b border-gray-200">순위</TableHead>
                          <TableHead className="w-[30px] border-b border-gray-200"></TableHead>
                          <TableHead className="w-[30%] border-b border-gray-200">전문점명</TableHead>
                          <TableHead className="w-[30%] text-center border-b border-gray-200">당월 매출</TableHead>
                          <TableHead className="w-[30%] text-center border-b border-gray-200">당월 수당</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {filteredShops.length === 0 ? (
                          <TableRow>
                            <TableCell colSpan={5} className="h-16 text-center border-b border-gray-200">
                              전문점 데이터가 없습니다.
                            </TableCell>
                          </TableRow>
                        ) : (
                          filteredShops.map((shop, index) => (
                            <TableRow
                              key={shop.id}
                              className={getRowColorClass(index + 1, shop.sales.total, index)}
                              onClick={() => handleShopClick(shop)}
                            >
                              <TableCell className="text-center font-medium border-b border-gray-200">
                                <div className="flex items-center justify-center">
                                  {index < 3 && shop.sales.total > 0 ? (
                                    <div className={`
                                      flex h-6 w-6 items-center justify-center rounded-full text-sm font-bold
                                      ${index === 0 ? 'bg-yellow-100 text-yellow-800' : 
                                        index === 1 ? 'bg-blue-100 text-blue-800' : 
                                        'bg-orange-100 text-orange-800'}
                                    `}>
                                      {index + 1}
                                    </div>
                                  ) : (
                                    <span className="font-bold text-gray-500">{index + 1}</span>
                                  )}
                                </div>
                              </TableCell>
                              <TableCell className="w-[30px] text-center border-b border-gray-200">
                                {shop.is_owner_kol && (
                                  <CrownIcon className="h-4 w-4 text-yellow-500" />
                                )}
                              </TableCell>
                              <TableCell className="border-b border-gray-200">
                                {shop.shop_name}
                              </TableCell>
                              <TableCell className="text-center border-b border-gray-200">
                                <span className="font-medium">{formatToManUnit(shop.sales.total)}</span>
                              </TableCell>
                              <TableCell className="text-center border-b border-gray-200">
                                {formatToManUnit(shop.sales.commission || 0)}
                              </TableCell>
                            </TableRow>
                          ))
                        )}
                      </TableBody>
                    </Table>
                  </div>
                </div>
                <div className="text-sm text-gray-600 mt-2 ml-1">
                  총 {filteredShops.length}개의 전문점
                </div>
              </CardContent>
            </Card>

            {/* Footer */}
            <KolFooter />
          </div>
        </main>
      </div>

      {/* Mobile Menu */}
      <Sheet open={mobileMenuOpen} onOpenChange={setMobileMenuOpen}>
        <SheetTrigger className="block sm:hidden">
          <div className="flex items-center justify-center p-2">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
              <path strokeLinecap="round" strokeLinejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5M3.75 17.25h16.5" />
            </svg>
          </div>
        </SheetTrigger>
        <SheetContent side="left" className="w-[250px] sm:w-[300px]">
          <DialogTitle className="sr-only">모바일 메뉴</DialogTitle>
          <KolMobileMenu 
            userName={kolInfo?.name} 
            shopName={kolInfo?.shopName} 
            userImage={user?.imageUrl} 
            setMobileMenuOpen={setMobileMenuOpen} 
            onSignOut={handleSignOut}
          />
        </SheetContent>
      </Sheet>

      {/* 상점 상세 정보 모달 렌더링 */}
      <ShopDetailModal />
      
      {/* 커스텀 스크롤바 스타일 */}
      <style jsx global>{`
        .overflow-x-auto::-webkit-scrollbar,
        .overflow-y-auto::-webkit-scrollbar {
          width: 8px;
          height: 8px;
        }
        .overflow-x-auto::-webkit-scrollbar-track,
        .overflow-y-auto::-webkit-scrollbar-track {
          background: #f1f1f1;
          border-radius: 4px;
        }
        .overflow-x-auto::-webkit-scrollbar-thumb,
        .overflow-y-auto::-webkit-scrollbar-thumb {
          background: #ddd;
          border-radius: 4px;
        }
        .overflow-x-auto::-webkit-scrollbar-thumb:hover,
        .overflow-y-auto::-webkit-scrollbar-thumb:hover {
          background: #bbb;
        }
      `}</style>

      {/* 차트 초기 위치 설정을 위한 스크립트 */}
      <script dangerouslySetInnerHTML={{ __html: `
        document.addEventListener('DOMContentLoaded', function() {
          const chartContainers = document.querySelectorAll('.custom-scrollbar');
          chartContainers.forEach(container => {
            container.scrollLeft = 0;
          });
        });
      `}} />
    </div>
  );
}
</file>
  <file path="app/admin-dashboard/layout.tsx">
'use client';

import Link from 'next/link';
import { useEffect, useState } from 'react';
import { useUser, useAuth } from '@clerk/nextjs';

// 아이콘 컴포넌트
import { 
  LayoutDashboard, Users, Store, BarChart3, 
  PieChart, LogOut, Menu, X, UserPlus, FileInput, BarChart
} from 'lucide-react';

export default function AdminDashboardLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [isAdmin, setIsAdmin] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const { isLoaded, isSignedIn, user } = useUser();
  const { signOut } = useAuth();
  
  useEffect(() => {
    async function checkAdmin() {
      try {
        // Clerk이 로드되었고 사용자가 로그인했는지 확인
        if (!isLoaded) return;
        
        if (!isSignedIn || !user) {
          window.location.href = '/signin';
          return;
        }
        
        // 사용자 역할 확인 (메타데이터에서 역할 정보 가져오기)
        const userRole = user.publicMetadata?.role as string;
        
        if (userRole !== 'admin') {
          window.location.href = '/';
          return;
        }
        
        setIsAdmin(true);
      } catch (error) {
        console.error('권한 확인 중 오류 발생:', error);
        window.location.href = '/';
      } finally {
        setIsLoading(false);
      }
    }
    
    checkAdmin();
  }, [isLoaded, isSignedIn, user]);
  
  // 로딩 중이거나 관리자가 아닌 경우 로딩 화면 표시
  if (isLoading) {
    return (
      <div className="flex h-screen items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500 mx-auto"></div>
          <p className="mt-4">권한을 확인하는 중입니다...</p>
        </div>
      </div>
    );
  }
  
  if (!isAdmin) {
    return null; // 리다이렉트 중이므로 아무것도 표시하지 않음
  }
  
  // 사이드바 메뉴 아이템
  const menuItems = [
    { name: '대시보드', href: '/admin-dashboard/main', icon: <LayoutDashboard size={20} /> },
    { name: '사용자 관리', href: '/admin-dashboard/user-management', icon: <UserPlus size={20} /> },
    { name: 'KOL 및 전문점 관리', href: '/admin-dashboard/entities', icon: <Users size={20} /> },
    { name: 'KOL 월별 지표', href: '/admin-dashboard/kol-metrics', icon: <BarChart3 size={20} /> },
    { name: '전문점 매출 관리', href: '/admin-dashboard/shop-sales', icon: <Store size={20} /> },
    { name: '제품 매출 비율', href: '/admin-dashboard/product-sales', icon: <PieChart size={20} /> },
    { name: 'KOL 데이터 입력', href: '/admin-dashboard/kol-data-entry', icon: <FileInput size={20} /> },
    { name: 'KOL 현황', href: '/admin-dashboard/kol-dashboard', icon: <BarChart size={20} /> },
  ];

  // 로그아웃 함수
  const handleLogout = () => {
    signOut(() => {
      window.location.href = '/';
    });
  };

  return (
    <div className="flex h-screen overflow-hidden bg-gray-50">
      {/* 사이드바 - 데스크톱 */}
      <aside className="hidden md:flex md:flex-col md:w-64 md:bg-white md:border-r border-gray-200">
        <div className="p-4 border-b border-gray-200">
          <h1 className="text-xl font-bold text-gray-800">BIOFOX 관리자</h1>
        </div>
        <nav className="flex-1 p-4 space-y-1">
          {menuItems.map((item) => (
            <Link
              key={item.name}
              href={item.href}
              className="flex items-center p-2 text-gray-700 rounded-lg hover:bg-gray-100 group"
            >
              <span className="mr-3 text-gray-500 group-hover:text-gray-700">{item.icon}</span>
              <span>{item.name}</span>
            </Link>
          ))}
        </nav>
        <div className="p-4 border-t border-gray-200">
          <button
            onClick={handleLogout}
            className="flex items-center p-2 text-gray-700 rounded-lg hover:bg-gray-100 group w-full text-left"
          >
            <LogOut size={20} className="mr-3 text-gray-500 group-hover:text-gray-700" />
            <span>로그아웃</span>
          </button>
        </div>
      </aside>

      {/* 모바일 사이드바 오버레이 */}
      {isMenuOpen && (
        <div className="fixed inset-0 z-40 md:hidden">
          <div className="fixed inset-0 bg-gray-600 bg-opacity-75" onClick={() => setIsMenuOpen(false)}></div>
          <div className="fixed inset-y-0 left-0 flex flex-col z-40 w-64 bg-white">
            <div className="p-4 border-b border-gray-200 flex items-center justify-between">
              <h1 className="text-xl font-bold text-gray-800">BIOFOX 관리자</h1>
              <button
                type="button"
                className="p-2 rounded-md text-gray-500 hover:text-gray-600 hover:bg-gray-100"
                onClick={() => setIsMenuOpen(false)}
              >
                <X size={24} />
              </button>
            </div>
            <nav className="flex-1 p-4 space-y-1">
              {menuItems.map((item) => (
                <Link
                  key={item.name}
                  href={item.href}
                  className="flex items-center p-2 text-gray-700 rounded-lg hover:bg-gray-100 group"
                  onClick={() => setIsMenuOpen(false)}
                >
                  <span className="mr-3 text-gray-500 group-hover:text-gray-700">{item.icon}</span>
                  <span>{item.name}</span>
                </Link>
              ))}
            </nav>
            <div className="p-4 border-t border-gray-200">
              <button
                onClick={handleLogout}
                className="flex items-center p-2 text-gray-700 rounded-lg hover:bg-gray-100 group w-full text-left"
              >
                <LogOut size={20} className="mr-3 text-gray-500 group-hover:text-gray-700" />
                <span>로그아웃</span>
              </button>
            </div>
          </div>
        </div>
      )}

      <div className="flex flex-col flex-1 overflow-hidden">
        {/* 모바일 헤더 */}
        <header className="md:hidden bg-white border-b border-gray-200 py-4 px-4 flex items-center justify-between">
          <h1 className="text-xl font-bold text-gray-800">BIOFOX 관리자</h1>
          <button
            type="button"
            className="inline-flex items-center justify-center p-2 rounded-md text-gray-500 hover:text-gray-600 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-500"
            onClick={() => setIsMenuOpen(true)}
          >
            <Menu size={24} />
          </button>
        </header>
        
        {/* 메인 컨텐츠 */}
        <main className="flex-1 overflow-y-auto p-6">
          {children}
        </main>
      </div>
    </div>
  );
}
</file>
  <file path="app/api/auth/check-email/route.ts">
import { NextResponse } from 'next/server';
import { serverSupabase as supabase } from '@/lib/supabase';

export async function GET(request: Request) {
  try {
    // URL에서 이메일 파라미터 추출
    const url = new URL(request.url);
    const email = url.searchParams.get("email");

    if (!email) {
      return NextResponse.json(
        { error: "이메일 파라미터가 필요합니다." },
        { status: 400 }
      );
    }

    // users 테이블에서 이메일 확인
    const { data, error } = await supabase
      .from('users')
      .select('email, role')
      .eq('email', email.toLowerCase())
      .single();

    if (error) {
      // 결과가 없는 경우 (등록된 이메일이 없음)
      if (error.code === 'PGRST116') {
        return NextResponse.json({
          isApproved: false,
          role: null,
        });
      }
      
      // 다른 오류
      console.error('이메일 확인 오류:', error);
      return NextResponse.json(
        { error: '이메일 확인 중 오류가 발생했습니다.' },
        { status: 500 }
      );
    }

    // 등록된 이메일인 경우
    return NextResponse.json({
      isApproved: true,
      role: data.role,
    });
  } catch (error) {
    console.error('이메일 확인 API 오류:', error);
    return NextResponse.json(
      { error: '서버 오류가 발생했습니다.' },
      { status: 500 }
    );
  }
}
</file>
  <file path="app/api/kol-new/monthly-sales/route.ts">
import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase';
import { auth } from '@clerk/nextjs/server';
import { getCurrentDate, getPreviousMonth, getMonthsBetween } from '@/lib/date-utils';

// KOL 월별 매출 데이터 API 라우트
export async function GET(request: NextRequest) {
  try {
    // 인증 확인
    const { userId } = await auth();
    if (!userId) {
      return NextResponse.json(
        { error: '인증되지 않은 요청입니다.' },
        { status: 401 }
      );
    }

    // 쿼리 파라미터에서 KOL ID 가져오기
    const url = new URL(request.url);
    const kolIdParam = url.searchParams.get('kolId');
    const months = url.searchParams.get('months') || '6'; // 기본값 6개월
    
    let kolId: number;
    
    // KOL ID가 제공되지 않은 경우 로그인한 사용자의 KOL ID 조회
    if (!kolIdParam) {
      // 로그인한 사용자의 KOL ID 가져오기
      const { data: userData, error: userError } = await supabase
        .from('users')
        .select('id')
        .eq('clerk_id', userId)
        .single();

      if (userError || !userData) {
        return NextResponse.json(
          { error: '사용자 정보를 찾을 수 없습니다.' },
          { status: 404 }
        );
      }

      const { data: kolData, error: kolError } = await supabase
        .from('kols')
        .select('id')
        .eq('user_id', userData.id)
        .single();

      if (kolError || !kolData) {
        return NextResponse.json(
          { error: 'KOL 정보를 찾을 수 없습니다.' },
          { status: 404 }
        );
      }
      
      kolId = kolData.id;
    } else {
      kolId = parseInt(kolIdParam);
      
      // KOL 접근 권한 확인
      if (userId) {
        // 현재 로그인한 사용자가 요청한 KOL ID에 접근 권한이 있는지 확인
        const { data: userData, error: userError } = await supabase
          .from('users')
          .select('id, role')
          .eq('clerk_id', userId)
          .single();
        
        if (!userError && userData) {
          // 관리자가 아니고, 본인 KOL 데이터가 아닌 경우 접근 거부
          if (userData.role !== '본사관리자') {
            const { data: kolData, error: kolError } = await supabase
              .from('kols')
              .select('id')
              .eq('user_id', userData.id)
              .single();
            
            if (!kolError && kolData && kolData.id !== kolId) {
              return NextResponse.json(
                { error: '해당 KOL 데이터에 대한 접근 권한이 없습니다.' },
                { status: 403 }
              );
            }
          }
        }
      }
    }

    // 현재 날짜와 이전 날짜 계산
    const currentDate = getCurrentDate();
    const monthsAgo = new Date(currentDate);
    monthsAgo.setMonth(monthsAgo.getMonth() - (parseInt(months) - 1));
    const startDate = monthsAgo.toISOString().split('T')[0];
    
    // 최근 N개월 범위 생성
    const monthRange = getMonthsBetween(startDate, currentDate);

    // KOL 월별 요약 데이터 조회 (새로운 테이블 사용)
    const { data: summaryData, error: summaryError } = await supabase
      .from('kol_dashboard_metrics')
      .select('year_month, monthly_sales, monthly_commission')
      .eq('kol_id', kolId)
      .in('year_month', monthRange)
      .order('year_month', { ascending: true });

    if (summaryError) {
      console.error('KOL 월별 요약 데이터 조회 에러:', summaryError);
      return NextResponse.json(
        { error: '월별 데이터를 조회하는 중 오류가 발생했습니다.' },
        { status: 500 }
      );
    }

    // 결과 데이터 가공
    const monthlyData = summaryData.map(item => ({
      month: item.year_month.substring(5) + '월', // 'MM월' 형식으로 변환
      sales: item.monthly_sales,
      allowance: item.monthly_commission
    }));

    return NextResponse.json(monthlyData);
  } catch (error) {
    console.error('KOL 월별 매출 데이터 조회 에러:', error);
    return NextResponse.json(
      { error: '데이터 조회 중 오류가 발생했습니다.' },
      { status: 500 }
    );
  }
}
</file>
  <file path="app/api/kol-new/notifications/[id]/read/route.ts">
import { NextRequest, NextResponse } from 'next/server';
import { auth } from '@clerk/nextjs/server';
import { db } from '@/lib/db';

// 동적 라우트 처리 설정
export const dynamic = 'force-dynamic';

// PUT: 특정 알림을 읽음으로 표시
export async function PUT(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  const notificationId = params.id;
  
  try {
    // 현재 인증된 사용자 확인
    const authResult = await auth();
    const userId = authResult.userId;
    
    if (!userId) {
      console.error('인증되지 않은 사용자');
      return NextResponse.json(
        { error: '인증되지 않은 사용자입니다.' },
        { status: 401 }
      );
    }

    console.log('현재 사용자 ID:', userId);
    console.log('알림 ID:', notificationId);

    // 사용자 정보 가져오기
    const user = await db.query(
      `SELECT id FROM users WHERE clerk_id = $1`,
      [userId]
    );
    
    if (user.rows.length === 0) {
      console.error('사용자 정보를 찾을 수 없음:', userId);
      return NextResponse.json(
        { error: '사용자 정보를 찾을 수 없습니다.' },
        { status: 404 }
      );
    }
    
    const userIdFromDb = user.rows[0].id;
    console.log('DB 사용자 ID:', userIdFromDb);
    
    // 알림이 존재하는지 확인 및 본인 소유인지 확인
    const notification = await db.query(
      `SELECT * FROM notifications WHERE id = $1 AND user_id = $2`,
      [notificationId, userIdFromDb]
    );
    
    if (notification.rows.length === 0) {
      console.error('알림을 찾을 수 없거나 권한이 없음:', notificationId, userIdFromDb);
      return NextResponse.json(
        { error: '알림을 찾을 수 없거나 권한이 없습니다.' },
        { status: 404 }
      );
    }
    
    console.log('알림 읽음으로 표시:', notificationId);
    
    // 알림을 읽음으로 표시
    await db.query(
      `UPDATE notifications SET read = true, updated_at = NOW() WHERE id = $1`,
      [notificationId]
    );

    return NextResponse.json({
      success: true,
      message: '알림이 읽음으로 표시되었습니다.'
    });
  } catch (error) {
    console.error('알림 상태 변경 중 오류 발생:', error);
    return NextResponse.json(
      { error: '알림 상태 변경에 실패했습니다.' },
      { status: 500 }
    );
  }
}
</file>
  <file path="app/api/kol-new/product-ratio/route.ts">
import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase';
import { auth } from '@clerk/nextjs/server';
import { getCurrentDate } from '@/lib/date-utils';

// 새로운 제품 판매 메트릭스 응답 타입
interface ProductSalesMetricsItem {
  product_id: number;
  quantity: number;
  sales_amount: number;
  sales_ratio: number;
  products: {
    name: string;
  } | {
    name: string;
  }[];
}

export async function GET(request: NextRequest) {
  try {
    // 인증 확인
    const { userId } = await auth();
    if (!userId) {
      return NextResponse.json(
        { error: '인증되지 않은 요청입니다.' },
        { status: 401 }
      );
    }

    // 파라미터 가져오기
    const yearMonth = request.nextUrl.searchParams.get('yearMonth') || getCurrentDate().substring(0, 7);

    // KOL ID 조회 - 로그인한 사용자의 KOL ID 가져오기
    const { data: userData, error: userError } = await supabase
      .from('users')
      .select('id, name')
      .eq('clerk_id', userId)
      .single();

    if (userError || !userData) {
      return NextResponse.json(
        { error: '사용자 정보를 찾을 수 없습니다.' },
        { status: 404 }
      );
    }

    const { data: kolData, error: kolError } = await supabase
      .from('kols')
      .select('id, name')
      .eq('user_id', userData.id)
      .single();

    if (kolError || !kolData) {
      return NextResponse.json(
        { error: 'KOL 정보를 찾을 수 없습니다.' },
        { status: 404 }
      );
    }

    // product_sales_metrics 테이블에서 KOL 전체 데이터 조회 (shop_id가 NULL인 레코드)
    const { data: metricsData, error: metricsError } = await supabase
      .from('product_sales_metrics')
      .select(`
        product_id,
        products(name),
        quantity,
        sales_amount,
        sales_ratio
      `)
      .eq('kol_id', kolData.id)
      .eq('year_month', yearMonth)
      .is('shop_id', null) // shop_id가 NULL인 레코드만 선택 (KOL 전체 데이터)
      .order('sales_ratio', { ascending: false });

    if (metricsError) {
      console.error('product_sales_metrics 조회 오류:', metricsError);
      return NextResponse.json(
        { error: '제품 판매 데이터를 불러오는데 실패했습니다.' },
        { status: 500 }
      );
    }

    // 데이터가 있는 경우 포맷팅
    if (metricsData && metricsData.length > 0) {
      const formattedData = metricsData.map((item: ProductSalesMetricsItem) => {
        // products가 배열인 경우 첫 번째 요소의 name을 가져오고, 
        // 객체인 경우 직접 name 속성을 사용
        let productName = '알 수 없는 제품';
        if (item.products) {
          if (Array.isArray(item.products)) {
            if (item.products.length > 0 && item.products[0].name) {
              productName = item.products[0].name;
            }
          } else if (item.products.name) {
            productName = item.products.name;
          }
        }
        
        return {
          productId: item.product_id,
          productName,
          totalSalesAmount: item.sales_amount,
          salesRatio: item.sales_ratio.toString(),
          usageQuantity: item.quantity
        };
      });

      return NextResponse.json(formattedData, { status: 200 });
    }

    // 이전 로직을 호환성 유지를 위해 남겨둠 (기존 코드도 실행되도록 함)
    // 기존 코드 제거를 위해 주석 처리 후 나중에 완전히 제거 계획
    /*
    // 2. shop_product_sales 테이블 체크
    // 3. 기존 product_sales_ratios 테이블 체크
    */

    // 데이터가 없는 경우 빈 배열 반환 (파이 차트에서 "데이터가 없습니다" 메시지 표시)
    return NextResponse.json([], { status: 200 });
    
  } catch (error) {
    console.error('제품 비율 데이터 조회 오류:', error);
    return NextResponse.json(
      { error: '제품 비율 데이터를 불러오는데 실패했습니다.' },
      { status: 500 }
    );
  }
}
</file>
  <file path="app/components/store-ranking-table.tsx">
// 이 파일은 사용되지 않습니다. 대신 components/store-ranking-table.tsx를 사용하세요.
</file>
  <file path="app/kol-new/layout.tsx">
import { ReactNode } from "react";
import { redirect } from "next/navigation";
import { auth } from "@clerk/nextjs/server";
import { getClientRole } from "@/lib/auth";

export default async function KolNewLayout({
  children,
}: {
  children: ReactNode;
}) {
  const { userId } = await auth();
  
  // 인증 확인
  if (!userId) {
    console.log('[kol-new 레이아웃] 미인증 사용자 리다이렉트 /signin');
    redirect("/signin");
  }
  
  // Clerk에서 권한 확인 - 관리자면 관리자 페이지로 리다이렉트
  const role = await getClientRole(userId);
  console.log('[kol-new 레이아웃] 사용자 역할:', role);
  
  if (role === "admin") {
    console.log('[kol-new 레이아웃] 관리자 사용자 리다이렉트 /admin-dashboard/main');
    redirect("/admin-dashboard/main");
  }
  
  // kol 역할이 아니면 (admin 제외) 권한 없음 페이지로 리다이렉트
  if (role !== "kol" && role !== "admin") {
    console.log('[kol-new 레이아웃] 권한 없는 사용자 리다이렉트');
    // return new Response("접근 권한이 없습니다", { status: 403 });
    // 홈으로 리다이렉트하지 않음 - 무한 리다이렉션 방지
  }
  
  return (
    <div className="min-h-screen bg-background">
      {children}
    </div>
  );
}
</file>
  <file path="app/signup/[[...rest]]/page.tsx">
import { SignUp } from "@clerk/nextjs";
import Link from "next/link";

export const metadata = {
  title: "회원가입 - BIOFOX KOL",
  description: "BIOFOX KOL 계정을 생성하세요.",
};

export default function SignUpPage() {
  return (
    <div className="flex min-h-screen flex-col items-center justify-center py-12 px-4 sm:px-6 lg:px-8" style={{ 
      background: 'linear-gradient(to bottom right, white, rgba(192, 166, 227, 0.1))' 
    }}>
      <div className="w-full max-w-md">
        <div className="flex flex-col items-center mb-8">
          <Link href="/" className="mb-6">
            <h1 className="text-4xl font-bold" style={{ 
              backgroundImage: 'linear-gradient(to right, #6D28D9, #8B5CF6)',
              WebkitBackgroundClip: 'text',
              WebkitTextFillColor: 'transparent',
              backgroundClip: 'text'
            }}>
              BIOFOX KOL
            </h1>
          </Link>
          <p className="text-center text-gray-600 mt-2">
            KOL 및 전문점 관리 시스템
          </p>
        </div>
        
        <div className="card-gradient">
          <SignUp 
            appearance={{
              elements: {
                formButtonPrimary: "btn-primary",
                card: "shadow-none bg-transparent",
                headerTitle: "text-xl font-semibold",
                headerSubtitle: "text-gray-500",
                socialButtonsBlockButton: "border border-solid hover:border-[#C0A6E3]",
                socialButtonsBlockButtonText: "text-gray-600",
                formFieldLabel: "text-gray-700",
                formFieldInput: "border-solid focus:border-[#6D28D9] focus:ring-1 focus:ring-[#6D28D9]",
                footerActionLink: "text-[#6D28D9] hover:text-[#8B5CF6]",
                identityPreviewText: "text-gray-700",
                identityPreviewEditButton: "text-[#6D28D9] hover:text-[#8B5CF6]",
                rootBox: "w-full",
                footer: "pb-0",
                main: "p-0 sm:p-0"
              },
            }}
            afterSignUpUrl="/dashboard"
            signInUrl="/signin"
            developmentMode={false}
          />
        </div>
      </div>
    </div>
  );
}
</file>
  <file path="app/api/kol-new/activities/route.ts">
import { NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase';
import { auth } from '@clerk/nextjs/server';

// 전문점 정보 타입 정의
interface ShopInfo {
  id: number;
  owner_name: string;
  shop_name?: string;
}

// 영업 활동 타입 정의
interface SalesActivity {
  id: number;
  shop_id: number | null;
  activity_date: string;
  content: string;
  created_at: string;
}

// 영업 일지 생성 요청 타입 정의
interface CreateActivityRequest {
  shop_id: number | null;
  activity_date: string;
  content: string;
}

// KOL 영업 일지 API 라우트
export async function GET() {
  try {
    // 인증 확인
    const { userId } = await auth();
    if (!userId) {
      return NextResponse.json(
        { error: '인증되지 않은 요청입니다.' },
        { status: 401 }
      );
    }

    console.log(`영업 일지 API 요청: Clerk ID=${userId}`);

    // KOL ID 조회 - 로그인한 사용자의 KOL ID 가져오기
    let { data: userData, error: userError } = await supabase
      .from('users')
      .select('id, email, name, role')
      .eq('clerk_id', userId)
      .single();

    if (userError) {
      console.error(`사용자 정보 조회 오류(clerk_id=${userId}):`, userError);
      
      // 이메일로 사용자 검색 시도 (대비책)
      const { data: userByEmail, error: emailError } = await supabase
        .rpc('find_user_by_clerk_metadata', { clerk_user_id: userId });
        
      if (emailError || !userByEmail) {
        console.error('이메일로 사용자 검색 실패:', emailError);
        return NextResponse.json(
          { error: '사용자 정보를 찾을 수 없습니다. 관리자에게 문의하세요.' },
          { status: 404 }
        );
      }
      
      // 이메일로 찾은 경우 사용자 정보 업데이트
      const { error: updateError } = await supabase
        .from('users')
        .update({ clerk_id: userId })
        .eq('id', userByEmail.id);
        
      if (updateError) {
        console.error('사용자 정보 업데이트 실패:', updateError);
      } else {
        console.log(`사용자 정보 업데이트 성공: ID=${userByEmail.id}, Clerk ID=${userId}`);
      }
      
      // 업데이트된 사용자 정보 사용
      userData = userByEmail;
    }

    if (!userData) {
      console.error(`사용자 정보 없음(clerk_id=${userId})`);
      return NextResponse.json(
        { error: '사용자 정보를 찾을 수 없습니다. 관리자에게 문의하세요.' },
        { status: 404 }
      );
    }

    // 사용자 역할 확인
    if (userData.role !== 'kol') {
      console.error(`비KOL 사용자 접근(userId=${userData.id}, role=${userData.role})`);
      return NextResponse.json(
        { error: 'KOL 역할이 아닙니다.' },
        { status: 403 }
      );
    }

    let { data: kolData, error: kolError } = await supabase
      .from('kols')
      .select('id')
      .eq('user_id', userData.id)
      .single();

    if (kolError) {
      console.error(`KOL 정보 조회 오류(user_id=${userData.id}):`, kolError);
      return NextResponse.json(
        { error: 'KOL 정보를 찾을 수 없습니다. 관리자에게 문의하세요.' },
        { status: 404 }
      );
    }

    if (!kolData) {
      console.error(`KOL 정보 없음(user_id=${userData.id})`);
      return NextResponse.json(
        { error: 'KOL 정보를 찾을 수 없습니다. 관리자에게 문의하세요.' },
        { status: 404 }
      );
    }

    console.log(`KOL 조회 성공: ID=${kolData.id}`);

    // 영업 일지 데이터 조회 (최근 활동부터 정렬)
    const { data: activities, error: activitiesError } = await supabase
      .from('sales_activities')
      .select(`
        id,
        shop_id,
        activity_date,
        content,
        created_at
      `)
      .eq('kol_id', kolData.id)
      .order('activity_date', { ascending: false });

    if (activitiesError) {
      console.error(`영업 일지 조회 오류(kol_id=${kolData.id}):`, activitiesError);
      return NextResponse.json(
        { error: '영업 일지 데이터를 조회하는 중 오류가 발생했습니다.' },
        { status: 500 }
      );
    }

    // 활동 데이터가 없는 경우 빈 배열 반환
    if (!activities || activities.length === 0) {
      console.log(`영업 일지 없음(kol_id=${kolData.id})`);
      return NextResponse.json([]);
    }

    const salesActivities = activities as SalesActivity[];

    // 영업 일지에 있는 모든 전문점 ID 수집
    const shopIds = salesActivities
      .filter(activity => activity.shop_id !== null)
      .map(activity => activity.shop_id as number);

    // 중복 제거
    const uniqueShopIds = [...new Set(shopIds)];

    // 전문점 정보가 있으면 전문점 데이터 조회
    const shopsData: Record<number, ShopInfo> = {};
    
    if (uniqueShopIds.length > 0) {
      const { data: shops, error: shopsError } = await supabase
        .from('shops')
        .select('id, owner_name, shop_name')
        .in('id', uniqueShopIds);

      if (shopsError) {
        console.error(`연관 전문점 조회 오류(kol_id=${kolData.id}):`, shopsError);
        // 전문점 조회 중 오류가 발생해도 활동 데이터는 반환
      } else if (shops) {
        // 전문점 데이터를 ID로 쉽게 조회할 수 있도록 객체로 변환
        shops.forEach((shop: ShopInfo) => {
          shopsData[shop.id] = shop;
        });
      }
    }

    // 영업 일지와 전문점 데이터 결합
    const activitiesWithShopInfo = salesActivities.map(activity => {
      const shopInfo = activity.shop_id !== null ? shopsData[activity.shop_id] : null;
      
      return {
        ...activity,
        shop_name: shopInfo ? (shopInfo.shop_name || shopInfo.owner_name) : null
      };
    });

    console.log(`영업 일지 조회 완료: KOL ID=${kolData.id}, 활동 수=${activitiesWithShopInfo.length}`);
    return NextResponse.json(activitiesWithShopInfo);
  } catch (error) {
    console.error('KOL 영업 일지 조회 에러:', error);
    const errorMessage = error instanceof Error 
      ? `데이터 조회 중 오류가 발생했습니다: ${error.message}` 
      : '데이터 조회 중 알 수 없는 오류가 발생했습니다.';
      
    return NextResponse.json(
      { error: errorMessage },
      { status: 500 }
    );
  }
}

// 영업 일지 생성 API 라우트
export async function POST(request: Request) {
  try {
    // 인증 확인
    const { userId } = await auth();
    if (!userId) {
      return NextResponse.json(
        { error: '인증되지 않은 요청입니다.' },
        { status: 401 }
      );
    }

    console.log(`영업 일지 생성 요청: Clerk ID=${userId}`);

    // 요청 본문 파싱
    const body: CreateActivityRequest = await request.json();
    
    // 필수 필드 검증
    if (!body.activity_date || !body.content) {
      return NextResponse.json(
        { error: '날짜와 내용은 필수 입력 항목입니다.' },
        { status: 400 }
      );
    }

    if (body.content.trim().length < 5) {
      return NextResponse.json(
        { error: '내용은 최소 5자 이상 입력해야 합니다.' },
        { status: 400 }
      );
    }

    // 날짜 형식 검증
    const dateRegex = /^\d{4}-\d{2}-\d{2}$/;
    if (!dateRegex.test(body.activity_date)) {
      return NextResponse.json(
        { error: '날짜 형식이 올바르지 않습니다. YYYY-MM-DD 형식으로 입력해주세요.' },
        { status: 400 }
      );
    }

    // KOL ID 조회 - 로그인한 사용자의 KOL ID 가져오기
    let { data: userData, error: userError } = await supabase
      .from('users')
      .select('id, email, role')
      .eq('clerk_id', userId)
      .single();

    if (userError) {
      console.error(`사용자 정보 조회 오류(clerk_id=${userId}):`, userError);
      
      // 이메일로 사용자 검색 시도 (대비책)
      const { data: userByEmail, error: emailError } = await supabase
        .rpc('find_user_by_clerk_metadata', { clerk_user_id: userId });
        
      if (emailError || !userByEmail) {
        console.error('이메일로 사용자 검색 실패:', emailError);
        return NextResponse.json(
          { error: '사용자 정보를 찾을 수 없습니다. 관리자에게 문의하세요.' },
          { status: 404 }
        );
      }
      
      // 이메일로 찾은 경우 사용자 정보 업데이트
      const { error: updateError } = await supabase
        .from('users')
        .update({ clerk_id: userId })
        .eq('id', userByEmail.id);
        
      if (updateError) {
        console.error('사용자 정보 업데이트 실패:', updateError);
      } else {
        console.log(`사용자 정보 업데이트 성공: ID=${userByEmail.id}, Clerk ID=${userId}`);
      }
      
      // 업데이트된 사용자 정보 사용
      userData = userByEmail;
    }

    if (!userData) {
      console.error(`사용자 정보 없음(clerk_id=${userId})`);
      return NextResponse.json(
        { error: '사용자 정보를 찾을 수 없습니다. 관리자에게 문의하세요.' },
        { status: 404 }
      );
    }

    // 사용자 역할 확인
    if (userData.role !== 'kol') {
      console.error(`비KOL 사용자 접근(userId=${userData.id}, role=${userData.role})`);
      return NextResponse.json(
        { error: 'KOL 역할이 아닙니다.' },
        { status: 403 }
      );
    }

    let { data: kolData, error: kolError } = await supabase
      .from('kols')
      .select('id')
      .eq('user_id', userData.id)
      .single();

    if (kolError) {
      console.error(`KOL 정보 조회 오류(user_id=${userData.id}):`, kolError);
      return NextResponse.json(
        { error: 'KOL 정보를 찾을 수 없습니다. 관리자에게 문의하세요.' },
        { status: 404 }
      );
    }

    if (!kolData) {
      console.error(`KOL 정보 없음(user_id=${userData.id})`);
      return NextResponse.json(
        { error: 'KOL 정보를 찾을 수 없습니다. 관리자에게 문의하세요.' },
        { status: 404 }
      );
    }

    // 전문점 ID가 유효한지 확인 (선택 사항인 경우 스킵)
    if (body.shop_id !== null) {
      const { data: shopData, error: shopError } = await supabase
        .from('shops')
        .select('id')
        .eq('id', body.shop_id)
        .eq('kol_id', kolData.id)  // 본인의 전문점만 선택 가능
        .single();

      if (shopError || !shopData) {
        console.error(`전문점 검증 오류(shop_id=${body.shop_id}, kol_id=${kolData.id}):`, shopError);
        return NextResponse.json(
          { error: '유효하지 않은 전문점입니다. 본인이 관리하는 전문점만 선택할 수 있습니다.' },
          { status: 400 }
        );
      }
    }

    // 영업 일지 생성
    const { data: newActivity, error: createError } = await supabase
      .from('sales_activities')
      .insert({
        kol_id: kolData.id,
        shop_id: body.shop_id,
        activity_date: body.activity_date,
        content: body.content
      })
      .select()
      .single();

    if (createError) {
      console.error(`영업 일지 생성 오류(kol_id=${kolData.id}):`, createError);
      return NextResponse.json(
        { error: '영업 일지 생성 중 오류가 발생했습니다.' },
        { status: 500 }
      );
    }

    // 전문점 정보 조회 (생성된 활동이 전문점과 연결된 경우)
    let shopName = null;
    if (newActivity.shop_id) {
      const { data: shopData, error: shopError } = await supabase
        .from('shops')
        .select('owner_name, shop_name')
        .eq('id', newActivity.shop_id)
        .single();

      if (!shopError && shopData) {
        shopName = shopData.shop_name || shopData.owner_name;
      }
    }

    console.log(`영업 일지 생성 완료: ID=${newActivity.id}, KOL ID=${kolData.id}`);
    return NextResponse.json({ 
      success: true,
      message: '영업 일지가 성공적으로 등록되었습니다.',
      data: {
        ...newActivity,
        shop_name: shopName
      }
    }, { status: 201 });
  } catch (error) {
    console.error('영업 일지 생성 에러:', error);
    const errorMessage = error instanceof Error 
      ? `영업 일지 생성 중 오류가 발생했습니다: ${error.message}` 
      : '영업 일지 생성 중 알 수 없는 오류가 발생했습니다.';
      
    return NextResponse.json(
      { error: errorMessage },
      { status: 500 }
    );
  }
}
</file>
  <file path="app/api/kol-new/dashboard/route.ts">
import { NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase';
import { auth } from '@clerk/nextjs/server';
import { getCurrentDate, getPreviousMonth } from '@/lib/date-utils';

// KOL 대시보드 API 라우트 
export async function GET() {
  try {
    // 인증 확인
    const { userId } = await auth();
    if (!userId) {
      return NextResponse.json(
        { error: '인증되지 않은 요청입니다.' },
        { status: 401 }
      );
    }

    console.log(`대시보드 API 요청: Clerk ID=${userId}`);

    // 현재 월과 이전 월 계산 (YYYY-MM 형식)
    const currentDate = getCurrentDate();
    const currentMonth = currentDate.substring(0, 7);
    const previousMonth = getPreviousMonth(currentDate);

    // KOL ID 조회 - 로그인한 사용자의 KOL ID 가져오기
    let { data: userData, error: userError } = await supabase
      .from('users')
      .select('id, email, name, role')
      .eq('clerk_id', userId)
      .single();

    if (userError) {
      console.error(`사용자 정보 조회 오류(clerk_id=${userId}):`, userError);
      
      // 이메일로 사용자 검색 시도 (대비책)
      const { data: userByEmail, error: emailError } = await supabase
        .rpc('find_user_by_clerk_metadata', { clerk_user_id: userId });
        
      if (emailError) {
        console.error('보조 사용자 검색 실패:', emailError);
        return NextResponse.json(
          { error: '사용자 정보를 찾을 수 없습니다. 관리자에게 문의하세요.', details: '보조 검색 오류: ' + emailError.message },
          { status: 404 }
        );
      }
      
      if (!userByEmail || typeof userByEmail.id === 'undefined') {
        console.error('보조 사용자 검색 결과 없음');
        
        // 최후의 수단: 최신 pending 사용자 직접 검색
        const { data: pendingUsers, error: pendingError } = await supabase
          .from('users')
          .select('id, email, name, role')
          .like('clerk_id', 'pending_%')
          .order('created_at', { ascending: false })
          .limit(1);
          
        if (pendingError || !pendingUsers || pendingUsers.length === 0) {
          console.error('Pending 사용자 검색 실패:', pendingError || '결과 없음');
          return NextResponse.json(
            { error: '시스템에 등록된 사용자를 찾을 수 없습니다. 관리자에게 문의하세요.', details: '모든 검색 방법 실패' },
            { status: 404 }
          );
        }
        
        userData = pendingUsers[0];
        console.log(`최신 Pending 사용자 발견: ID=${userData.id}, Email=${userData.email}`);
      } else {
        userData = userByEmail;
        console.log(`보조 검색으로 사용자 발견: ID=${userData.id}, Email=${userData.email}`);
      }
      
      // 발견한 경우 사용자 정보 업데이트
      if (userData && typeof userData.id !== 'undefined') {
        const { error: updateError } = await supabase
          .from('users')
          .update({ clerk_id: userId })
          .eq('id', userData.id);
          
        if (updateError) {
          console.error(`사용자 정보 업데이트 실패(ID=${userData.id}):`, updateError);
        } else {
          console.log(`사용자 정보 업데이트 성공: ID=${userData.id}, Clerk ID=${userId}`);
        }
      }
    }

    if (!userData || typeof userData.id === 'undefined') {
      console.error(`사용자 정보 없음(clerk_id=${userId})`);
      return NextResponse.json(
        { error: '사용자 정보를 찾을 수 없습니다. 관리자에게 문의하세요.' },
        { status: 404 }
      );
    }

    // 사용자 역할 확인
    if (userData.role !== 'kol') {
      console.error(`비KOL 사용자 접근(userId=${userData.id}, role=${userData.role})`);
      return NextResponse.json(
        { error: 'KOL 역할이 아닙니다.' },
        { status: 403 }
      );
    }

    console.log(`사용자 조회 성공: ID=${userData.id}, Email=${userData.email}`);

    let { data: kolData, error: kolError } = await supabase
      .from('kols')
      .select('id, name, shop_name')
      .eq('user_id', userData.id)
      .single();

    if (kolError) {
      console.error(`KOL 정보 조회 오류(user_id=${userData.id}):`, kolError);
      
      // KOL 정보가 없으면 자동 생성 시도
      const { data: newKolData, error: createKolError } = await supabase
        .from('kols')
        .insert({
          user_id: userData.id,
          name: userData.name || userData.email.split('@')[0],
          shop_name: `${userData.name || userData.email.split('@')[0]}의 매장`,
          status: 'active'
        })
        .select()
        .single();
        
      if (createKolError) {
        console.error(`KOL 정보 자동 생성 실패(user_id=${userData.id}):`, createKolError);
        return NextResponse.json(
          { error: 'KOL 정보를 찾을 수 없고 자동 생성에 실패했습니다. 관리자에게 문의하세요.', details: createKolError.message },
          { status: 404 }
        );
      }
      
      console.log(`KOL 정보 자동 생성 성공: ID=${newKolData.id}, Name=${newKolData.name}`);
      kolData = newKolData;
    }

    if (!kolData) {
      console.error(`KOL 정보 없음(user_id=${userData.id})`);
      return NextResponse.json(
        { error: 'KOL 정보를 찾을 수 없습니다. 관리자에게 문의하세요.' },
        { status: 404 }
      );
    }

    console.log(`KOL 조회 성공: ID=${kolData.id}, Name=${kolData.name}`);

    // KOL 월별 요약 정보 조회 (새로운 테이블 사용)
    const { data: dashboardMetrics, error: dashboardError } = await supabase
      .from('kol_dashboard_metrics')
      .select('*')
      .eq('kol_id', kolData.id)
      .eq('year_month', currentMonth)
      .single();

    if (dashboardError) {
      console.log(`대시보드 메트릭 조회 오류(kol_id=${kolData.id}, month=${currentMonth}):`, dashboardError);
      // 오류가 있어도 계속 진행 (기본값 사용)
    }

    // 이전 월 데이터 조회
    const { data: previousMonthData, error: previousMonthError } = await supabase
      .from('kol_dashboard_metrics')
      .select('monthly_sales, monthly_commission')
      .eq('kol_id', kolData.id)
      .eq('year_month', previousMonth)
      .single();

    if (previousMonthError) {
      console.log(`이전 월 데이터 조회 오류(kol_id=${kolData.id}, month=${previousMonth}):`, previousMonthError);
      // 오류가 있어도 계속 진행 (기본값 사용)
    }

    // 전문점 정보 조회 (새로운 테이블 사용)
    const { data: shopMetrics, error: shopMetricsError } = await supabase
      .from('kol_total_monthly_sales')
      .select('total_shops, total_active_shops')
      .eq('kol_id', kolData.id)
      .eq('year_month', currentMonth)
      .single();

    if (shopMetricsError) {
      console.log(`전문점 메트릭 조회 오류(kol_id=${kolData.id}, month=${currentMonth}):`, shopMetricsError);
      // 오류가 있어도 계속 진행 (기본값 사용)
    }

    // 기본값 설정
    const monthlySales = dashboardMetrics?.monthly_sales || 0;
    const monthlyCommission = dashboardMetrics?.monthly_commission || 0;
    const previousMonthSales = previousMonthData?.monthly_sales || 0;
    const previousMonthCommission = previousMonthData?.monthly_commission || 0;
    const totalShops = shopMetrics?.total_shops || 0;
    const activeOrderingShops = shopMetrics?.total_active_shops || 0;
    const notOrderingShops = totalShops - activeOrderingShops;

    // 대시보드 데이터 구성
    const dashboardData = {
      kol: {
        id: kolData.id,
        name: kolData.name,
        shopName: kolData.shop_name
      },
      sales: {
        currentMonth: monthlySales,
        previousMonth: previousMonthSales,
        growth: monthlySales - previousMonthSales
      },
      allowance: {
        currentMonth: monthlyCommission,
        previousMonth: previousMonthCommission,
        growth: monthlyCommission - previousMonthCommission
      },
      shops: {
        total: totalShops,
        ordering: activeOrderingShops,
        notOrdering: notOrderingShops
      }
    };
    
    console.log(`대시보드 데이터 생성 완료: KOL ID=${kolData.id}`);
    return NextResponse.json(dashboardData);
  } catch (error) {
    console.error('KOL 대시보드 데이터 조회 에러:', error);
    const errorMessage = error instanceof Error 
      ? `데이터 조회 중 오류가 발생했습니다: ${error.message}` 
      : '데이터 조회 중 알 수 없는 오류가 발생했습니다.';
      
    return NextResponse.json(
      { error: errorMessage },
      { status: 500 }
    );
  }
}
</file>
  <file path="app/api/kol-new/shop-product-ratio/[shopId]/route.ts">
import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase';
import { auth } from '@clerk/nextjs/server';
import { getCurrentDate } from '@/lib/date-utils';

// 동적 라우트 처리 설정
export const dynamic = 'force-dynamic';

// 새로운 제품 판매 메트릭스 응답 타입
interface ProductSalesMetricsItem {
  product_id: number;
  quantity: number;
  sales_amount: number;
  sales_ratio: number;
  products: {
    name: string;
  } | {
    name: string;
  }[];
}

// 상점별 제품 판매 비율 API
export async function GET(
  request: NextRequest,
  { params }: { params: { shopId: string } }
) {
  const shopId = params.shopId;
  
  try {
    // 인증 확인
    const { userId } = await auth();
    if (!userId) {
      return NextResponse.json(
        { error: '인증되지 않은 요청입니다.' },
        { status: 401 }
      );
    }

    if (!shopId) {
      return NextResponse.json(
        { error: '상점 ID가 제공되지 않았습니다.' },
        { status: 400 }
      );
    }

    // 파라미터 가져오기
    const yearMonth = request.nextUrl.searchParams.get('yearMonth') || getCurrentDate().substring(0, 7);

    // KOL ID 조회 - 로그인한 사용자의 KOL ID 가져오기
    const { data: userData, error: userError } = await supabase
      .from('users')
      .select('id')
      .eq('clerk_id', userId)
      .single();

    if (userError || !userData) {
      return NextResponse.json(
        { error: '사용자 정보를 찾을 수 없습니다.' },
        { status: 404 }
      );
    }

    const { data: kolData, error: kolError } = await supabase
      .from('kols')
      .select('id')
      .eq('user_id', userData.id)
      .single();

    if (kolError || !kolData) {
      return NextResponse.json(
        { error: 'KOL 정보를 찾을 수 없습니다.' },
        { status: 404 }
      );
    }

    // product_sales_metrics 테이블에서 특정 상점의 제품별 판매 데이터 조회
    const { data: metricsData, error: metricsError } = await supabase
      .from('product_sales_metrics')
      .select(`
        product_id,
        products(name),
        quantity,
        sales_amount,
        sales_ratio
      `)
      .eq('shop_id', shopId)
      .eq('kol_id', kolData.id)
      .eq('year_month', yearMonth)
      .order('sales_ratio', { ascending: false });

    if (metricsError) {
      console.error('product_sales_metrics 조회 오류:', metricsError);
      return NextResponse.json(
        { error: '상점 제품별 판매 데이터를 불러오는데 실패했습니다.' },
        { status: 500 }
      );
    }

    // 데이터가 없는 경우 빈 배열 반환
    if (!metricsData || metricsData.length === 0) {
      // 이전 호환성을 위한 기존 데이터 조회 (주석 처리함)
      /*
      // shop_product_sales 테이블에서 특정 상점의 제품별 판매 데이터 조회
      const { data: shopProductSales, error: shopProductError } = await supabase
        .from('shop_product_sales')
        ...
      */
      
      return NextResponse.json([], { status: 200 });
    }

    // 제품별 판매 비율 계산
    const formattedData = metricsData.map((item: ProductSalesMetricsItem) => {
      // products가 배열인 경우와 객체인 경우 모두 처리
      let productName = '알 수 없는 제품';
      if (item.products) {
        if (Array.isArray(item.products)) {
          if (item.products.length > 0 && item.products[0]?.name) {
            productName = item.products[0].name;
          }
        } else if (item.products?.name) {
          productName = item.products.name;
        }
      }

      return {
        productId: item.product_id,
        productName,
        totalSalesAmount: item.sales_amount || 0,
        salesRatio: item.sales_ratio.toString()
      };
    });

    return NextResponse.json(formattedData, { status: 200 });

  } catch (error) {
    console.error('상점별 제품 판매 비율 조회 오류:', error);
    return NextResponse.json(
      { error: '상점별 제품 판매 비율을 불러오는데 실패했습니다.' },
      { status: 500 }
    );
  }
}
</file>
  <file path="app/components/admin/EntityModals.tsx">
"use client";

import { AlertCircle, Mail } from 'lucide-react';

// 타입 정의
type KOL = {
  id: number;
  name: string;
  shop_name: string;
  region: string;
  status: string;
  email?: string;
};

type Shop = {
  id: number;
  shop_name: string;
  owner_name: string;
  kol_id?: number;
  region: string;
  status: string;
  email?: string;
};

interface KolModalProps {
  isOpen: boolean;
  onClose: () => void;
  selectedKol: KOL | null;
  kolForm: {
    name: string;
    shop_name: string;
    region: string;
    email: string;
  };
  setKolForm: (form: { name: string; shop_name: string; region: string; email: string }) => void;
  onSubmit: () => void;
}

interface ShopModalProps {
  isOpen: boolean;
  onClose: () => void;
  selectedShop: Shop | null;
  shopForm: {
    shop_name: string;
    owner_name: string;
    kol_id: string;
    region: string;
    email: string;
  };
  setShopForm: (form: { shop_name: string; owner_name: string; kol_id: string; region: string; email: string }) => void;
  onSubmit: () => void;
  kols: KOL[];
}

interface DeleteModalProps {
  isOpen: boolean;
  onClose: () => void;
  deleteType: 'kol' | 'shop' | null;
  confirmDelete: () => void;
  relatedShopsCount: number;
}

export function KolModal({
  isOpen,
  onClose,
  selectedKol,
  kolForm,
  setKolForm,
  onSubmit
}: KolModalProps) {
  if (!isOpen) return null;
  
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg shadow-xl p-6 w-full max-w-md">
        <h3 className="text-lg font-medium text-gray-900 mb-4">
          {selectedKol ? 'KOL 정보 수정' : 'KOL 추가'}
        </h3>
        <div className="space-y-4">
          <div>
            <label htmlFor="kol-name" className="block text-sm font-medium text-gray-700">
              이름 *
            </label>
            <input
              type="text"
              id="kol-name"
              value={kolForm.name}
              onChange={(e) => setKolForm({ ...kolForm, name: e.target.value })}
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
            />
          </div>
          <div>
            <label htmlFor="kol-shop" className="block text-sm font-medium text-gray-700">
              샵명 *
            </label>
            <input
              type="text"
              id="kol-shop"
              value={kolForm.shop_name}
              onChange={(e) => setKolForm({ ...kolForm, shop_name: e.target.value })}
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
            />
          </div>
          <div>
            <label htmlFor="kol-region" className="block text-sm font-medium text-gray-700">
              지역
            </label>
            <input
              type="text"
              id="kol-region"
              value={kolForm.region}
              onChange={(e) => setKolForm({ ...kolForm, region: e.target.value })}
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
            />
          </div>
          <div>
            <label htmlFor="kol-email" className="block text-sm font-medium text-gray-700 flex items-center">
              <Mail size={16} className="mr-1" /> 이메일 {selectedKol ? '(읽기 전용)' : '*'}
            </label>
            <input
              type="email"
              id="kol-email"
              value={kolForm.email}
              onChange={(e) => setKolForm({ ...kolForm, email: e.target.value })}
              readOnly={selectedKol !== null}
              className={`mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm ${selectedKol ? 'bg-gray-50 text-gray-500' : ''}`}
              placeholder={selectedKol ? undefined : '연결할 사용자 이메일 주소'}
            />
          </div>
        </div>
        <div className="mt-5 flex justify-end space-x-3">
          <button
            onClick={onClose}
            className="bg-white py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            취소
          </button>
          <button
            onClick={onSubmit}
            className="bg-blue-600 py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            {selectedKol ? '수정' : '추가'}
          </button>
        </div>
      </div>
    </div>
  );
}

export function ShopModal({
  isOpen,
  onClose,
  selectedShop,
  shopForm,
  setShopForm,
  onSubmit,
  kols
}: ShopModalProps) {
  if (!isOpen) return null;
  
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg shadow-xl p-6 w-full max-w-md">
        <h3 className="text-lg font-medium text-gray-900 mb-4">
          {selectedShop ? '전문점 정보 수정' : '전문점 추가'}
        </h3>
        <div className="space-y-4">
          <div>
            <label htmlFor="shop-name" className="block text-sm font-medium text-gray-700">
              전문점명 *
            </label>
            <input
              type="text"
              id="shop-name"
              value={shopForm.shop_name}
              onChange={(e) => setShopForm({ ...shopForm, shop_name: e.target.value })}
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
            />
          </div>
          <div>
            <label htmlFor="shop-owner" className="block text-sm font-medium text-gray-700">
              담당자 *
            </label>
            <input
              type="text"
              id="shop-owner"
              value={shopForm.owner_name}
              onChange={(e) => setShopForm({ ...shopForm, owner_name: e.target.value })}
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
            />
          </div>
          <div>
            <label htmlFor="shop-kol" className="block text-sm font-medium text-gray-700">
              KOL ID *
            </label>
            <select
              id="shop-kol"
              value={shopForm.kol_id}
              onChange={(e) => setShopForm({ ...shopForm, kol_id: e.target.value })}
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
            >
              <option value="">KOL 선택</option>
              {kols.map((kol) => (
                <option key={kol.id} value={kol.id}>
                  {kol.id} - {kol.name}
                </option>
              ))}
            </select>
          </div>
          <div>
            <label htmlFor="shop-region" className="block text-sm font-medium text-gray-700">
              지역
            </label>
            <input
              type="text"
              id="shop-region"
              value={shopForm.region}
              onChange={(e) => setShopForm({ ...shopForm, region: e.target.value })}
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
            />
          </div>
          <div>
            <label htmlFor="shop-email" className="block text-sm font-medium text-gray-700 flex items-center">
              <Mail size={16} className="mr-1" /> 이메일 (선택)
            </label>
            <input
              type="email"
              id="shop-email"
              value={shopForm.email}
              onChange={(e) => setShopForm({ ...shopForm, email: e.target.value })}
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
              placeholder="전문점 이메일 주소 (선택사항)"
            />
          </div>
        </div>
        <div className="mt-5 flex justify-end space-x-3">
          <button
            onClick={onClose}
            className="bg-white py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            취소
          </button>
          <button
            onClick={onSubmit}
            className="bg-blue-600 py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            {selectedShop ? '수정' : '추가'}
          </button>
        </div>
      </div>
    </div>
  );
}

export function DeleteModal({
  isOpen,
  onClose,
  deleteType,
  confirmDelete,
  relatedShopsCount
}: DeleteModalProps) {
  if (!isOpen) return null;
  
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg shadow-xl p-6 w-full max-w-md">
        <div className="flex items-center text-red-600 mb-4">
          <AlertCircle size={24} className="mr-2" />
          <h3 className="text-lg font-medium">삭제 확인</h3>
        </div>
        <p className="mb-4 text-gray-700">
          {deleteType === 'kol' 
            ? relatedShopsCount > 0 
              ? `이 KOL을 삭제하시겠습니까? ${relatedShopsCount}개의 전문점도 함께 삭제됩니다. 이 작업은 되돌릴 수 없습니다.`
              : '이 KOL을 삭제하시겠습니까? 이 작업은 되돌릴 수 없습니다.'
            : '이 전문점을 삭제하시겠습니까? 이 작업은 되돌릴 수 없습니다.'}
        </p>
        <div className="flex justify-end space-x-3">
          <button
            onClick={onClose}
            className="bg-white py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            취소
          </button>
          <button
            onClick={confirmDelete}
            className="bg-red-600 py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
          >
            삭제
          </button>
        </div>
      </div>
    </div>
  );
}
</file>
  <file path="app/components/admin/EntitySidebar.tsx">
"use client";

import { useState } from 'react';
import { 
  Users, Store, ChevronDown, ChevronRight, 
  PlusCircle, Search, Edit, Trash 
} from 'lucide-react';

// 타입 정의
type KOL = {
  id: number;
  name: string;
  shop_name: string;
  region: string;
  status: string;
};

type Shop = {
  id: number;
  shop_name: string;
  owner_name: string;
  kol_id?: number;
  region: string;
  status: string;
};

interface EntitySidebarProps {
  kols: KOL[];
  shopsByKol: {[key: number]: Shop[]};
  searchQuery: string;
  setSearchQuery: (query: string) => void;
  expandedKolId: number | null;
  toggleKol: (kolId: number) => void;
  onSelectKol: (kol: KOL) => void;
  onSelectShop: (shop: Shop) => void;
  openAddKolModal: () => void;
  openAddShopModal: (kolId: number) => void;
  openEditKolModal: (kol: KOL) => void;
  openEditShopModal: (shop: Shop) => void;
  openDeleteModal: (type: 'kol' | 'shop', id: number) => void;
  selectedEntityId: number | null;
  selectedEntityType: 'kol' | 'shop' | null;
}

export default function EntitySidebar({
  kols,
  shopsByKol,
  searchQuery,
  setSearchQuery,
  expandedKolId,
  toggleKol,
  onSelectKol,
  onSelectShop,
  openAddKolModal,
  openAddShopModal,
  openEditKolModal,
  openEditShopModal,
  openDeleteModal,
  selectedEntityId,
  selectedEntityType
}: EntitySidebarProps) {
  
  // 검색 필터링
  const filteredKols = kols.filter(
    (kol) =>
      kol.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      kol.shop_name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      (kol.region && kol.region.toLowerCase().includes(searchQuery.toLowerCase()))
  );
  
  return (
    <div className="w-full lg:w-80 bg-white shadow-sm border-r border-gray-200 flex flex-col h-full">
      <div className="p-4 border-b border-gray-200">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-lg font-semibold">엔티티 관리</h2>
          <button
            onClick={openAddKolModal}
            className="p-1 text-blue-600 hover:text-blue-800 rounded-full hover:bg-blue-50"
            title="KOL 추가">
            <PlusCircle size={18} />
          </button>
        </div>
        
        {/* 검색 필드 */}
        <div className="relative">
          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <Search size={16} className="text-gray-400" />
          </div>
          <input
            type="text"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            placeholder="검색..."
            className="block w-full pl-10 pr-3 py-2 text-sm border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
          />
        </div>
      </div>
      
      <div className="flex-1 overflow-y-auto">
        {filteredKols.length === 0 ? (
          <div className="p-4 text-center text-gray-500">
            검색 결과가 없습니다
          </div>
        ) : (
          <div className="divide-y divide-gray-200">
            {filteredKols.map((kol) => (
              <div key={kol.id} className="overflow-hidden">
                {/* KOL 행 */}
                <div 
                  className={`flex items-center justify-between p-3 hover:bg-gray-50 cursor-pointer ${
                    selectedEntityType === 'kol' && selectedEntityId === kol.id ? 'bg-blue-50' : ''
                  }`}
                >
                  <div 
                    className="flex items-center flex-1"
                    onClick={() => {
                      toggleKol(kol.id);
                      onSelectKol(kol);
                    }}
                  >
                    {expandedKolId === kol.id ? (
                      <ChevronDown size={16} className="text-gray-400 mr-2 flex-shrink-0" />
                    ) : (
                      <ChevronRight size={16} className="text-gray-400 mr-2 flex-shrink-0" />
                    )}
                    <div className="flex items-center">
                      <Users size={16} className="text-blue-600 mr-2" />
                      <div>
                        <h3 className="text-sm font-medium text-gray-900">{kol.shop_name}</h3>
                        <p className="text-xs text-gray-500">{kol.name}</p>
                      </div>
                    </div>
                  </div>
                  <div className="flex items-center">
                    {/* 전문점 개수 뱃지 */}
                    <span className="inline-flex items-center justify-center px-2 py-1 text-xs font-bold leading-none text-white bg-blue-500 rounded-full mr-2">
                      {shopsByKol[kol.id]?.length || 0}
                    </span>
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        openEditKolModal(kol);
                      }}
                      className="text-gray-500 hover:text-blue-600 p-1"
                    >
                      <Edit size={14} />
                    </button>
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        openDeleteModal('kol', kol.id);
                      }}
                      className="text-gray-500 hover:text-red-600 p-1"
                    >
                      <Trash size={14} />
                    </button>
                  </div>
                </div>
                
                {/* 확장된 전문점 목록 */}
                {expandedKolId === kol.id && (
                  <div className="bg-gray-50 pl-8 pr-3 pb-2">
                    {shopsByKol[kol.id] && shopsByKol[kol.id].length > 0 ? (
                      <ul className="space-y-1 py-1">
                        {shopsByKol[kol.id].map((shop) => (
                          <li 
                            key={shop.id}
                            className={`py-2 flex items-center justify-between hover:bg-gray-100 px-2 rounded-md text-sm ${
                              selectedEntityType === 'shop' && selectedEntityId === shop.id ? 'bg-blue-50' : ''
                            }`}
                            onClick={() => onSelectShop(shop)}
                          >
                            <div className="flex items-center">
                              <Store size={14} className="text-green-600 mr-2" />
                              <div>
                                <h4 className="text-sm font-medium text-gray-900">{shop.shop_name}</h4>
                                <p className="text-xs text-gray-500">{shop.owner_name}</p>
                              </div>
                            </div>
                            <div className="flex items-center space-x-1">
                              <button
                                onClick={(e) => {
                                  e.stopPropagation();
                                  openEditShopModal(shop);
                                }}
                                className="p-1 text-gray-500 hover:text-blue-600 rounded-full hover:bg-gray-100"
                                title="수정"
                              >
                                <Edit size={12} />
                              </button>
                              <button
                                onClick={(e) => {
                                  e.stopPropagation();
                                  openDeleteModal('shop', shop.id);
                                }}
                                className="p-1 text-gray-500 hover:text-red-600 rounded-full hover:bg-gray-100"
                                title="삭제"
                              >
                                <Trash size={12} />
                              </button>
                            </div>
                          </li>
                        ))}
                      </ul>
                    ) : (
                      <div className="py-2 text-center text-xs text-gray-500">
                        전문점 없음
                      </div>
                    )}
                    <div className="mt-1 mb-1 text-center">
                      <button
                        onClick={() => openAddShopModal(kol.id)}
                        className="inline-flex items-center text-xs font-medium text-blue-600 hover:text-blue-800"
                      >
                        <PlusCircle size={12} className="mr-1" />
                        전문점 추가
                      </button>
                    </div>
                  </div>
                )}
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}
</file>
  <file path="app/components/admin/EntityTable.tsx">
"use client";

import { useState, useEffect } from 'react';
import { 
  Users, Store, MapPin, Activity, Mail,
  Calendar, Clock, Edit, Trash, Check, X 
} from 'lucide-react';
import { createClient } from '@supabase/supabase-js';

// 타입 정의
type KOL = {
  id: number;
  name: string;
  shop_name: string;
  region: string;
  status: string;
  email?: string;
};

type Shop = {
  id: number;
  shop_name: string;
  owner_name: string;
  kol_id?: number;
  region: string;
  status: string;
  email?: string;
};

interface EntityTableProps {
  selectedEntityType: 'kol' | 'shop' | null;
  selectedEntity: KOL | Shop | null;
  kols: KOL[];
  openEditKolModal: (kol: KOL) => void;
  openEditShopModal: (shop: Shop) => void;
  openDeleteModal: (type: 'kol' | 'shop', id: number) => void;
}

export default function EntityTable({
  selectedEntityType,
  selectedEntity,
  kols,
  openEditKolModal,
  openEditShopModal,
  openDeleteModal
}: EntityTableProps) {
  const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL || '',
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || ''
  );

  // 인라인 편집 상태
  const [editMode, setEditMode] = useState(false);
  const [editField, setEditField] = useState<string | null>(null);
  const [editValue, setEditValue] = useState('');
  
  // 수정된 엔티티 데이터
  const [updatedEntity, setUpdatedEntity] = useState<KOL | Shop | null>(null);
  
  // 선택된 엔티티가 변경되면 수정 모드 초기화
  useEffect(() => {
    setEditMode(false);
    setEditField(null);
    setEditValue('');
    setUpdatedEntity(selectedEntity);
  }, [selectedEntity]);

  if (!selectedEntity) {
    return (
      <div className="flex items-center justify-center h-full bg-white rounded-lg p-8">
        <div className="text-center text-gray-500">
          <div className="mx-auto h-12 w-12 text-gray-400">
            <Users size={48} strokeWidth={1.5} />
          </div>
          <h3 className="mt-2 text-sm font-medium text-gray-900">데이터 없음</h3>
          <p className="mt-1 text-sm text-gray-500">
            왼쪽 사이드바에서 KOL 또는 전문점을 선택하세요
          </p>
        </div>
      </div>
    );
  }

  // 필드 편집 시작 함수
  const startEdit = (field: string, value: string) => {
    setEditMode(true);
    setEditField(field);
    setEditValue(value);
  };

  // 필드 편집 취소 함수
  const cancelEdit = () => {
    setEditMode(false);
    setEditField(null);
    setEditValue('');
  };

  // 필드 편집 저장 함수
  const saveEdit = async () => {
    if (!selectedEntity || !editField) return;
    
    const entityType = selectedEntityType === 'kol' ? 'kols' : 'shops';
    const updatedData = { [editField]: editValue };
    
    try {
      const { error } = await supabase
        .from(entityType)
        .update(updatedData)
        .eq('id', selectedEntity.id);
      
      if (error) {
        alert(`수정 중 오류가 발생했습니다: ${error.message}`);
        return;
      }
      
      // 로컬 상태 업데이트
      if (updatedEntity) {
        setUpdatedEntity({
          ...updatedEntity,
          [editField]: editValue
        });
      }
      
      // 편집 모드 종료
      setEditMode(false);
      setEditField(null);
    } catch (error) {
      console.error('업데이트 오류:', error);
      alert('업데이트 중 오류가 발생했습니다.');
    }
  };

  // 편집 가능한 필드 컴포넌트
  const EditableField = ({ 
    label,
    icon,
    field, 
    value,
    readOnly = false
  }: { 
    label: string; 
    icon: React.ReactNode;
    field: string; 
    value: string;
    readOnly?: boolean;
  }) => {
    const isEditing = editMode && editField === field && !readOnly;
    
    return (
      <div className="sm:col-span-1">
        <dt className="text-sm font-medium text-gray-500 flex items-center">
          {icon} {label}
        </dt>
        <dd 
          className={`mt-1 text-sm ${isEditing ? '' : 'text-gray-900 cursor-pointer hover:bg-gray-100 p-1 rounded'}`}
          onClick={() => !isEditing && !readOnly && startEdit(field, value)}
        >
          {isEditing ? (
            <div className="flex items-center">
              <input
                type="text"
                value={editValue}
                onChange={(e) => setEditValue(e.target.value)}
                className="block w-full border border-gray-300 rounded-md shadow-sm py-1 px-2 text-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                autoFocus
              />
              <button 
                onClick={saveEdit}
                className="ml-2 p-1 text-green-600 hover:text-green-800 rounded-full hover:bg-green-100"
              >
                <Check size={16} />
              </button>
              <button 
                onClick={cancelEdit}
                className="ml-1 p-1 text-red-600 hover:text-red-800 rounded-full hover:bg-red-100"
              >
                <X size={16} />
              </button>
            </div>
          ) : (
            <span className="inline-block w-full">
              {value || '없음'}
            </span>
          )}
        </dd>
      </div>
    );
  };

  if (selectedEntityType === 'kol') {
    const kol = updatedEntity as KOL || selectedEntity as KOL;
    return (
      <div className="bg-white shadow rounded-lg overflow-hidden">
        <div className="p-6 flex justify-between items-center border-b border-gray-200">
          <div className="flex items-center">
            <div className="h-12 w-12 rounded-full flex items-center justify-center bg-blue-100 text-blue-600">
              <Users size={24} />
            </div>
            <div className="ml-4">
              <h2 className="text-xl font-semibold text-gray-900">
                {kol.shop_name} - {kol.name}
              </h2>
              <p className="text-sm text-gray-500">KOL ID: {kol.id}</p>
            </div>
          </div>
          <div className="flex space-x-2">
            <button
              onClick={() => openEditKolModal(kol)}
              className="inline-flex items-center px-3 py-1.5 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
            >
              <Edit size={16} className="mr-1.5" />
              수정
            </button>
            <button
              onClick={() => openDeleteModal('kol', kol.id)}
              className="inline-flex items-center px-3 py-1.5 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
            >
              <Trash size={16} className="mr-1.5" />
              삭제
            </button>
          </div>
        </div>
        
        <div className="px-6 py-5">
          <h3 className="text-base font-semibold text-gray-900 mb-4">KOL 정보</h3>
          <div className="bg-gray-50 p-4 rounded-lg">
            <dl className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              <EditableField
                label="샵명"
                icon={<Store size={16} className="mr-1" />}
                field="shop_name"
                value={kol.shop_name}
              />
              
              <EditableField
                label="이름"
                icon={<Users size={16} className="mr-1" />}
                field="name"
                value={kol.name}
              />
              
              <EditableField
                label="지역"
                icon={<MapPin size={16} className="mr-1" />}
                field="region"
                value={kol.region || ''}
              />
              
              <EditableField
                label="이메일"
                icon={<Mail size={16} className="mr-1" />}
                field="email"
                value={kol.email || ''}
                readOnly={true}
              />
              
              <div className="sm:col-span-1">
                <dt className="text-sm font-medium text-gray-500 flex items-center">
                  <Activity size={16} className="mr-1" /> 상태
                </dt>
                <dd className="mt-1 text-sm text-gray-900">
                  <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                    kol.status === 'active' 
                      ? 'bg-green-100 text-green-800' 
                      : 'bg-red-100 text-red-800'
                    }`}>
                    {kol.status === 'active' ? '활성' : '비활성'}
                  </span>
                </dd>
              </div>
            </dl>
          </div>
        </div>
      </div>
    );
  } else if (selectedEntityType === 'shop') {
    const shop = updatedEntity as Shop || selectedEntity as Shop;
    const kolName = kols.find(k => k.id === shop.kol_id)?.name || '알 수 없음';
    
    return (
      <div className="bg-white shadow rounded-lg overflow-hidden">
        <div className="p-6 flex justify-between items-center border-b border-gray-200">
          <div className="flex items-center">
            <div className="h-12 w-12 rounded-full flex items-center justify-center bg-green-100 text-green-600">
              <Store size={24} />
            </div>
            <div className="ml-4">
              <h2 className="text-xl font-semibold text-gray-900">
                {shop.shop_name} - {shop.owner_name}
              </h2>
              <p className="text-sm text-gray-500">전문점 ID: {shop.id}</p>
            </div>
          </div>
          <div className="flex space-x-2">
            <button
              onClick={() => openEditShopModal(shop)}
              className="inline-flex items-center px-3 py-1.5 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
            >
              <Edit size={16} className="mr-1.5" />
              수정
            </button>
            <button
              onClick={() => openDeleteModal('shop', shop.id)}
              className="inline-flex items-center px-3 py-1.5 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
            >
              <Trash size={16} className="mr-1.5" />
              삭제
            </button>
          </div>
        </div>
        
        <div className="px-6 py-5">
          <h3 className="text-base font-semibold text-gray-900 mb-4">전문점 정보</h3>
          <div className="bg-gray-50 p-4 rounded-lg">
            <dl className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              <EditableField
                label="전문점명"
                icon={<Store size={16} className="mr-1" />}
                field="shop_name"
                value={shop.shop_name}
              />
              
              <EditableField
                label="담당자"
                icon={<Users size={16} className="mr-1" />}
                field="owner_name"
                value={shop.owner_name}
              />
              
              <div className="sm:col-span-1">
                <dt className="text-sm font-medium text-gray-500 flex items-center">
                  <Users size={16} className="mr-1" /> KOL
                </dt>
                <dd className="mt-1 text-sm text-gray-900">
                  {shop.kol_id ? `${kolName} (ID: ${shop.kol_id})` : '지정되지 않음'}
                </dd>
              </div>
              
              <EditableField
                label="지역"
                icon={<MapPin size={16} className="mr-1" />}
                field="region"
                value={shop.region || ''}
              />
              
              <EditableField
                label="이메일"
                icon={<Mail size={16} className="mr-1" />}
                field="email"
                value={shop.email || ''}
                readOnly={false}
              />
              
              <div className="sm:col-span-1">
                <dt className="text-sm font-medium text-gray-500 flex items-center">
                  <Activity size={16} className="mr-1" /> 상태
                </dt>
                <dd className="mt-1 text-sm text-gray-900">
                  <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                    shop.status === 'active' 
                      ? 'bg-green-100 text-green-800' 
                      : 'bg-red-100 text-red-800'
                    }`}>
                    {shop.status === 'active' ? '활성' : '비활성'}
                  </span>
                </dd>
              </div>
            </dl>
          </div>
        </div>
      </div>
    );
  }
  
  return null;
}
</file>
  <file path="app/components/admin/UserModals.tsx">
"use client";

import { AlertCircle, Pencil, Trash2, UserCheck } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { 
  Select, 
  SelectContent, 
  SelectItem, 
  SelectTrigger, 
  SelectValue 
} from '@/components/ui/select';

// 사용자 타입 정의
type User = {
  id: string;
  email: string;
  firstName?: string;
  lastName?: string;
  role?: string;
  createdAt: string;
};

// 추가 모달 인터페이스
interface AddUserModalProps {
  isOpen: boolean;
  onClose: () => void;
  userForm: {
    email: string;
    name: string;
    shopName: string;
    role: string;
  };
  setUserForm: (form: {
    email: string;
    name: string;
    shopName: string;
    role: string;
  }) => void;
  onSubmit: () => void;
}

// 역할 수정 모달 인터페이스
interface EditRoleModalProps {
  isOpen: boolean;
  onClose: () => void;
  selectedUser: User | null;
  editRole: string;
  setEditRole: (role: string) => void;
  onSubmit: () => void;
}

// 삭제 확인 모달 인터페이스
interface DeleteModalProps {
  isOpen: boolean;
  onClose: () => void;
  selectedUser: User | null;
  onSubmit: () => void;
}

export function AddUserModal({
  isOpen,
  onClose,
  userForm,
  setUserForm,
  onSubmit
}: AddUserModalProps) {
  if (!isOpen) return null;
  
  return (
    <div className="fixed inset-0 bg-black bg-opacity-80 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg shadow-xl border-2 border-gray-300 p-6 w-full max-w-md">
        <h3 className="text-lg font-medium text-gray-900 mb-4">
          새 사용자 추가
        </h3>
        <p className="text-sm text-gray-500 mb-4">
          이메일만 등록하면 사용자가 나중에 직접 가입하거나 로그인할 때 계정을 설정할 수 있습니다.
        </p>
        <div className="space-y-4">
          <div>
            <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">
              이메일 *
            </label>
            <Input
              id="email"
              type="email"
              value={userForm.email}
              onChange={(e) => setUserForm({ ...userForm, email: e.target.value })}
              placeholder="user@example.com"
              required
            />
          </div>
          
          <div>
            <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-1">
              이름 (선택)
            </label>
            <Input
              id="name"
              value={userForm.name}
              onChange={(e) => setUserForm({ ...userForm, name: e.target.value })}
              placeholder="홍길동"
            />
          </div>
          
          <div>
            <label htmlFor="role" className="block text-sm font-medium text-gray-700 mb-1">
              역할 *
            </label>
            <Select
              value={userForm.role}
              onValueChange={(role) => setUserForm({ ...userForm, role })}
            >
              <SelectTrigger id="role">
                <SelectValue placeholder="역할 선택" />
              </SelectTrigger>
              <SelectContent className="bg-white border-2 border-gray-300 shadow-lg">
                <SelectItem value="admin">본사관리자</SelectItem>
                <SelectItem value="kol">KOL</SelectItem>
              </SelectContent>
            </Select>
          </div>
          
          {userForm.role === 'kol' && (
            <div>
              <label htmlFor="shopName" className="block text-sm font-medium text-gray-700 mb-1">
                샵명 (선택)
              </label>
              <Input
                id="shopName"
                value={userForm.shopName}
                onChange={(e) => setUserForm({ ...userForm, shopName: e.target.value })}
                placeholder="홍길동의 매장"
              />
            </div>
          )}
        </div>
        <div className="mt-5 flex justify-end space-x-3">
          <Button
            variant="outline"
            onClick={onClose}
          >
            취소
          </Button>
          <Button
            onClick={onSubmit}
            className="bg-blue-600 hover:bg-blue-700"
          >
            <UserCheck className="mr-2 h-4 w-4" />
            사용자 추가
          </Button>
        </div>
      </div>
    </div>
  );
}

export function EditRoleModal({
  isOpen,
  onClose,
  selectedUser,
  editRole,
  setEditRole,
  onSubmit
}: EditRoleModalProps) {
  if (!isOpen) return null;
  
  return (
    <div className="fixed inset-0 bg-black bg-opacity-80 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg shadow-xl border-2 border-gray-300 p-6 w-full max-w-md">
        <h3 className="text-lg font-medium text-gray-900 mb-4">
          사용자 역할 변경
        </h3>
        <p className="text-sm text-gray-500 mb-4">
          {selectedUser?.email} 사용자의 역할을 변경합니다.
        </p>
        <div className="space-y-4">
          <div>
            <label htmlFor="edit-role" className="block text-sm font-medium text-gray-700 mb-1">
              역할
            </label>
            <Select value={editRole} onValueChange={setEditRole}>
              <SelectTrigger id="edit-role">
                <SelectValue placeholder="역할 선택" />
              </SelectTrigger>
              <SelectContent className="bg-white border-2 border-gray-300 shadow-lg">
                <SelectItem value="admin">본사관리자</SelectItem>
                <SelectItem value="kol">KOL</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>
        <div className="mt-5 flex justify-end space-x-3">
          <Button
            variant="outline"
            onClick={onClose}
          >
            취소
          </Button>
          <Button
            onClick={onSubmit}
            className="bg-blue-600 hover:bg-blue-700"
          >
            <Pencil className="mr-2 h-4 w-4" />
            변경 저장
          </Button>
        </div>
      </div>
    </div>
  );
}

export function DeleteUserModal({
  isOpen,
  onClose,
  selectedUser,
  onSubmit
}: DeleteModalProps) {
  if (!isOpen) return null;
  
  return (
    <div className="fixed inset-0 bg-black bg-opacity-80 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg shadow-xl border-2 border-gray-300 p-6 w-full max-w-md">
        <div className="flex items-center text-red-600 mb-4">
          <AlertCircle size={24} className="mr-2" />
          <h3 className="text-lg font-medium">사용자 삭제 확인</h3>
        </div>
        <p className="mb-4 text-gray-700">
          정말 {selectedUser?.email} 사용자를 삭제하시겠습니까? 이 작업은 취소할 수 없습니다.
        </p>
        <div className="flex justify-end space-x-3">
          <Button
            variant="outline"
            onClick={onClose}
          >
            취소
          </Button>
          <Button
            variant="destructive"
            onClick={onSubmit}
          >
            <Trash2 className="mr-2 h-4 w-4" />
            사용자 삭제
          </Button>
        </div>
      </div>
    </div>
  );
}
</file>
  <file path="app/components/dashboard/MetricCard.tsx">
'use client';

import { ReactNode } from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "../../../components/ui/card";
import { TrendingUp } from "lucide-react";

interface MetricCardProps {
  title: string;
  value: string | number;
  icon: ReactNode;
  iconBgColor: string;
  iconColor: string;
  trend?: {
    value: string | number;
    direction: 'up' | 'down';
    text?: string;
  };
  footer?: string;
}

export default function MetricCard({
  title,
  value,
  icon,
  iconBgColor,
  iconColor,
  trend,
  footer
}: MetricCardProps) {
  const formattedValue = typeof value === 'number' ? value.toLocaleString() : value;
  
  return (
    <Card>
      <CardHeader className="flex flex-row items-center justify-between pb-2">
        <CardTitle className="text-sm font-medium">{title}</CardTitle>
        <div className={`rounded-full ${iconBgColor} p-2 ${iconColor}`}>
          {icon}
        </div>
      </CardHeader>
      <CardContent>
        <div className="text-2xl font-bold">
          {formattedValue}
        </div>
        {trend && (
          <div className={`mt-1 flex items-center text-xs ${trend.direction === 'up' ? 'text-green-600' : 'text-red-600'}`}>
            <TrendingUp className="mr-1 h-3 w-3" />
            <span>{trend.text || `전월 대비 ${trend.value}${trend.direction === 'up' ? '↑' : '↓'}`}</span>
          </div>
        )}
        {footer && (
          <div className="mt-1 text-xs text-muted-foreground">
            {footer}
          </div>
        )}
      </CardContent>
    </Card>
  );
}
</file>
  <file path="app/components/layout/KolFooter.tsx">
'use client';

import Link from 'next/link';

export default function KolFooter() {
  return (
    <footer className="mt-8 flex flex-col items-center justify-between border-t border-muted pt-6 text-xs text-muted-foreground md:flex-row">
      <div>© 2025 BioFox CRM. All rights reserved.</div>
      <div className="mt-4 flex space-x-4 md:mt-0">
        <Link href="#" className="hover:text-primary hover:underline">
          이용약관
        </Link>
        <Link href="#" className="hover:text-primary hover:underline">
          개인정보처리방침
        </Link>
        <Link href="#" className="hover:text-primary hover:underline">
          고객지원
        </Link>
      </div>
    </footer>
  );
}
</file>
  <file path="app/components/layout/KolSidebar.tsx">
'use client';

import Link from 'next/link';
import { Home, Store, FileText, Bell } from "lucide-react";
import { Separator } from "../../../components/ui/separator";

export default function KolSidebar() {
  return (
    <aside className="hidden border-r bg-white shadow-sm md:block md:w-52">
      <div className="flex h-full flex-col p-3 md:p-4">
        <div className="mb-5">
          <p className="px-2 text-xs font-medium text-muted-foreground">메뉴</p>
          <nav className="mt-2 space-y-1">
            <Link href="/kol-new" className="flex items-center rounded-md px-2 py-1.5 text-sm font-medium hover:bg-muted">
              <Home className="mr-2 h-4 w-4 text-primary" />
              <span>대시보드</span>
            </Link>
            <Link href="/kol-new/stores" className="flex items-center rounded-md px-2 py-1.5 text-sm font-medium hover:bg-muted">
              <Store className="mr-2 h-4 w-4 text-muted-foreground" />
              <span>전문점 관리</span>
            </Link>
            <Link href="/kol-new/activities" className="flex items-center rounded-md px-2 py-1.5 text-sm font-medium hover:bg-muted">
              <FileText className="mr-2 h-4 w-4 text-muted-foreground" />
              <span>영업 일지</span>
            </Link>
          </nav>
        </div>
        <Separator className="my-3" />
        <div>
          <p className="px-2 text-xs font-medium text-muted-foreground">시스템</p>
          <nav className="mt-2 space-y-1">
            <Link href="/kol-new/notifications" className="flex items-center rounded-md px-2 py-1.5 text-sm font-medium hover:bg-muted">
              <Bell className="mr-2 h-4 w-4 text-muted-foreground" />
              <span>알림</span>
            </Link>
          </nav>
        </div>
      </div>
    </aside>
  );
}
</file>
  <file path="app/signin/[[...rest]]/page.tsx">
import { SignIn } from "@clerk/nextjs";
import Link from "next/link";

export const metadata = {
  title: "로그인 - BIOFOX KOL",
  description: "BIOFOX KOL 계정으로 로그인하세요.",
};

export const viewport = {
  width: 'device-width',
  initialScale: 1,
  maximumScale: 1,
};

export default function SignInPage() {
  return (
    <div className="flex min-h-screen flex-col items-center justify-center py-12 px-4 sm:px-6 lg:px-8" style={{ 
      background: 'linear-gradient(to bottom right, white, rgba(192, 166, 227, 0.1))' 
    }}>
      <div className="w-full max-w-md">
        <div className="flex flex-col items-center mb-8">
          <Link href="/" className="mb-6">
            <h1 className="text-4xl font-bold" style={{ 
              backgroundImage: 'linear-gradient(to right, #6D28D9, #8B5CF6)',
              WebkitBackgroundClip: 'text',
              WebkitTextFillColor: 'transparent',
              backgroundClip: 'text'
            }}>
              BIOFOX KOL
            </h1>
          </Link>
          
        </div>
        
        <div className="card-gradient">
          <SignIn 
            appearance={{
              elements: {
                formButtonPrimary: "btn-primary",
                card: "shadow-none bg-transparent",
                headerTitle: "text-xl font-semibold",
                headerSubtitle: "",
                socialButtonsBlockButton: "border border-solid hover:border-[#C0A6E3]",
                socialButtonsBlockButtonText: "text-gray-600",
                formFieldLabel: "text-gray-700",
                formFieldInput: "border-solid focus:border-[#6D28D9] focus:ring-1 focus:ring-[#6D28D9]",
                footerActionLink: "text-[#6D28D9] hover:text-[#8B5CF6]",
                identityPreviewText: "text-gray-700",
                identityPreviewEditButton: "text-[#6D28D9] hover:text-[#8B5CF6]",
                rootBox: "w-full",
                footer: "pb-0",
                main: "p-0 sm:p-0"
              },
            }}
            path="/signin"
            routing="path"
            signUpUrl="/signup"
            fallbackRedirectUrl="/dashboard" // 로그인 성공 후 dashboard로 리다이렉션 (미들웨어에서 역할별로 처리)
            developmentMode={false}
          />
        </div>
      </div>
    </div>
  );
}
</file>
  <file path="app/api/admin/users/route.ts">
/**
 * 사용자 관리 API
 * 관리자가 사용자를 생성, 조회, 수정, 삭제할 수 있는 API를 제공합니다.
 */
import { NextRequest, NextResponse } from "next/server";
import { db } from "../../../../db";
import { users, kols } from "../../../../db/schema";
import { eq } from "drizzle-orm";
import { currentUser } from "@clerk/nextjs/server";

/**
 * GET 요청 처리 - 모든 사용자 목록을 조회합니다.
 */
export async function GET(req: NextRequest) {
  try {
    // 관리자 권한 확인
    const user = await currentUser();
    if (!user) {
      return NextResponse.json(
        { error: "인증이 필요합니다." },
        { status: 401 }
      );
    }

    // TODO: 실제 프로덕션에서는 사용자 권한을 확인하는 로직 추가 필요

    // 사용자 목록 조회
    const userList = await db.select().from(users);
    return NextResponse.json({ users: userList });
  } catch (error) {
    console.error("사용자 목록 조회 실패:", error);
    return NextResponse.json(
      { error: "사용자 목록을 조회하는 중 오류가 발생했습니다." },
      { status: 500 }
    );
  }
}

/**
 * POST 요청 처리 - 새 사용자를 등록합니다.
 * 이 API는 데이터베이스에만 사용자 정보를 저장합니다.
 * 사용자는 나중에 동일한 이메일로 가입 시 데이터베이스의 정보와 연결됩니다.
 */
export async function POST(req: NextRequest) {
  try {
    // 관리자 권한 확인
    const user = await currentUser();
    if (!user) {
      return NextResponse.json(
        { error: "인증이 필요합니다." },
        { status: 401 }
      );
    }

    // TODO: 실제 프로덕션에서는 사용자 권한을 확인하는 로직 추가 필요

    // 요청 본문 파싱
    const { email, role, name, shopName } = await req.json();

    // 필수 필드 검증
    if (!email || !role) {
      return NextResponse.json(
        { error: "email, role 필드는 필수입니다." },
        { status: 400 }
      );
    }

    // 이메일 중복 확인 - Supabase
    const existingUser = await db
      .select()
      .from(users)
      .where(eq(users.email, email));

    if (existingUser.length > 0) {
      return NextResponse.json(
        { error: "이미 등록된 이메일입니다." },
        { status: 409 }
      );
    }

    // 임시 클럭 ID 생성 (사용자가 실제로 가입할 때 업데이트됨)
    const tempClerkId = `pending_${Date.now()}`;
    const displayName = name || email.split('@')[0]; // 이름이 없으면 이메일 아이디 사용

    // 1. 데이터베이스에 사용자 등록
    const newUser = await db.insert(users).values({
      clerkId: tempClerkId,
      email,
      role,
      name: displayName,
    }).returning();

    // 2. KOL 역할인 경우 KOL 정보 추가 등록
    if (role === 'kol' && newUser.length > 0) {
      // 샵명이 제공되었으면 해당 값을 사용하고, 그렇지 않으면 기본값 생성
      const kolShopName = shopName || `${displayName}의 매장`;
      
      await db.insert(kols).values({
        userId: newUser[0].id,
        name: displayName,
        shopName: kolShopName,
        region: '', // 빈 값으로 시작
        status: 'pending', // 상태를 pending으로 설정
      });
    }
    
    // 나중에 필요하다면 사용자에게 초대 이메일 발송하는 로직 추가 가능

    return NextResponse.json({ 
      user: newUser[0],
      message: "사용자가 데이터베이스에 등록되었습니다. 사용자는 동일한 이메일 주소로 가입하면 이 계정과 연결됩니다."
    }, { status: 201 });
  } catch (error) {
    console.error("사용자 등록 실패:", error);
    // 오류 유형에 따라 다른 메시지 반환
    const errorMessage = error instanceof Error 
      ? `사용자 등록 중 오류가 발생했습니다: ${error.message}`
      : "사용자 등록 중 알 수 없는 오류가 발생했습니다.";
    
    return NextResponse.json(
      { error: errorMessage },
      { status: 500 }
    );
  }
}

/**
 * DELETE 요청 처리 - 사용자를 삭제합니다.
 * 이 API는 데이터베이스에서만 사용자 정보를 삭제합니다.
 * 실제 Clerk 사용자 삭제는 별도의 API를 통해 처리해야 합니다.
 */
export async function DELETE(req: NextRequest) {
  try {
    // 관리자 권한 확인
    const user = await currentUser();
    if (!user) {
      return NextResponse.json(
        { error: "인증이 필요합니다." },
        { status: 401 }
      );
    }

    // TODO: 실제 프로덕션에서는 사용자 권한을 확인하는 로직 추가 필요

    // URL에서 사용자 ID 추출
    const url = new URL(req.url);
    const id = url.searchParams.get("id");

    if (!id) {
      return NextResponse.json(
        { error: "사용자 ID가 필요합니다." },
        { status: 400 }
      );
    }

    const userId = parseInt(id);

    try {
      // 트랜잭션으로 처리 - 최신 drizzle-orm은 트랜잭션을 지원하지만, 
      // 여기서는 ON DELETE CASCADE를 사용하여 DB 레벨에서 처리
      const deletedUser = await db
        .delete(users)
        .where(eq(users.id, userId))
        .returning();

      if (deletedUser.length === 0) {
        return NextResponse.json(
          { error: "사용자를 찾을 수 없습니다." },
          { status: 404 }
        );
      }

      return NextResponse.json({ success: true });
    } catch (deleteError) {
      console.error("사용자 삭제 세부 오류:", deleteError);
      // PostgreSQL 외래 키 제약조건 오류 처리
      if (deleteError instanceof Error && deleteError.message.includes("violates foreign key constraint")) {
        return NextResponse.json(
          { 
            error: "사용자를 삭제할 수 없습니다: 이 사용자와 연결된 데이터가 있습니다.",
            details: "사용자를 삭제하기 전에 연결된 KOL 정보를 먼저 삭제해야 합니다."
          },
          { status: 409 }
        );
      }
      throw deleteError; // 다른 오류는 상위 catch 블록으로 전달
    }
  } catch (error) {
    console.error("사용자 삭제 실패:", error);
    // 오류 유형에 따라 다른 메시지 반환
    const errorMessage = error instanceof Error 
      ? `사용자 삭제 중 오류가 발생했습니다: ${error.message}`
      : "사용자 삭제 중 알 수 없는 오류가 발생했습니다.";
    
    return NextResponse.json(
      { error: errorMessage },
      { status: 500 }
    );
  }
}
</file>
  <file path="app/api/kol-new/shops/route.ts">
import { NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase';
import { auth } from '@clerk/nextjs/server';
import { getCurrentDate } from '@/lib/date-utils';

// 매출 데이터 타입 정의
interface MonthlySales {
  shop_id: number;
  total_sales: number;
  product_sales: number;
  device_sales: number;
  commission: number;
}

// KOL 전문점 목록 API 라우트
export async function GET() {
  try {
    // 인증 확인
    const { userId } = await auth();
    if (!userId) {
      return NextResponse.json(
        { error: '인증되지 않은 요청입니다.' },
        { status: 401 }
      );
    }

    console.log(`전문점 API 요청: Clerk ID=${userId}`);

    // 현재 월 계산 (YYYY-MM 형식)
    const currentDate = getCurrentDate();
    const currentMonth = currentDate.substring(0, 7);

    // KOL ID 조회 - 로그인한 사용자의 KOL ID 가져오기
    let { data: userData, error: userError } = await supabase
      .from('users')
      .select('id, name, role')
      .eq('clerk_id', userId)
      .single();

    if (userError) {
      console.error(`사용자 정보 조회 오류(clerk_id=${userId}):`, userError);
      
      // 이메일로 사용자 검색 시도 (대비책)
      const { data: userByEmail, error: emailError } = await supabase
        .rpc('find_user_by_clerk_metadata', { clerk_user_id: userId });
        
      if (emailError || !userByEmail) {
        console.error('이메일로 사용자 검색 실패:', emailError);
        return NextResponse.json(
          { error: '사용자 정보를 찾을 수 없습니다. 관리자에게 문의하세요.' },
          { status: 404 }
        );
      }
      
      // 이메일로 찾은 경우 사용자 정보 업데이트
      const { error: updateError } = await supabase
        .from('users')
        .update({ clerk_id: userId })
        .eq('id', userByEmail.id);
        
      if (updateError) {
        console.error('사용자 정보 업데이트 실패:', updateError);
      } else {
        console.log(`사용자 정보 업데이트 성공: ID=${userByEmail.id}, Clerk ID=${userId}`);
      }
      
      // 업데이트된 사용자 정보 사용
      userData = userByEmail;
    }

    if (!userData) {
      console.error(`사용자 정보 없음(clerk_id=${userId})`);
      return NextResponse.json(
        { error: '사용자 정보를 찾을 수 없습니다. 관리자에게 문의하세요.' },
        { status: 404 }
      );
    }

    // 사용자 역할 확인
    if (userData.role !== 'kol') {
      console.error(`비KOL 사용자 접근(userId=${userData.id}, role=${userData.role})`);
      return NextResponse.json(
        { error: 'KOL 역할이 아닙니다.' },
        { status: 403 }
      );
    }

    let { data: kolData, error: kolError } = await supabase
      .from('kols')
      .select('id, name')
      .eq('user_id', userData.id)
      .single();

    if (kolError) {
      console.error(`KOL 정보 조회 오류(user_id=${userData.id}):`, kolError);
      return NextResponse.json(
        { error: 'KOL 정보를 찾을 수 없습니다. 관리자에게 문의하세요.' },
        { status: 404 }
      );
    }

    if (!kolData) {
      console.error(`KOL 정보 없음(user_id=${userData.id})`);
      return NextResponse.json(
        { error: 'KOL 정보를 찾을 수 없습니다. 관리자에게 문의하세요.' },
        { status: 404 }
      );
    }

    console.log(`KOL 조회 성공: ID=${kolData.id}, Name=${kolData.name}`);

    // KOL 소속 전문점 정보 조회
    const { data: shops, error: shopsError } = await supabase
      .from('shops')
      .select('id, owner_name, shop_name, region, status, created_at, is_owner_kol')
      .eq('kol_id', kolData.id)
      .order('created_at', { ascending: false });

    if (shopsError) {
      console.error(`전문점 정보 조회 오류(kol_id=${kolData.id}):`, shopsError);
      return NextResponse.json(
        { error: '전문점 정보를 조회하는 중 오류가 발생했습니다.' },
        { status: 500 }
      );
    }

    if (!shops || shops.length === 0) {
      console.log(`전문점 데이터 없음(kol_id=${kolData.id})`);
      return NextResponse.json([]);
    }

    // 전문점별 월간 매출 데이터 조회 (새로운 테이블 사용)
    const { data: salesData, error: salesError } = await supabase
      .from('shop_sales_metrics')
      .select('shop_id, total_sales, product_sales, device_sales, commission')
      .eq('year_month', currentMonth);

    if (salesError) {
      console.error(`매출 데이터 조회 오류(kol_id=${kolData.id}, month=${currentMonth}):`, salesError);
      return NextResponse.json(
        { error: '매출 데이터를 조회하는 중 오류가 발생했습니다.' },
        { status: 500 }
      );
    }

    // 매출 데이터를 맵으로 변환하여 조회 효율성 높이기
    const salesByShop: Record<number, any> = {};
    if (salesData && salesData.length > 0) {
      salesData.forEach((sale: any) => {
        salesByShop[sale.shop_id] = sale;
      });
    }

    // 전문점 데이터와 매출 데이터 조합
    const shopsWithSales = shops.map(shop => {
      // shops 테이블에 is_owner_kol 필드가 있으면 사용, 없으면 이름 비교로 판단
      const is_owner_kol = shop.is_owner_kol !== undefined && shop.is_owner_kol !== null 
        ? shop.is_owner_kol 
        : (shop.owner_name === kolData.name);
      
      return {
        id: shop.id,
        ownerName: shop.owner_name,
        shop_name: shop.shop_name || shop.owner_name, // shop_name이 없는 경우 owner_name을 사용
        region: shop.region || '',
        status: shop.status,
        createdAt: shop.created_at,
        is_owner_kol, // 직영점 여부 추가
        sales: {
          total: salesByShop[shop.id]?.total_sales || 0,
          product: salesByShop[shop.id]?.product_sales || 0,
          device: salesByShop[shop.id]?.device_sales || 0,
          commission: salesByShop[shop.id]?.commission || 0,
          hasOrdered: Boolean(salesByShop[shop.id] && salesByShop[shop.id].total_sales > 0)
        }
      };
    });

    // 매출 기준 내림차순 정렬
    const sortedShops = shopsWithSales.sort((a, b) => b.sales.total - a.sales.total);

    console.log(`전문점 데이터 조회 완료: KOL ID=${kolData.id}, 전문점 수=${sortedShops.length}`);
    return NextResponse.json(sortedShops);
  } catch (error) {
    console.error('KOL 전문점 목록 조회 에러:', error);
    const errorMessage = error instanceof Error 
      ? `데이터 조회 중 오류가 발생했습니다: ${error.message}` 
      : '데이터 조회 중 알 수 없는 오류가 발생했습니다.';
      
    return NextResponse.json(
      { error: errorMessage },
      { status: 500 }
    );
  }
}
</file>
  <file path="app/api/webhooks/clerk/route.ts">
import { Webhook } from 'svix';
import { headers } from 'next/headers';
import { NextResponse } from 'next/server';
import { serverSupabase as supabase } from '@/lib/supabase';
import { WebhookEvent } from '@clerk/nextjs/server';
import clerkApi from '@/lib/clerk-direct-api';

export async function POST(req: Request) {
  // Next.js 15의 비동기 headers API 처리
  const headersList = await headers();
  
  // 환경 변수 검증
  const CLERK_WEBHOOK_SECRET = process.env.CLERK_WEBHOOK_SECRET;
  
  if (!CLERK_WEBHOOK_SECRET) {
    console.error('CLERK_WEBHOOK_SECRET 환경 변수가 설정되지 않았습니다.');
    return NextResponse.json(
      { error: 'Webhook secret is not configured' },
      { status: 500 }
    );
  }

  // svix-id, svix-timestamp, svix-signature 헤더 가져오기
  const svixId = headersList.get('svix-id');
  const svixTimestamp = headersList.get('svix-timestamp');
  const svixSignature = headersList.get('svix-signature');

  // 필수 헤더 검증
  if (!svixId || !svixTimestamp || !svixSignature) {
    console.error('웹훅 헤더 누락:', { svixId, svixTimestamp, svixSignature });
    return NextResponse.json(
      { error: 'Missing svix headers' },
      { status: 400 }
    );
  }

  // 요청 본문 가져오기
  const payload = await req.json();
  const body = JSON.stringify(payload);

  // svix 인스턴스 생성 및 서명 검증
  let evt: WebhookEvent;
  try {
    const wh = new Webhook(CLERK_WEBHOOK_SECRET);
    evt = wh.verify(body, {
      'svix-id': svixId,
      'svix-timestamp': svixTimestamp,
      'svix-signature': svixSignature,
    }) as WebhookEvent;
  } catch (err) {
    console.error('웹훅 서명 검증 실패:', err);
    return NextResponse.json(
      { error: 'Invalid signature' },
      { status: 400 }
    );
  }

  // 이벤트 유형 및 데이터 가져오기
  const { type, data } = evt;
  console.log(`웹훅 이벤트: ${type}`);
  
  // 사용자 관련 이벤트 처리
  if (type === 'user.created' || type === 'user.updated' || type === 'user.deleted') {
    try {
      if (type === 'user.deleted') {
        // 사용자 삭제 이벤트 처리
        const clerkId = data.id;
        console.log(`사용자 삭제 이벤트: Clerk ID=${clerkId}`);
        
        // Supabase에서 사용자 찾기
        const { data: userData, error: userError } = await supabase
          .from('users')
          .select('id')
          .eq('clerk_id', clerkId)
          .single();
        
        if (userError) {
          console.log(`삭제할 사용자를 찾을 수 없음: clerk_id=${clerkId}`);
          return NextResponse.json({ message: 'User not found for deletion' });
        }
        
        // 사용자 clerk_id를 삭제됨으로 표시
        const { error: updateError } = await supabase
          .from('users')
          .update({ clerk_id: `deleted_${Date.now()}` })
          .eq('id', userData.id);
        
        if (updateError) {
          console.error(`사용자 삭제 상태 업데이트 실패(ID=${userData.id}):`, updateError);
          return NextResponse.json({ error: updateError.message }, { status: 500 });
        }
        
        console.log(`사용자 삭제 처리 완료: ID=${userData.id}`);
        return NextResponse.json({ success: true, message: 'User marked as deleted' });
      }
      
      // 사용자 생성 또는 업데이트 이벤트 처리
      if (!data.email_addresses || data.email_addresses.length === 0) {
        console.error('이메일 주소 없음:', data);
        return NextResponse.json({ error: 'No email address found' }, { status: 400 });
      }
      
      const clerkId = data.id;
      const userEmail = data.email_addresses[0].email_address;
      const userName = (data.first_name && data.last_name) 
        ? `${data.first_name} ${data.last_name}`
        : data.first_name || '';
      
      console.log(`사용자 ${type === 'user.created' ? '생성' : '업데이트'}: ID=${clerkId}, 이메일=${userEmail}, 이름=${userName || 'N/A'}`);
      
      // 이메일로 직접 사용자 검색 (가장 정확한 방법)
      const { data: userByEmail, error: emailError } = await supabase
        .from('users')
        .select('id, email, role, clerk_id, name')
        .eq('email', userEmail)
        .maybeSingle();
      
      if (emailError) {
        console.error(`이메일 검색 오류(${userEmail}):`, emailError);
      }
      
      if (userByEmail) {
        console.log(`이메일로 사용자 발견: ID=${userByEmail.id}, 기존 Clerk ID=${userByEmail.clerk_id}`);
        
        // 사용자 정보 업데이트 필요 여부 확인
        const needsUpdate = !userByEmail.clerk_id || 
                            userByEmail.clerk_id.startsWith('pending_') || 
                            userByEmail.clerk_id !== clerkId;
                            
        if (needsUpdate) {
          const { error: updateError } = await supabase
            .from('users')
            .update({ 
              clerk_id: clerkId,
              name: userName || userByEmail.name || userEmail.split('@')[0]
            })
            .eq('id', userByEmail.id);
          
          if (updateError) {
            console.error(`사용자 정보 업데이트 실패(ID=${userByEmail.id}):`, updateError);
          } else {
            console.log(`사용자 정보 업데이트 성공: ID=${userByEmail.id}, Clerk ID=${clerkId}`);
            
            // KOL 정보 확인 및 필요시 생성
            if (userByEmail.role === 'kol') {
              const { data: kolData, error: kolError } = await supabase
                .from('kols')
                .select('id')
                .eq('user_id', userByEmail.id)
                .maybeSingle();
              
              if (kolError) {
                console.error(`KOL 정보 조회 오류(user_id=${userByEmail.id}):`, kolError);
              }
              
              if (!kolData) {
                // KOL 정보 자동 생성
                const displayName = userName || userByEmail.name || userEmail.split('@')[0];
                const { data: newKolData, error: createKolError } = await supabase
                  .from('kols')
                  .insert({
                    user_id: userByEmail.id,
                    name: displayName,
                    shop_name: `${displayName}의 매장`,
                    status: 'active'
                  })
                  .select()
                  .single();
                
                if (createKolError) {
                  console.error(`KOL 정보 자동 생성 실패(user_id=${userByEmail.id}):`, createKolError);
                } else {
                  console.log(`KOL 정보 자동 생성 성공: ID=${newKolData.id}, Name=${newKolData.name}`);
                }
              } else {
                console.log(`KOL 정보 이미 존재: KOL ID=${kolData.id}, User ID=${userByEmail.id}`);
              }
            }
          }
        } else {
          console.log(`사용자 정보 업데이트 불필요: ID=${userByEmail.id}, Clerk ID=${userByEmail.clerk_id}`);
        }
        
        // Clerk 사용자 메타데이터 업데이트 - 항상 최신 정보로 업데이트
        try {
          await clerkApi.updateUserMetadata(clerkId, {
            public_metadata: {
              role: userByEmail.role || 'kol',
              userId: userByEmail.id,
              // 타임스탬프 추가로 메타데이터 최신 상태 확인 가능
              updated_at: new Date().toISOString()
            }
          });
          
          console.log(`Clerk 메타데이터 업데이트 완료: ID=${clerkId}, User ID=${userByEmail.id}, 역할=${userByEmail.role || 'kol'}`);
        } catch (apiError) {
          console.error('Clerk API 오류:', apiError);
        }
        
        return NextResponse.json({ 
          success: true, 
          message: `User ${needsUpdate ? 'updated' : 'already up to date'}`,
          userId: userByEmail.id,
          role: userByEmail.role
        });
      }
      
      // 사용자를 찾지 못한 경우: clerk_id로 검색 (기존 코드 호환성)
      console.log(`이메일(${userEmail})로 사용자를 찾지 못했습니다. Clerk ID로 검색 시도...`);
      const { data: userByClerkId, error: clerkIdError } = await supabase
        .from('users')
        .select('id, email, role, clerk_id')
        .eq('clerk_id', clerkId)
        .maybeSingle();
      
      if (userByClerkId) {
        console.log(`Clerk ID로 사용자 발견: ID=${userByClerkId.id}, Email=${userByClerkId.email}`);
        
        // 이메일 주소 업데이트
        if (userByClerkId.email !== userEmail) {
          const { error: updateError } = await supabase
            .from('users')
            .update({ email: userEmail })
            .eq('id', userByClerkId.id);
          
          if (updateError) {
            console.error(`사용자 이메일 업데이트 실패(ID=${userByClerkId.id}):`, updateError);
          } else {
            console.log(`사용자 이메일 업데이트 성공: ID=${userByClerkId.id}, 새 이메일=${userEmail}`);
          }
        }
        
        // Clerk 메타데이터 업데이트
        try {
          await clerkApi.updateUserMetadata(clerkId, {
            public_metadata: {
              role: userByClerkId.role || 'kol',
              userId: userByClerkId.id,
              updated_at: new Date().toISOString()
            }
          });
          
          console.log(`Clerk 메타데이터 업데이트 완료: ID=${clerkId}`);
        } catch (apiError) {
          console.error('Clerk API 오류:', apiError);
        }
        
        return NextResponse.json({ 
          success: true, 
          message: 'User found by Clerk ID and updated',
          userId: userByClerkId.id
        });
      }
      
      // 여전히 사용자를 찾지 못한 경우: 최신 pending 사용자 검색
      console.log(`Clerk ID(${clerkId})로도 사용자를 찾지 못했습니다. Pending 사용자 검색...`);
      const { data: pendingUsers, error: pendingError } = await supabase
        .from('users')
        .select('id, email, role, clerk_id')
        .like('clerk_id', 'pending_%')
        .order('created_at', { ascending: false })
        .limit(1);
      
      if (!pendingError && pendingUsers && pendingUsers.length > 0) {
        const pendingUser = pendingUsers[0];
        console.log(`Pending 사용자 발견: ID=${pendingUser.id}, Email=${pendingUser.email}`);
        
        // Pending 사용자 업데이트
        const { error: updateError } = await supabase
          .from('users')
          .update({ 
            clerk_id: clerkId,
            email: userEmail  // 이메일도 업데이트
          })
          .eq('id', pendingUser.id);
        
        if (updateError) {
          console.error(`Pending 사용자 업데이트 실패(ID=${pendingUser.id}):`, updateError);
          return NextResponse.json({ error: updateError.message }, { status: 500 });
        }
        
        // Clerk 메타데이터 업데이트
        try {
          await clerkApi.updateUserMetadata(clerkId, {
            public_metadata: {
              role: pendingUser.role || 'kol',
              userId: pendingUser.id,
              updated_at: new Date().toISOString()
            }
          });
          
          console.log(`Clerk 메타데이터 업데이트 완료: ID=${clerkId}`);
        } catch (apiError) {
          console.error('Clerk API 오류:', apiError);
        }
        
        return NextResponse.json({ 
          success: true, 
          message: 'Pending user updated with Clerk ID',
          userId: pendingUser.id
        });
      }
      
      // 완전히 새로운 사용자인 경우: 새 사용자 생성
      console.log(`등록된 사용자를 찾을 수 없음. 새 사용자 생성 필요: ${userEmail}`);
      
      // 기본 role을 'kol'로 설정하고 Clerk metadata 업데이트
      try {
        const defaultRole = 'kol';
        
        // 새 사용자 생성
        const { data: newUser, error: insertError } = await supabase
          .from('users')
          .insert({
            clerk_id: clerkId,
            email: userEmail,
            name: userName || userEmail.split('@')[0],
            role: defaultRole
          })
          .select()
          .single();
        
        if (insertError) {
          console.error(`새 사용자 생성 실패(${userEmail}):`, insertError);
          return NextResponse.json({ error: insertError.message }, { status: 500 });
        }
        
        console.log(`새 사용자 생성 성공: ID=${newUser.id}, Email=${newUser.email}`);
        
        // Clerk 메타데이터 업데이트
        await clerkApi.updateUserMetadata(clerkId, {
          public_metadata: {
            role: defaultRole,
            userId: newUser.id,
            created_at: new Date().toISOString()
          }
        });
        
        console.log(`새 사용자 Clerk 메타데이터 설정 완료: ID=${clerkId}, Role=${defaultRole}`);
        
        // KOL 기본 정보도 생성
        const displayName = userName || userEmail.split('@')[0];
        const { data: newKol, error: kolError } = await supabase
          .from('kols')
          .insert({
            user_id: newUser.id,
            name: displayName,
            shop_name: `${displayName}의 매장`,
            status: 'active'
          })
          .select()
          .single();
        
        if (kolError) {
          console.error(`KOL 기본 정보 생성 실패(user_id=${newUser.id}):`, kolError);
        } else {
          console.log(`KOL 기본 정보 생성 성공: ID=${newKol.id}`);
        }
        
        return NextResponse.json({ 
          success: true, 
          message: 'New user created with default role',
          userId: newUser.id,
          role: defaultRole
        });
      } catch (createError) {
        console.error('새 사용자 생성 중 오류:', createError);
        return NextResponse.json({ error: 'Failed to create new user' }, { status: 500 });
      }
    } catch (error) {
      console.error('웹훅 처리 오류:', error);
      return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
    }
  }
  
  // 다른 이벤트는 성공으로 처리
  return NextResponse.json({ success: true, message: `Webhook received: ${type}` });
}
</file>
  <file path="app/components/layout/KolHeader.tsx">
'use client';

import Link from 'next/link';
import { 
  ChevronDown, 
  Menu,
  LogOut
} from "lucide-react";
import { Button } from "../../../components/ui/button";
import { Sheet, SheetContent, SheetTrigger } from "../../../components/ui/sheet";
import { DialogTitle } from "../../../components/ui/dialog";
import { Separator } from "../../../components/ui/separator";
import { Badge } from "../../../components/ui/badge";
import { Avatar, AvatarFallback, AvatarImage } from "../../../components/ui/avatar";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger } from "../../../components/ui/dropdown-menu";
import KolMobileMenu from "./KolMobileMenu";

interface KolHeaderProps {
  userName?: string;
  shopName?: string;
  userImage?: string;
  mobileMenuOpen: boolean;
  setMobileMenuOpen: (open: boolean) => void;
  onSignOut?: () => void;
}

export default function KolHeader({ 
  userName, 
  shopName, 
  userImage,
  mobileMenuOpen,
  setMobileMenuOpen,
  onSignOut
}: KolHeaderProps) {
  const userInitials = userName?.substring(0, 2) || "KL";

  return (
    <header className="border-b bg-white px-4 py-2 shadow-sm md:px-6">
      <div className="flex items-center justify-between">
        <div className="flex w-64 items-center">
          <Sheet open={mobileMenuOpen} onOpenChange={setMobileMenuOpen}>
            <SheetTrigger asChild className="md:hidden">
              <Button variant="ghost" size="icon">
                <Menu className="h-5 w-5" />
              </Button>
            </SheetTrigger>
            <SheetContent side="left" className="w-[250px] sm:w-[300px]">
              <DialogTitle className="sr-only">모바일 메뉴</DialogTitle>
              <KolMobileMenu 
                userName={userName} 
                shopName={shopName} 
                userImage={userImage} 
                setMobileMenuOpen={setMobileMenuOpen} 
                onSignOut={onSignOut}
              />
            </SheetContent>
          </Sheet>
          <Link href="/kol-new" className="flex w-full items-center justify-center font-bold text-sm md:text-lg">
            BIOFOX CRM
          </Link>
        </div>
        <div className="flex items-center gap-3">
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" className="flex items-center gap-2">
                <Avatar className="h-6 w-6 md:h-8 md:w-8">
                  <AvatarImage src={userImage} />
                  <AvatarFallback>{userInitials}</AvatarFallback>
                </Avatar>
                <span className="hidden text-xs md:text-sm md:inline-block">{shopName || "로딩 중..."}</span>
                <ChevronDown className="h-3 w-3 md:h-4 md:w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="bg-white">
              <DropdownMenuLabel>내 계정</DropdownMenuLabel>
              <DropdownMenuSeparator />
              <DropdownMenuItem onClick={onSignOut}>
                <LogOut className="mr-2 h-4 w-4" />
                <span>로그아웃</span>
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>
    </header>
  );
}
</file>
  <file path="app/components/layout/KolMobileMenu.tsx">
'use client';

import Link from 'next/link';
import { Home, Store, BarChart3, LogOut, Bell, FileText } from "lucide-react";
import { Separator } from "../../../components/ui/separator";
import { Avatar, AvatarFallback, AvatarImage } from "../../../components/ui/avatar";
import { Button } from "../../../components/ui/button";

interface KolMobileMenuProps {
  userName?: string;
  shopName?: string;
  userImage?: string;
  setMobileMenuOpen: (open: boolean) => void;
  onSignOut?: () => void;
}

export default function KolMobileMenu({
  userName,
  shopName,
  userImage,
  setMobileMenuOpen,
  onSignOut
}: KolMobileMenuProps) {
  const userInitials = userName?.substring(0, 2) || "KL";

  return (
    <div className="flex flex-col gap-6 py-4">
      <div className="flex items-center gap-2 px-4">
        <Avatar>
          <AvatarImage src={userImage} />
          <AvatarFallback>{userInitials}</AvatarFallback>
        </Avatar>
        <div>
          <p className="text-sm font-medium">{userName || "로딩 중..."}</p>
          <p className="text-xs text-muted-foreground">{shopName || "로딩 중..."}</p>
        </div>
      </div>
      <Separator />
      <nav className="flex flex-1 flex-col gap-1">
        <Link 
          href="/kol-new" 
          onClick={() => setMobileMenuOpen(false)}
          className="flex items-center gap-2 rounded-md px-4 py-2 text-sm hover:bg-muted"
        >
          <Home className="h-4 w-4" />
          <span>대시보드</span>
        </Link>
        <Link 
          href="/kol-new/stores" 
          onClick={() => setMobileMenuOpen(false)}
          className="flex items-center gap-2 rounded-md px-4 py-2 text-sm hover:bg-muted"
        >
          <Store className="h-4 w-4" />
          <span>전문점 관리</span>
        </Link>
        <Link 
          href="/kol-new/activities" 
          onClick={() => setMobileMenuOpen(false)}
          className="flex items-center gap-2 rounded-md px-4 py-2 text-sm hover:bg-muted"
        >
          <FileText className="h-4 w-4" />
          <span>영업 일지</span>
        </Link>
        <Separator className="my-2" />
        <Link 
          href="/kol-new/notifications" 
          onClick={() => setMobileMenuOpen(false)}
          className="flex items-center gap-2 rounded-md px-4 py-2 text-sm hover:bg-muted"
        >
          <Bell className="h-4 w-4" />
          <span>알림</span>
        </Link>
        <Separator className="my-2" />
        <Button 
          variant="ghost" 
          onClick={() => {
            setMobileMenuOpen(false);
            if (onSignOut) {
              onSignOut();
            }
          }}
          className="flex items-center justify-start gap-2 rounded-md px-4 py-2 text-sm font-normal hover:bg-muted"
        >
          <LogOut className="h-4 w-4 text-red-500" />
          <span className="text-red-500">로그아웃</span>
        </Button>
      </nav>
    </div>
  );
}
</file>
  <file path="app/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  /* 기본 컬러 팔레트 */
  --biofox-purple: #6a0dad;
  --biofox-cyan: #00f0ff;
  --biofox-blue: #0077be;
  
  /* 기본 변수 */
  --background: #000000;
  --foreground: #ffffff;
  
  /* 그림자, 블러 */
  --shadow-card: 0 8px 32px rgba(0, 0, 0, 0.2);
  --shadow-subtle: 0 4px 12px rgba(0, 0, 0, 0.1);
  --blur-effect: blur(12px);
  --blur-heavy: blur(24px);
  
  /* 애니메이션 타이밍 */
  --transition-fast: 0.2s;
  --transition-normal: 0.3s;
  --transition-slow: 0.5s;

  /* 폰트 */
  --font-sans: 'SF Compact Text', system-ui, -apple-system, BlinkMacSystemFont, 'Helvetica Neue', sans-serif;
  --font-mono: 'SF Mono', ui-monospace, SFMono-Regular;

  /* 테두리 반경 */
  --border-radius-sm: 8px;
  --border-radius-md: 12px;
  --border-radius-lg: 16px;
  --border-radius-xl: 24px;
  --border-radius-full: 9999px;
}

/* 버튼 스타일 */
.btn-primary {
  background-color: var(--biofox-purple);
  color: white;
  padding: 0.5rem 1.5rem;
  border-radius: var(--border-radius-md);
  font-weight: 600;
  transition: all var(--transition-normal);
}

.btn-primary:hover {
  background-color: var(--biofox-cyan);
  transform: translateY(-2px);
}

.btn-secondary {
  border: 1px solid var(--biofox-cyan);
  color: var(--biofox-purple);
  padding: 0.5rem 1.5rem;
  border-radius: var(--border-radius-md);
  font-weight: 600;
  transition: all var(--transition-normal);
}

.btn-secondary:hover {
  background-color: var(--biofox-cyan);
  color: white;
  transform: translateY(-2px);
}

.btn-ghost {
  background-color: transparent;
  color: var(--biofox-purple);
  padding: 0.5rem 1.5rem;
  border-radius: var(--border-radius-md);
  font-weight: 600;
  transition: all var(--transition-normal);
}

.btn-ghost:hover {
  background-color: rgba(106, 13, 173, 0.1);
  box-shadow: 0 0 0 1px var(--biofox-cyan);
}

/* 카드 스타일 */
.card {
  background-color: rgba(0, 0, 0, 0.2);
  color: var(--foreground);
  border-radius: var(--border-radius-md);
  padding: 1.5rem;
  box-shadow: var(--shadow-card);
  transition: all var(--transition-normal);
  backdrop-filter: var(--blur-effect);
  border: 1px solid rgba(255, 255, 255, 0.2);
}

.card:hover {
  transform: translateY(-2px);
  box-shadow: var(--shadow-subtle);
  border-color: var(--biofox-cyan);
}

/* 애니메이션 */
@keyframes appear {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes appear-zoom {
  from {
    opacity: 0;
    transform: scale(0.95);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

.animate-appear {
  animation: appear 0.5s ease-out forwards;
}

.animate-appear-zoom {
  animation: appear-zoom 0.5s ease-out forwards;
}

/* 딜레이 클래스 */
.delay-100 { animation-delay: 0.1s; }
.delay-300 { animation-delay: 0.3s; }
.delay-500 { animation-delay: 0.5s; }
.delay-700 { animation-delay: 0.7s; }
.delay-1000 { animation-delay: 1s; }

/* 모션 감소 설정 */
@media (prefers-reduced-motion: reduce) {
  * {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}

/* 기본 스타일 */
.backdrop-blur {
  backdrop-filter: var(--blur-effect);
  -webkit-backdrop-filter: var(--blur-effect);
}

.backdrop-blur-heavy {
  backdrop-filter: var(--blur-heavy);
  -webkit-backdrop-filter: var(--blur-heavy);
}

.hover-lift {
  transition: transform var(--transition-normal);
}

.hover-lift:hover {
  transform: translateY(-2px);
}
</file>
  <file path="app/kol-new/page.tsx">
'use client';

import { useEffect, useState } from 'react';
import { redirect } from 'next/navigation';
import { useUser, useClerk } from '@clerk/nextjs';
import Link from 'next/link';
import { 
  Search, 
  CoinsIcon,
  TrendingUp,
  TrendingDown,
  Store,
  Wallet,
  ArrowRight,
  ClipboardList,
  FileText,
  AlertTriangle
} from "lucide-react";
import SalesChart from "../../components/sales-chart";
import StoreRankingTable from "../../components/store-ranking-table";
import UpcomingTasks from "../../components/upcoming-tasks";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import KolHeader from "../components/layout/KolHeader";
import KolSidebar from "../components/layout/KolSidebar";
import KolFooter from "../components/layout/KolFooter";
import MetricCard from "../components/dashboard/MetricCard";
import { Separator } from "@/components/ui/separator";
import { Sheet, SheetContent, SheetTrigger } from "@/components/ui/sheet";
import { DialogTitle } from "@/components/ui/dialog";
import KolMobileMenu from "../components/layout/KolMobileMenu";

// 숫자를 만 단위로 포맷팅하는 유틸리티 함수
const formatToManUnit = (value: number): string => {
  if (value === 0) return "0원";
  
  // 만 단위 계산
  const man = Math.floor(value / 10000);
  const rest = value % 10000;
  
  if (man > 0) {
    // 만 단위가 있는 경우
    if (rest > 0) {
      // 나머지가 있는 경우 (예: 510만 4740원)
      return `${man.toLocaleString()}만 ${rest}원`;
    }
    // 나머지가 없는 경우 (예: 500만원)
    return `${man.toLocaleString()}만원`;
  } else {
    // 만 단위가 없는 경우 (예: 9800원)
    return `${value.toLocaleString()}원`;
  }
};

// 대시보드 데이터 타입 정의
interface DashboardData {
  kol: {
    id: number;
    name: string;
    shopName: string;
  };
  sales: {
    currentMonth: number;
    previousMonth: number;
    growth: number;
  };
  allowance: {
    currentMonth: number;
    previousMonth: number;
    growth: number;
  };
  shops: {
    total: number;
    ordering: number;
    notOrdering: number;
    lastAddedDate?: string;
  };
}

// 전문점 데이터 타입 정의
interface ShopData {
  id: number;
  ownerName: string;
  shop_name: string;
  region: string;
  status: string;
  createdAt: string;
  is_owner_kol?: boolean;
  sales: {
    total: number;
    product: number;
    device: number;
    hasOrdered: boolean;
  };
}

// 태스크 데이터 타입 정의
interface ActivityData {
  id: number;
  shopId?: number;
  shopName?: string;
  activityDate: string;
  content: string;
  createdAt: string;
  timeAgo: string;
  icon: React.ReactNode;
}

export default function KolNewPage() {
  const { isLoaded, isSignedIn, user } = useUser();
  const { signOut } = useClerk();
  const [isKol, setIsKol] = useState<boolean | null>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [dashboardData, setDashboardData] = useState<DashboardData | null>(null);
  const [shopsData, setShopsData] = useState<ShopData[]>([]);
  const [activityData, setActivityData] = useState<ActivityData[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [errorDetails, setErrorDetails] = useState<string | null>(null);
  const [retryCount, setRetryCount] = useState<number>(0);
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);

  // 사용자 역할 확인
  useEffect(() => {
    if (isLoaded && isSignedIn && user) {
      try {
        const userRole = user.publicMetadata?.role as string || "kol";
        console.log('사용자 역할:', userRole);
        setIsKol(userRole === "kol");
      } catch (err) {
        console.error('사용자 역할 확인 중 오류:', err);
        // 기본값으로 KOL 설정
        setIsKol(true);
      }
    }
  }, [isLoaded, isSignedIn, user]);

  // 대시보드 데이터 로드
  useEffect(() => {
    if (isLoaded && isSignedIn && isKol) {
      const fetchData = async () => {
        try {
          setLoading(true);
          setError(null);
          setErrorDetails(null);
          
          // 대시보드 데이터 로드
          console.log('대시보드 데이터 로드 시작...');
          const dashboardResponse = await fetch('/api/kol-new/dashboard');
          
          if (!dashboardResponse.ok) {
            const errorData = await dashboardResponse.json().catch(() => ({}));
            const errorMessage = errorData.error || '대시보드 데이터를 불러오는데 실패했습니다.';
            const details = errorData.details || '';
            
            console.error('대시보드 API 에러:', errorMessage, details);
            throw new Error(errorMessage, { cause: details });
          }
          
          const dashboardResult = await dashboardResponse.json();
          console.log('대시보드 데이터 로드 완료');
          setDashboardData(dashboardResult);

          // 전문점 데이터 로드
          const shopsResponse = await fetch('/api/kol-new/shops');
          if (!shopsResponse.ok) {
            const errorData = await shopsResponse.json().catch(() => ({}));
            console.error('전문점 API 에러:', errorData.error);
            throw new Error(errorData.error || '전문점 데이터를 불러오는데 실패했습니다.');
          }
          const shopsResult = await shopsResponse.json();
          
          // 전문점 데이터 가공 - shop_name 및 is_owner_kol 활용하고 매출은 만원 단위로 변환
          const formattedShops = shopsResult.map((shop: any) => ({
            ...shop,
            shop_name: shop.shop_name || shop.ownerName, // API에서 shop_name을 우선적으로 사용
            sales: {
              ...shop.sales,
              // 숫자 데이터는 그대로 유지하되, StoreRankingTable 컴포넌트에서 표시 시 만원 단위로 보여짐
              total: shop.sales.total,
              product: shop.sales.product,
              device: shop.sales.device
            }
          }));
          
          setShopsData(formattedShops);

          // 영업 일지 데이터 로드
          const activityResponse = await fetch('/api/kol-new/activities'); 
          if (!activityResponse.ok) {
            const errorData = await activityResponse.json().catch(() => ({}));
            console.error('영업 일지 API 에러:', errorData.error);
            throw new Error(errorData.error || '영업 일지 데이터를 불러오는데 실패했습니다.');
          }
          const activityResult = await activityResponse.json();
          
          // 영업 일지 데이터 포맷팅
          const formattedActivities = activityResult.map((act: any) => {
            // 날짜 포맷팅
            const activityDate = new Date(act.activity_date);
            const now = new Date();
            const diffTime = Math.abs(now.getTime() - activityDate.getTime());
            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
            
            return {
              id: act.id,
              shopId: act.shop_id,
              shopName: act.shop_name, // API에서 전달받는 경우
              activityDate: new Date(act.activity_date).toLocaleDateString('ko-KR'),
              content: act.content,
              createdAt: new Date(act.created_at).toLocaleDateString('ko-KR'),
              timeAgo: diffDays === 0 ? '오늘' : `${diffDays}일 전`,
              icon: act.shop_id ? 
                <Store className="h-4 w-4 text-blue-500" /> : 
                <ClipboardList className="h-4 w-4 text-purple-500" />
            };
          });
          
          setActivityData(formattedActivities);
          setLoading(false);
          setRetryCount(0); // 성공 시 재시도 카운트 초기화
        } catch (err: unknown) {
          console.error('데이터 로드 에러:', err);
          
          // 오류 정보 설정
          if (err instanceof Error) {
            setError(err.message);
            setErrorDetails(err.cause as string || '');
          } else {
            setError('데이터를 불러오는데 실패했습니다.');
          }
          
          setLoading(false);
        }
      };
      
      fetchData();
    }
  }, [isLoaded, isSignedIn, isKol, retryCount]);

  // 로그아웃 함수
  const handleSignOut = async () => {
    try {
      await signOut();
      // 로그아웃 후 홈으로 리다이렉트 (선택적)
      // window.location.href = '/';
    } catch (error) {
      console.error('로그아웃 중 오류가 발생했습니다:', error);
    }
  };

  // 데이터 다시 로드
  const handleRetry = () => {
    setRetryCount(prevCount => prevCount + 1);
  };

  // 로딩 중이거나 사용자 정보 확인 중인 경우
  if (!isLoaded || isKol === null) {
    return (
      <div className="flex min-h-screen flex-col items-center justify-center bg-muted/20 p-4">
        <Card className="w-full max-w-md">
          <CardHeader>
            <CardTitle className="text-center">로딩 중...</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-center text-muted-foreground">사용자 정보를 확인하는 중입니다.</p>
          </CardContent>
        </Card>
      </div>
    );
  }

  // KOL이 아닌 경우 홈으로 리다이렉트
  if (!isKol) {
    return redirect('/');
  }

  // 데이터 로딩 중인 경우
  if (loading) {
    return (
      <div className="flex min-h-screen flex-col items-center justify-center bg-muted/20 p-4">
        <Card className="w-full max-w-md">
          <CardHeader>
            <CardTitle className="text-center">데이터 로딩 중...</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-center text-muted-foreground">대시보드 정보를 불러오는 중입니다.</p>
          </CardContent>
        </Card>
      </div>
    );
  }

  // 에러가 발생한 경우
  if (error) {
    return (
      <div className="flex min-h-screen flex-col items-center justify-center bg-muted/20 p-4">
        <Card className="w-full max-w-md">
          <CardHeader>
            <div className="flex justify-center items-center text-destructive mb-2">
              <AlertTriangle className="h-8 w-8 mr-2" />
              <CardTitle className="text-center text-destructive">에러 발생</CardTitle>
            </div>
          </CardHeader>
          <CardContent className="space-y-4">
            <p className="text-center text-muted-foreground">{error}</p>
            {errorDetails && (
              <p className="text-center text-sm text-gray-500 border-t pt-2">
                {errorDetails}
              </p>
            )}
            <div className="bg-amber-50 p-4 rounded-md border border-amber-200">
              <p className="text-sm text-amber-800">
                <strong>가능한 해결책:</strong>
              </p>
              <ul className="list-disc list-inside text-sm text-amber-700 mt-2">
                <li>페이지 새로고침을 시도해보세요.</li>
                <li>로그아웃 후 다시 로그인해보세요.</li>
                <li>계속 오류가 발생하면 관리자에게 문의하세요.</li>
              </ul>
            </div>
          </CardContent>
          <CardFooter className="flex justify-center space-x-4">
            <Button 
              variant="outline" 
              onClick={handleSignOut}
            >
              로그아웃
            </Button>
            <Button 
              variant="default" 
              onClick={handleRetry}
            >
              다시 시도
            </Button>
          </CardFooter>
        </Card>
      </div>
    );
  }

  return (
    <div className="flex h-screen flex-col">
      {/* Header */}
      <KolHeader 
        userName={dashboardData?.kol?.name}
        shopName={dashboardData?.kol?.shopName}
        userImage={user?.imageUrl}
        mobileMenuOpen={mobileMenuOpen}
        setMobileMenuOpen={setMobileMenuOpen}
        onSignOut={handleSignOut}
      />

      <div className="flex flex-1 overflow-hidden">
        {/* Sidebar - Desktop Only */}
        <KolSidebar />

        {/* Main Content */}
        <main className="flex-1 overflow-auto bg-muted/10 p-4 md:p-6">
          <div className="mx-auto max-w-7xl">
            <div className="mb-6">
              <h1 className="text-lg sm:text-xl md:text-2xl font-bold">{dashboardData?.kol?.shopName || "..."} - {dashboardData?.kol?.name || "..."} KOL</h1>
            </div>

            {/* 상단 메트릭 카드 영역 (2개 카드) */}
            <div className="mb-6 grid grid-cols-1 gap-4 sm:grid-cols-2">
              {/* 카드 1: 매출 & 수당 */}
              <Card>
                <CardContent className="p-4">
                  {/* 당월 매출 섹션 */}
                  <div className="flex items-center justify-between">
                    <div className="flex flex-col md:flex-row md:items-baseline md:gap-2 w-full overflow-hidden">
                      <span className="text-sm sm:text-lg md:text-xl font-bold whitespace-nowrap">당월 매출:</span>
                      <span className="text-sm sm:text-lg md:text-xl font-bold whitespace-nowrap overflow-hidden text-ellipsis">
                        {dashboardData?.sales?.currentMonth !== undefined 
                          ? formatToManUnit(dashboardData.sales.currentMonth)
                          : "0원"}
                      </span>
                    </div>
                    <div className="rounded-full bg-yellow-100 p-1 sm:p-1.5 text-yellow-700 flex-shrink-0">
                       <CoinsIcon className="h-3 w-3 sm:h-4 sm:w-4" />
                    </div>
                  </div>
                  
                  {/* 빈 공간 추가하여 높이 맞추기 */}
                  <div className="mt-1 invisible h-[21px] sm:h-[24px]">
                    <div className="flex items-center text-[10px] sm:text-xs">
                      <span>&nbsp;</span>
                    </div>
                  </div>
                  
                  {/* 구분선 스타일 강화 */}
                  <div className="my-3 sm:my-4 h-[1px] bg-gray-200" />

                  {/* 당월 수당 섹션 */}
                   <div className="flex items-center justify-between">
                    <div className="flex flex-col md:flex-row md:items-baseline md:gap-2 w-full overflow-hidden">
                      <span className="text-sm sm:text-lg md:text-xl font-bold whitespace-nowrap">당월 수당:</span>
                      <span className="text-sm sm:text-lg md:text-xl font-bold whitespace-nowrap overflow-hidden text-ellipsis">
                        {dashboardData?.allowance?.currentMonth !== undefined 
                          ? formatToManUnit(dashboardData.allowance.currentMonth)
                          : "0원"}
                      </span>
                    </div>
                    <div className="rounded-full bg-purple-100 p-1 sm:p-1.5 text-purple-700 flex-shrink-0">
                       <Wallet className="h-3 w-3 sm:h-4 sm:w-4" />
                    </div>
                  </div>
                  {dashboardData?.allowance?.growth !== undefined && (
                    <div className={`mt-1 flex items-center text-[10px] sm:text-xs ${dashboardData.allowance.growth >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                      {dashboardData.allowance.growth >= 0 ? (
                        <TrendingUp className="mr-1 h-2.5 w-2.5 sm:h-3 sm:w-3" />
                      ) : (
                        <TrendingDown className="mr-1 h-2.5 w-2.5 sm:h-3 sm:w-3" />
                      )}
                      <span>전월 대비 {Math.abs(dashboardData.allowance.growth) >= 10000 
                        ? formatToManUnit(Math.abs(dashboardData.allowance.growth)) 
                        : Math.abs(dashboardData.allowance.growth).toLocaleString() + '원'} {dashboardData.allowance.growth >= 0 ? '증가' : '감소'}</span>
                    </div>
                  )}
                </CardContent>
              </Card>

              {/* 카드 2: 현황 & 주문 */}
              <Card>
                <CardContent className="p-4">
                  {/* 전문점 현황 섹션 */}
                  <div className="flex items-center justify-between">
                     <div className="flex items-baseline gap-2">
                      <span className="text-sm sm:text-lg md:text-xl font-bold">전문점 현황:</span>
                      <span className="text-sm sm:text-lg md:text-xl font-bold">
                         {dashboardData?.shops?.total || 0}곳
                      </span>
                    </div>
                    <div className="rounded-full bg-blue-100 p-1 sm:p-1.5 text-blue-700">
                       <Store className="h-3 w-3 sm:h-4 sm:w-4" />
                    </div>
                  </div>
                  <div className="mt-1 text-[10px] sm:text-xs text-orange-500">
                    {(() => {
                      // 마지막 전문점 추가일 (가정: dashboardData에 lastShopAddedDate가 있음)
                      const lastAddedDate = dashboardData?.shops?.lastAddedDate ? new Date(dashboardData.shops.lastAddedDate) : null;
                      
                      if (!lastAddedDate) return "최근 전문점 계약 정보가 없습니다.";
                      
                      // 오늘 날짜와의 차이 계산
                      const today = new Date();
                      const diffTime = Math.abs(today.getTime() - lastAddedDate.getTime());
                      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
                      
                      return `${diffDays}일 동안 전문점 계약이 없었습니다.`;
                    })()}
                  </div>
                  
                  {/* 구분선 스타일 강화 */}
                  <div className="my-3 sm:my-4 h-[1px] bg-gray-200" />

                  {/* 당월 주문 전문점 섹션 */}
                   <div className="flex items-center justify-between">
                     <div className="flex items-baseline gap-2">
                      <span className="text-sm sm:text-lg md:text-xl font-bold">당월 주문 전문점:</span>
                      <span className="text-sm sm:text-lg md:text-xl font-bold">
                        {dashboardData?.shops?.ordering || 0}곳
                      </span>
                    </div>
                    <div className="rounded-full bg-green-100 p-1 sm:p-1.5 text-green-700">
                       <ClipboardList className="h-3 w-3 sm:h-4 sm:w-4" />
                    </div>
                  </div>
                  <div className="mt-1 text-[10px] sm:text-xs text-red-500">
                    {dashboardData?.shops?.notOrdering || 0}곳이 아직 주문하지 않았습니다.
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* 테이블 및 영업 일지 영역 */}
            <div className="mb-6 grid grid-cols-1 gap-6 lg:grid-cols-2">
              {/* 전문점 매출 순위 카드 */}
              <Card className="flex flex-col h-full"> 
                <CardContent className="flex flex-1 flex-col p-0 overflow-auto">
                  <StoreRankingTable shops={shopsData} />
                </CardContent>
                <CardFooter className="mt-auto border-t px-6 py-3">
                  <div className="ml-auto">
                    <Button asChild variant="ghost" size="sm">
                      <Link href="/kol-new/stores"> 
                        모든 전문점 보기
                        <ArrowRight className="ml-1 h-4 w-4" />
                      </Link>
                    </Button>
                  </div>
                </CardFooter>
              </Card>
              
              {/* 내 영업 일지 카드 - 반응형 높이 */}
              <Card className="flex flex-col h-full">
                <CardHeader className="pb-0">
                  <CardTitle className="text-sm sm:text-base md:text-lg">내 영업 일지</CardTitle>
                </CardHeader>
                
                {/* 높이 자동 조절을 위한 flex 구조 적용 */}
                <CardContent className="flex flex-1 flex-col">
                  {activityData.length === 0 ? (
                    <div className="flex flex-1 items-center justify-center py-8">
                      <p className="text-center text-[10px] sm:text-xs md:text-sm text-muted-foreground">영업 일지 데이터가 없습니다.</p>
                    </div>
                  ) : (
                    <div className="space-y-3 mt-2">
                      {activityData.slice(0, 5).map((activity) => (
                        <div key={activity.id} className="flex items-start space-x-3 border-b border-gray-100 pb-2">
                          <div className="rounded-full bg-gray-100 p-1.5">
                            {activity.icon}
                          </div>
                          <div className="flex-1">
                            <div className="flex justify-between items-baseline">
                              <p className="font-medium text-xs sm:text-sm">
                                {activity.shopName ? `${activity.shopName} 방문` : '일반 활동'}
                              </p>
                              <span className="text-[10px] sm:text-xs text-gray-500">{activity.timeAgo}</span>
                            </div>
                            <p className="text-[10px] sm:text-xs text-gray-700 line-clamp-2 mt-0.5">
                              {activity.content}
                            </p>
                            <p className="text-[9px] sm:text-[10px] text-gray-400 mt-1">
                              {activity.activityDate}
                            </p>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </CardContent>
                
                {/* 푸터는 항상 하단에 고정 */}
                <CardFooter className="mt-auto border-t px-6 py-3">
                  <div className="ml-auto">
                    <Button asChild variant="ghost" size="sm">
                      <Link href="/kol-new/activities"> 
                        모든 영업 일지 보기
                        <ArrowRight className="ml-1 h-4 w-4" />
                      </Link>
                    </Button>
                  </div>
                </CardFooter>
              </Card>
            </div>

            {/* Chart */}
            <Card className="mb-6">
              <CardHeader>
                <CardTitle className="text-sm sm:text-base md:text-lg">나의 월별 수당</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="h-80">
                  <SalesChart kolId={dashboardData?.kol?.id} />
                </div>
              </CardContent>
            </Card>

            {/* Footer */}
            <KolFooter />
          </div>
        </main>
      </div>

      {/* Mobile Menu */}
      <Sheet open={mobileMenuOpen} onOpenChange={setMobileMenuOpen}>
        <SheetTrigger className="block sm:hidden">
          <div className="flex items-center justify-center p-2">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
              <path strokeLinecap="round" strokeLinejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5M3.75 17.25h16.5" />
            </svg>
          </div>
        </SheetTrigger>
        <SheetContent side="left" className="w-[250px] sm:w-[300px]">
          <DialogTitle className="sr-only">모바일 메뉴</DialogTitle>
          <KolMobileMenu 
            userName={dashboardData?.kol?.name} 
            shopName={dashboardData?.kol?.shopName} 
            userImage={user?.imageUrl} 
            setMobileMenuOpen={setMobileMenuOpen} 
            onSignOut={handleSignOut}
          />
        </SheetContent>
      </Sheet>
    </div>
  );
}
</file>
  <file path="app/layout.tsx">
import type { Metadata } from "next";
import { Inter, Noto_Sans_KR } from "next/font/google";
import "./globals.css";
import { ClerkProvider } from "@clerk/nextjs";
import { koKR } from "@clerk/localizations";

// 환경 변수 체크
const hasClerkKeys = !!(
  process.env.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY &&
  process.env.CLERK_SECRET_KEY
);

if (!hasClerkKeys && process.env.NODE_ENV !== 'production') {
  console.warn('⚠️ Clerk 키가 설정되지 않았습니다. .env 파일에 환경 변수를 설정해주세요.');
  console.warn('NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY와 CLERK_SECRET_KEY는 Clerk 인증에 필요한 환경 변수입니다.');
}

const inter = Inter({ 
  subsets: ["latin"], 
  variable: "--font-inter",
  display: 'swap',
});

const notoSansKr = Noto_Sans_KR({
  subsets: ["latin"],
  weight: ["400", "500", "700"],
  variable: "--font-noto-sans-kr",
  display: 'swap',
});

export const metadata: Metadata = {
  title: "BIOFOX KOL",
  description: "KOL 및 전문점 관리 시스템",
  metadataBase: new URL('https://biofox-kol.vercel.app'),
};

export const viewport = {
  width: 'device-width',
  initialScale: 1,
  maximumScale: 1,
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  // Clerk 설정이 없는 경우 Clerk Provider를 사용하지 않고 기본 레이아웃만 렌더링
  if (!hasClerkKeys) {
    return (
      <html lang="ko">
        <body className={`${inter.variable} ${notoSansKr.variable}`}>
          <div className="p-4 bg-yellow-100 text-yellow-800 rounded-md mb-4">
            <p>⚠️ 환경 변수가 설정되지 않았습니다. 인증 기능이 비활성화되었습니다.</p>
            <p>Clerk과 Supabase 설정을 위해 .env 파일을 확인해주세요.</p>
          </div>
          {children}
        </body>
      </html>
    );
  }

  return (
    <ClerkProvider 
      localization={koKR}
      appearance={{
        variables: {
          colorPrimary: '#6D28D9',
          colorTextOnPrimaryBackground: 'white',
        },
        layout: {
          socialButtonsPlacement: 'bottom',
          socialButtonsVariant: 'blockButton', 
        },
        elements: {
          formButtonPrimary: "btn-primary",
          card: "shadow-none bg-transparent",
          headerTitle: "text-xl font-semibold",
          headerSubtitle: "",
          socialButtonsBlockButton: "border border-solid hover:border-[#C0A6E3]",
          socialButtonsBlockButtonText: "text-gray-600",
          formFieldLabel: "text-gray-700",
          formFieldInput: "border-solid focus:border-[#6D28D9] focus:ring-1 focus:ring-[#6D28D9]",
          footerActionLink: "text-[#6D28D9] hover:text-[#8B5CF6]",
          identityPreviewText: "text-gray-700",
          identityPreviewEditButton: "text-[#6D28D9] hover:text-[#8B5CF6]",
        },
      }}
      developmentMode={false}
    >
      <html lang="ko">
        <body className={`${inter.variable} ${notoSansKr.variable}`}>
          {children}
        </body>
      </html>
    </ClerkProvider>
  );
}
</file>
  <file path="app/page.tsx">
'use client';

import { useRouter } from "next/navigation";
import { useEffect } from "react";
import { useUser } from "@clerk/nextjs";
import Image from "next/image";
import { CardContainer, CardBody, CardItem } from "@/components/ui/aceternity/3d-card";
import { TextRevealCard, TextRevealCardTitle, TextRevealCardDescription } from "@/components/ui/aceternity/text-reveal-card";
import Aurora from "@/components/ui/Aurora";

export default function Home() {
  const router = useRouter();
  const { isLoaded, isSignedIn, user } = useUser();
  
  // 사용자가 이미 로그인되어 있으면 역할에 따라 리다이렉트
  useEffect(() => {
    if (isLoaded && isSignedIn && user) {
      // publicMetadata나 privateMetadata에서 사용자 역할 가져오기
      const userRole = user.publicMetadata?.role as string || "kol";
      
      if (userRole === "admin") {
        router.push("/admin-dashboard/main");
      } else if (userRole === "kol") {
        router.push("/kol-new");
      } else {
        // 기본 리다이렉션
        router.push("/kol-new");
      }
    }
  }, [isLoaded, isSignedIn, user, router]);

  return (
    <div className="relative min-h-screen overflow-hidden bg-black">
      {/* Aurora 배경 효과 */}
      <Aurora
        colorStops={["#E9D1F2", "#C9E6F0", "#F5F3E4"]}
        blend={0.5}
        amplitude={1.0}
        speed={0.5}
      />

      {/* 메인 컨텐츠 */}
      <main className="relative z-10 flex flex-col items-center justify-center min-h-screen p-4">
        <CardContainer className="inter-var">
          <CardBody className="relative group/card dark:hover:shadow-2xl dark:hover:shadow-aurora-violet/[0.1] dark:bg-white/[0.08] dark:border-black/[0.8] border-black/[0.8] w-[85vw] sm:w-[55vw] md:w-[32rem] h-[25rem] rounded-3xl border backdrop-blur-sm flex flex-col items-center justify-center">
            {/* 헤딩 텍스트 */}
            <CardItem
              translateZ={80}
              className="text-center text-6xl md:text-7xl font-bold text-white/90 tracking-wider group-hover/card:scale-105 group-hover/card:text-white group-hover/card:text-glow-white transition-all duration-500 ease-out"
            >
              BIOFOX
            </CardItem>
            
            {/* 서브 텍스트 */}
            <CardItem
              translateZ={60}
              className="mt-4 text-center text-lg text-white/70 max-w-xs"
            >
              KOL CRM System 
            </CardItem>

            {/* 로그인 버튼 */}
            <CardItem
              translateZ={120}
              as="button"
              className="mt-10 px-8 py-4 rounded-2xl bg-white/10 hover:bg-white/20 text-white/90 hover:text-white text-base font-medium backdrop-blur-md border border-white/20 shadow-lg hover:shadow-aurora-violet/30 hover:scale-105 transition-all duration-300"
              onClick={() => router.push('/signin')}
            >
              Log in →
            </CardItem>
          </CardBody>
        </CardContainer>
      </main>
    </div>
  );
}
</file>
</code>