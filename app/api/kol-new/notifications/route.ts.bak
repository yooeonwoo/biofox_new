import { NextRequest, NextResponse } from 'next/server';
import { auth } from '@clerk/nextjs/server';
import { db } from '@/lib/db';
import { getCurrentKolId } from '@/lib/kol-helper';

// GET: 로그인한 KOL의 알림 목록 조회
export async function GET(req: NextRequest) {
  try {
    // 데이터베이스 연결 상태 확인
    try {
      const client = await db.pool.connect();
      client.release();
      console.log('데이터베이스 연결 상태: 정상');
    } catch (dbError) {
      console.error('데이터베이스 연결 오류:', dbError);
      return NextResponse.json(
        { error: '데이터베이스 연결에 실패했습니다. 잠시 후 다시 시도해주세요.' },
        { status: 503 }
      );
    }

    // 현재 인증된 사용자 확인
    const authResult = await auth();
    const userId = authResult.userId;
    
    if (!userId) {
      console.error('인증되지 않은 사용자');
      return NextResponse.json(
        { error: '인증되지 않은 사용자입니다.' },
        { status: 401 }
      );
    }

    console.log('현재 사용자 ID:', userId);

    // 현재 KOL ID 가져오기
    const kolId = await getCurrentKolId(userId);
    
    if (!kolId) {
      console.error('KOL 정보를 찾을 수 없음:', userId);
      return NextResponse.json(
        { error: 'KOL 정보를 찾을 수 없습니다.' },
        { status: 404 }
      );
    }

    console.log('KOL ID 확인:', kolId);

    // 사용자 정보 가져오기 (알림 테이블의 user_id와 연결하기 위함)
    const user = await db.query(
      `SELECT id FROM users WHERE clerk_id = $1`,
      [userId]
    );
    
    if (user.rows.length === 0) {
      console.error('사용자 정보를 찾을 수 없음:', userId);
      return NextResponse.json(
        { error: '사용자 정보를 찾을 수 없습니다.' },
        { status: 404 }
      );
    }
    
    const userIdFromDb = user.rows[0].id;
    console.log('DB 사용자 ID:', userIdFromDb);
    
    // 알림 목록 가져오기 (최신순 정렬)
    const notificationsQuery = `
      SELECT * FROM notifications 
      WHERE user_id = $1 
      ORDER BY created_at DESC
    `;

    console.log('알림 쿼리 실행:', notificationsQuery, '파라미터:', userIdFromDb);
    
    const notifications = await db.query(
      notificationsQuery,
      [userIdFromDb]
    );

    console.log('알림 조회 결과 건수:', notifications.rowCount);
    
    // 빈 배열이라도 상관없이 결과 반환
    return NextResponse.json(notifications.rows || []);
    
  } catch (error) {
    console.error('알림 목록 조회 중 오류 발생:', error);
    return NextResponse.json(
      { error: '알림 목록을 불러오는데 실패했습니다.', details: error instanceof Error ? error.message : '알 수 없는 오류' },
      { status: 500 }
    );
  }
} 