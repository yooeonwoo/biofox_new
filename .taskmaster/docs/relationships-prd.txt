# BIOFOX KOL 시스템 - 소속 관계 관리(Relationships) 기능 PRD

## 📋 문서 정보
- **문서 제목**: 소속 관계 관리 시스템 PRD
- **버전**: v1.0
- **작성일**: 2025-01-21
- **대상 시스템**: BIOFOX KOL Admin Dashboard

## 🎯 기능 개요

### 핵심 목적
전문점(Shop Owner)들의 소속 관계를 체계적으로 관리하여 KOL-전문점 간 계층 구조를 효율적으로 운영하는 시스템

### 주요 가치 제안
1. **시각적 조직도**: 드래그&드롭으로 직관적인 관계 관리
2. **완전한 추적성**: 모든 소속 변경 이력 보존 및 추적
3. **비즈니스 규칙 자동 적용**: 순환참조 방지, 권한 검증 등
4. **실시간 성과 표시**: 각 노드별 매출 성과 연동

## 🏗️ 시스템 아키텍처

### 데이터베이스 구조

#### 1. shop_relationships 테이블
```sql
CREATE TABLE shop_relationships (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  shop_owner_id UUID NOT NULL REFERENCES profiles(id),
  parent_id UUID NOT NULL REFERENCES profiles(id),
  started_at TIMESTAMP WITH TIME ZONE NOT NULL,
  ended_at TIMESTAMP WITH TIME ZONE,
  is_active BOOLEAN DEFAULT TRUE,
  notes TEXT, -- 변경 사유
  created_by UUID REFERENCES profiles(id),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
```

#### 2. 인덱스 및 제약조건
```sql
-- 성능 최적화 인덱스
CREATE INDEX idx_shop_relationships_shop_owner ON shop_relationships(shop_owner_id);
CREATE INDEX idx_shop_relationships_parent ON shop_relationships(parent_id);
CREATE INDEX idx_shop_relationships_active ON shop_relationships(is_active, started_at);

-- 비즈니스 규칙 제약조건
CREATE UNIQUE INDEX idx_unique_active_relationship 
ON shop_relationships(shop_owner_id) 
WHERE is_active = TRUE;
```

### API 엔드포인트

#### 1. 관계 목록 조회
```
GET /api/relationships
Query Parameters:
- shop_id: string (특정 샵의 관계만 조회)
- parent_id: string (특정 부모의 하위 조회)
- active_only: boolean (활성 관계만 조회)
```

#### 2. 조직도 트리 데이터
```
GET /api/relationships/tree
Query Parameters:
- root_id: string (특정 루트부터 시작)
- depth: number (트리 깊이, 기본값: 3)
```

#### 3. 관계 변경 이력
```
GET /api/relationships/history
Query Parameters:
- shop_id: string (특정 샵의 이력)
- parent_id: string (특정 부모의 이력)
- page: number (페이지네이션)
- limit: number (페이지 크기)
```

#### 4. 관계 생성/변경
```
POST /api/relationships
Body:
{
  shop_owner_id: string,
  parent_id: string,
  reason?: string
}
```

## 🖥️ 프론트엔드 컴포넌트

### 1. 조직도 트리 뷰 (RelationshipTreeView)

#### 주요 기능
- **계층적 시각화**: 접을 수 있는 트리 구조
- **드래그 앤 드롭**: 노드 이동으로 관계 변경
- **실시간 검색**: 이름/샵명으로 노드 검색 및 하이라이트
- **성과 표시**: 각 노드의 이번 달 매출 표시
- **상태 표시**: 활성/비활성 관계 구분

#### 기술적 특징
- React DnD 또는 네이티브 HTML5 드래그 앤 드롭
- 가상화된 렌더링 (대용량 데이터 처리)
- 지연 로딩 (필요시 하위 노드 동적 로드)

### 2. 관계 변경 모달 (RelationshipChangeModal)

#### 주요 기능
- **부모 검색/선택**: 사용 가능한 KOL/OL 목록
- **변경 사유 입력**: 필수 또는 선택적 메모
- **현재 관계 표시**: 기존 소속 정보 확인
- **유효성 검증**: 순환참조 등 방지

### 3. 변경 이력 테이블 (RelationshipHistoryTable)

#### 주요 기능
- **시간순 정렬**: 최신 변경 이력부터 표시
- **변경 전후 비교**: 이전 소속 → 새 소속 표시
- **변경 사유 표시**: 관리자가 입력한 사유
- **페이지네이션**: 대용량 이력 데이터 처리

## 🔒 비즈니스 규칙 및 제약사항

### 1. 관계 설정 규칙
- **부모 자격**: KOL 또는 OL 역할만 다른 사용자의 부모 가능
- **순환참조 방지**: A → B → A 같은 순환 구조 금지
- **자기참조 방지**: 자기 자신을 소속으로 설정 불가
- **단일 활성 관계**: 한 샵당 동시에 하나의 활성 관계만 허용

### 2. 권한 및 보안
- **관리자 전용**: 모든 관계 변경은 관리자만 가능
- **변경 추적**: 모든 변경에 대해 변경자, 변경 시간, 사유 기록
- **감사 로그**: 중요 변경사항은 별도 감사 로그 저장

### 3. 데이터 무결성
- **연쇄 삭제 방지**: 사용자 삭제 시 관계 데이터 보존
- **히스토리 보존**: 관계 종료 시 ended_at 설정, 삭제하지 않음
- **트랜잭션 처리**: 관계 변경 시 원자적 처리 보장

## 📊 성과 지표 및 모니터링

### 1. 핵심 지표
- **관계 변경 빈도**: 월별 소속 변경 횟수
- **조직도 깊이**: 평균 계층 구조 깊이
- **고아 노드**: 소속이 없는 샵 수
- **활성 관계 수**: 현재 활성화된 관계 총 수

### 2. 성과 메트릭
- **매출 연동**: 각 KOL별 산하 샵들의 매출 합계
- **성장률**: 월별 산하 샵 수 증감
- **활동 지표**: 마지막 주문일 기준 활성도

## 🚀 기능 구현 우선순위

### Phase 1 (필수 기능)
1. ✅ 조직도 트리 뷰 기본 구현
2. ✅ 드래그 앤 드롭 관계 변경
3. ✅ 관계 변경 이력 조회
4. ✅ 기본 검색 기능

### Phase 2 (개선 기능)
1. 🔄 성과 지표 실시간 표시
2. 🔄 고급 필터링 (역할별, 기간별)
3. 🔄 벌크 관계 변경 기능
4. 🔄 관계 변경 알림 시스템

### Phase 3 (고도화 기능)
1. ⏳ 조직도 시각화 개선 (그래프 뷰)
2. ⏳ 관계 분석 리포트
3. ⏳ 자동 관계 제안 시스템
4. ⏳ 모바일 최적화

## 🔧 기술적 고려사항

### 1. 성능 최적화
- **인덱스 전략**: 자주 조회되는 컬럼에 대한 복합 인덱스
- **캐싱**: 트리 구조 데이터의 Redis 캐싱
- **지연 로딩**: 대용량 트리의 점진적 로드
- **가상화**: 긴 목록에 대한 가상 스크롤

### 2. 확장성 고려
- **샤딩 준비**: 대용량 데이터 분산 처리 고려
- **API 버전관리**: 향후 기능 확장을 위한 버전 전략
- **마이크로서비스 분리**: 독립적인 관계 관리 서비스

### 3. 모니터링 및 로깅
- **성능 메트릭**: API 응답시간, 트리 로딩 시간
- **에러 추적**: 관계 변경 실패 원인 분석
- **사용성 메트릭**: 드래그 앤 드롭 성공률

## 🎨 UI/UX 가이드라인

### 1. 시각적 디자인
- **색상 체계**: 역할별 색상 구분 (KOL: 파랑, OL: 초록, 샵: 회색)
- **아이콘 사용**: 직관적인 역할 및 상태 아이콘
- **상태 표시**: 활성/비활성 관계 명확한 구분

### 2. 인터랙션 디자인
- **드래그 피드백**: 드래그 중 시각적 피드백 제공
- **에러 방지**: 잘못된 이동 시 명확한 안내
- **실행 취소**: 관계 변경 후 즉시 되돌리기 옵션

### 3. 반응형 디자인
- **모바일 우선**: 터치 기반 인터랙션 고려
- **태블릿 최적화**: 드래그 앤 드롭 터치 지원
- **데스크탑 확장**: 키보드 단축키 지원

## 🧪 테스트 전략

### 1. 단위 테스트
- API 엔드포인트별 기능 테스트
- 비즈니스 규칙 검증 테스트
- 데이터베이스 제약조건 테스트

### 2. 통합 테스트
- 드래그 앤 드롭 시나리오 테스트
- 관계 변경 전체 플로우 테스트
- 성과 지표 연동 테스트

### 3. 사용자 테스트
- 관리자 워크플로우 테스트
- 직관적인 조작 가능성 검증
- 에러 상황 처리 테스트

## 📈 성공 지표

### 1. 기능적 성공 지표
- 관계 변경 성공률 > 99%
- 트리 로딩 시간 < 2초
- 검색 응답시간 < 500ms

### 2. 사용성 성공 지표
- 드래그 앤 드롭 성공률 > 95%
- 관리자 만족도 > 4.5/5
- 기능 학습 시간 < 10분

### 3. 비즈니스 성공 지표
- 조직 구조 가시성 향상
- 관계 관리 업무 시간 50% 단축
- 데이터 정확성 향상

---

## 📚 참고 자료

### 기술 문서
- React DnD 공식 문서
- Supabase Realtime 연동 가이드
- PostgreSQL 계층적 쿼리 최적화

### 디자인 참고
- 조직도 UI 패턴 모음
- 트리 뷰 인터랙션 가이드
- 관리자 대시보드 모범사례

### 비즈니스 요구사항
- 기존 관계 관리 프로세스 분석
- 사용자 인터뷰 결과
- 경쟁사 기능 분석 보고서 