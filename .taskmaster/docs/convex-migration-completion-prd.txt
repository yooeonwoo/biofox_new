# Convex 마이그레이션 완성 프로젝트 요구사항 명세서 (PRD)

## 1. 프로젝트 개요

### 프로젝트명: Convex 마이그레이션 15% 완성
### 목적: 남은 복잡한 UI 컴포넌트들의 Convex 전환 및 시스템 최적화 완료
### 현재 상태: 85% 완료 (핵심 데이터 레이어 100% 완료)

## 2. 현재 상황 분석

### 완료된 작업 (85%)
- Clinical Photos API 완전 전환 (lib/clinical-photos-convex.ts)
- Customer Management 시스템 완전 전환 (hooks/useCustomers.ts)
- Admin 훅 시스템 90% 전환 (adminNewKols-convex.ts, shops-convex.ts 등)
- 일부 UI 컴포넌트 전환 (KolSidebar, ShopTable)
- 실시간 동기화 인프라 구축 완료

### 남은 작업 (15%)
- 복잡한 UI 컴포넌트들의 React Query 패턴 의존성 해결
- 타입 불일치 문제 (number ID → string ID) 해결
- 데이터 구조 매핑 완성
- Legacy API 엔드포인트 정리
- 시스템 안정성 검증

## 3. 기술 스택 및 제약사항

### 사용 기술
- **Frontend**: Next.js 14, React, TypeScript
- **State Management**: React Query + Convex
- **Database**: Convex (실시간 동기화)
- **UI Framework**: shadcn/ui, Tailwind CSS

### 제약사항
- 기존 컴포넌트의 인터페이스 호환성 유지 필요
- 점진적 전환으로 서비스 중단 최소화
- 타입 안전성 보장 (Convex ID 시스템)
- 실시간 동기화 성능 최적화

## 4. 구체적 요구사항

### 4.1 복잡한 UI 컴포넌트 Convex 전환

#### 4.1.1 ShopCreateDialog 컴포넌트 전환
- **현재 상태**: React Query mutate 패턴 사용, number ID 의존
- **목표**: Convex 기반 실시간 생성으로 전환
- **기술 요구사항**:
  - useCreateShop 훅을 shops-convex.ts 버전으로 교체
  - ID 타입 변환 (number → string) 적용
  - 폼 검증 로직 Convex 스키마와 호환성 확보
  - React Hook Form과 Convex 패턴 조합 최적화

#### 4.1.2 ShopSidebar 컴포넌트 전환  
- **현재 상태**: useAdminNewShops 훅 사용, 복잡한 필터링 로직
- **목표**: 실시간 매장 목록 동기화 구현
- **기술 요구사항**:
  - adminNewShops-convex.ts 훅으로 교체
  - KOL ID 기반 필터링 로직 Convex 쿼리로 최적화
  - 선택 상태 관리 개선 (number → string ID)
  - 로딩 및 에러 상태 처리 향상

#### 4.1.3 ShopDetailDrawer 데이터 구조 매핑 완성
- **현재 상태**: 데이터 구조 불일치로 일부 필드 표시 불가
- **목표**: 완전한 데이터 매핑 및 실시간 업데이트
- **기술 요구사항**:
  - snake_case → camelCase 변환 완성
  - 관계형 데이터 처리 (KOL 이름, 매장 통계)
  - 할당 이력 실시간 조회 구현
  - 디바이스 통계 연동

#### 4.1.4 NewShopDialog 다중 훅 최적화
- **현재 상태**: 여러 훅 의존성으로 복잡한 상태 관리
- **목표**: 단순화된 Convex 기반 생성 플로우
- **기술 요구사항**:
  - KOL 선택과 매장 생성의 일관된 데이터 플로우
  - 실시간 유효성 검증
  - 생성 후 자동 관계 설정
  - 에러 처리 및 사용자 피드백 개선

### 4.2 시스템 최적화 및 안정성

#### 4.2.1 Convex 스키마 활용도 향상
- **목표**: allocations, device_sales 테이블 완전 활용
- **기술 요구사항**:
  - 할당 이력 관리 시스템 구현
  - 디바이스 판매 통계 실시간 집계
  - 커미션 계산 로직 Convex 함수로 이전
  - 관계형 데이터 무결성 보장

#### 4.2.2 Legacy API 엔드포인트 정리
- **목표**: 불필요한 API 엔드포인트 제거 및 deprecated 마킹
- **기술 요구사항**:
  - /api/admin-new/shops/* 엔드포인트 분석 및 제거 계획
  - /api/profiles 최적화 또는 Convex 대체
  - 인증 관련 API 안정성 검증
  - API 응답 캐싱 전략 최적화

#### 4.2.3 통합 테스트 및 성능 최적화
- **목표**: 전체 시스템 안정성 및 성능 검증
- **기술 요구사항**:
  - 실시간 동기화 성능 측정 및 최적화
  - 대용량 데이터 처리 테스트
  - 동시 사용자 시나리오 검증
  - 메모리 누수 및 성능 병목 지점 해결

## 5. 성공 기준

### 5.1 기능적 성공 기준
- [ ] 모든 UI 컴포넌트가 Convex 기반으로 전환 완료
- [ ] 실시간 데이터 동기화 100% 정상 작동
- [ ] 타입 에러 0개 달성 (TypeScript strict mode)
- [ ] 모든 CRUD 작업이 실시간으로 반영

### 5.2 성능적 성공 기준
- [ ] 페이지 로딩 시간 2초 이내
- [ ] 실시간 업데이트 지연 시간 500ms 이내
- [ ] 메모리 사용량 기존 대비 20% 이하 증가
- [ ] 동시 사용자 50명 이상 안정적 처리

### 5.3 개발자 경험 성공 기준
- [ ] 새로운 기능 개발 시 Convex 패턴 일관성 유지
- [ ] 디버깅 도구 및 로깅 시스템 완성
- [ ] 코드 문서화 및 가이드 완료
- [ ] 팀 전체가 Convex 패턴 숙지 및 활용

## 6. 제한사항 및 리스크

### 6.1 기술적 제한사항
- React Query와 Convex의 패턴 차이로 인한 복잡성
- 기존 컴포넌트 인터페이스 호환성 유지 부담
- 실시간 동기화로 인한 네트워크 트래픽 증가 가능성

### 6.2 리스크 및 대응방안
- **리스크**: 복잡한 컴포넌트 전환 중 기능 손실
  - **대응**: 단계별 전환 및 철저한 테스트
- **리스크**: 성능 저하 발생 가능성
  - **대응**: 성능 모니터링 및 최적화 전략 수립
- **리스크**: 팀의 새로운 패턴 적응 기간
  - **대응**: 체계적인 문서화 및 교육 자료 제공

## 7. 마일스톤 및 우선순위

### Phase 1: 핵심 UI 컴포넌트 전환 (우선순위: 높음)
1. ShopCreateDialog 전환 및 테스트
2. ShopSidebar 실시간 동기화 구현
3. ShopDetailDrawer 데이터 매핑 완성
4. NewShopDialog 플로우 최적화

### Phase 2: 시스템 최적화 (우선순위: 중간)
1. Convex 스키마 활용도 향상
2. 성능 최적화 및 병목 지점 해결
3. Legacy API 정리 및 최적화

### Phase 3: 안정성 검증 (우선순위: 중간)
1. 통합 테스트 시스템 구축
2. 성능 모니터링 도구 설정
3. 사용자 시나리오 기반 검증

### Phase 4: 문서화 및 정리 (우선순위: 낮음)
1. 개발 가이드 완성
2. 팀 교육 자료 준비
3. 최종 코드 정리 및 리팩토링

## 8. 예상 결과물

- **완전히 Convex 기반으로 전환된 UI 컴포넌트들**
- **실시간 동기화가 적용된 관리자 시스템**
- **성능 최적화된 데이터베이스 쿼리**
- **안정적이고 확장 가능한 시스템 아키텍처**
- **체계적인 개발 가이드 및 문서** 