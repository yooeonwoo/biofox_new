## 📋 BIOFOX KOL Order Management System 상세 명세서

### 🏗️ 프로젝트 개요
BIOFOX KOL 시스템의 주문 관리 모듈을 구축하여 전문점(Shop)들의 제품 주문을 효율적으로 처리하고, 매출 데이터를 정확하게 추적하며, 커미션 계산의 기반이 되는 데이터를 체계적으로 관리한다. 특히 대량 주문 데이터의 일괄 처리와 실시간 매출 추적에 중점을 둔다.

### 🎯 비즈니스 목표
- **주문 처리 자동화**: 수동 입력 시간 95% 감소 (현재 4시간/일 → 12분/일)
- **데이터 정확도 향상**: 주문 데이터 오류율 0.1% 이하 달성
- **실시간 매출 추적**: 5분 이내 매출 현황 업데이트
- **커미션 정확도**: 주문 기반 커미션 계산 정확도 99.99% 보장

### 📊 대상 사용자 및 규모
- **Primary Users**: 
  - BIOFOX 관리자 (10명) - 전체 주문 관리
  - KOL/OL (1,000명) - 하위 매장 주문 조회
- **Secondary Users**: 
  - Shop Owner (10,000명) - 본인 주문 내역 조회
- **예상 트래픽**:
  - 일일 주문 건수: 50,000건
  - 피크 시간 주문: 5,000건/시간
  - 월간 주문 금액: 100억원

---

## 🔐 기능 요구사항

### 1. 주문 목록 및 검색

#### 1.1 고급 필터링 시스템
```typescript
interface OrderFilters {
  // 기간 필터
  dateRange: {
    from: Date
    to: Date
    preset?: 'today' | 'yesterday' | 'thisWeek' | 'lastWeek' | 
             'thisMonth' | 'lastMonth' | 'thisQuarter' | 'custom'
  }
  
  // 주문 상태
  status: OrderStatus[]  // ['pending', 'confirmed', 'shipped', 'delivered', 'cancelled']
  
  // 금액 범위
  amountRange: {
    min?: number
    max?: number
    currency?: 'KRW' | 'USD'
  }
  
  // 관계 필터
  shopId?: string[]        // 특정 매장
  kolId?: string[]         // 특정 KOL 하위
  regionId?: string[]      // 지역별
  productCategory?: string[] // 제품 카테고리
  
  // 특수 필터
  isSelfShop?: boolean     // 본인 샵 주문만
  hasCommission?: boolean  // 커미션 발생 주문만
  paymentMethod?: string[] // 결제 방법별
  
  // 검색
  search?: {
    query: string
    fields: ('orderNumber' | 'shopName' | 'productName' | 'customerName')[]
  }
}
```

#### 1.2 스마트 검색 기능
```typescript
interface SmartSearch {
  // 자동완성 설정
  autocomplete: {
    shops: {
      enabled: boolean
      minChars: 2
      maxSuggestions: 10
      priorityRules: {
        recentOrders: number    // 최근 주문 가중치
        orderFrequency: number  // 주문 빈도 가중치
        salesVolume: number     // 매출액 가중치
      }
    }
    
    products: {
      enabled: boolean
      showThumbnail: boolean
      showPrice: boolean
      showStock: boolean
      categoryGrouping: boolean
    }
  }
  
  // 검색 히스토리
  history: {
    maxItems: 20
    storage: 'localStorage' | 'sessionStorage'
    syncAcrossDevices: boolean
    categorize: boolean  // 검색 유형별 분류
  }
  
  // AI 검색 추천
  aiSuggestions: {
    enabled: boolean
    contextual: boolean  // 현재 필터 기반 추천
    trending: boolean    // 인기 검색어 표시
  }
}
```

### 2. 주문 등록 및 수정

#### 2.1 주문 등록 폼
```typescript
interface OrderForm {
  // 기본 정보
  basic: {
    orderDate: Date
    orderNumber?: string  // 자동 생성 가능
    shopId: string
    shopName?: string    // 자동 완성
    orderSource: 'online' | 'offline' | 'phone' | 'fax'
  }
  
  // 주문 항목
  items: OrderItem[]
  
  // 결제 정보
  payment: {
    method: 'card' | 'transfer' | 'cash' | 'credit'
    status: 'pending' | 'partial' | 'completed'
    paidAmount?: number
    dueDate?: Date
    installments?: number
  }
  
  // 배송 정보
  shipping: {
    method: 'direct' | 'delivery' | 'pickup'
    address?: Address
    requestedDate?: Date
    trackingNumber?: string
  }
  
  // 추가 정보
  additional: {
    notes?: string
    internalMemo?: string
    attachments?: File[]
    tags?: string[]
  }
}

interface OrderItem {
  id: string
  productId?: string
  productName: string
  productCode?: string
  
  // 수량 및 금액
  quantity: number
  unit: 'piece' | 'box' | 'set' | 'kg'
  unitPrice: number
  discount?: {
    type: 'percentage' | 'amount'
    value: number
    reason?: string
  }
  
  // 계산 필드
  subtotal: number      // quantity * unitPrice
  discountAmount: number
  total: number         // subtotal - discountAmount
  
  // 옵션
  options?: {
    color?: string
    size?: string
    customization?: string
  }
}
```

#### 2.2 주문 수정 관리
```typescript
interface OrderModification {
  // 수정 권한 체크
  permissions: {
    canModify: (order: Order, user: User) => boolean
    editableFields: string[]
    requiresApproval: string[]  // 승인 필요 필드
    auditRequired: boolean
  }
  
  // 수정 이력
  history: {
    trackChanges: boolean
    detailLevel: 'basic' | 'detailed' | 'full'
    retention: number  // days
    notifications: {
      onChange: string[]  // 알림 받을 사용자
      significantChanges: {
        threshold: number  // 금액 변경 %
        fields: string[]   // 중요 필드
      }
    }
  }
  
  // 버전 관리
  versioning: {
    enabled: boolean
    maxVersions: number
    compareVersions: boolean
    rollback: boolean
  }
}
```

### 3. 대량 주문 Import

#### 3.1 Import 시스템
```typescript
interface BulkImport {
  // 파일 처리
  fileHandler: {
    formats: ('csv' | 'xlsx' | 'json')[]
    maxSize: number  // MB
    encoding: string[]
    
    validation: {
      structure: boolean     // 파일 구조 검증
      dataTypes: boolean    // 데이터 타입 검증
      required: string[]    // 필수 컬럼
      unique: string[]      // 중복 체크 컬럼
    }
  }
  
  // 매핑 설정
  mapping: {
    auto: boolean  // 자동 매핑
    saved: Map<string, FieldMapping>  // 저장된 매핑
    ai: {
      enabled: boolean
      confidence: number  // 최소 신뢰도
      learn: boolean     // 매핑 학습
    }
  }
  
  // 처리 옵션
  processing: {
    mode: 'sync' | 'async'
    batchSize: number
    parallel: number  // 병렬 처리 수
    
    errorHandling: {
      strategy: 'skip' | 'stop' | 'queue'
      maxErrors: number
      notification: boolean
    }
    
    duplicateHandling: {
      detection: 'orderNumber' | 'composite'
      action: 'skip' | 'update' | 'merge' | 'version'
    }
  }
  
  // 검증 및 프리뷰
  preview: {
    enabled: boolean
    sampleSize: number
    showErrors: boolean
    showWarnings: boolean
    simulation: boolean  // 실제 저장 없이 시뮬레이션
  }
}

interface ImportResult {
  summary: {
    total: number
    success: number
    failed: number
    skipped: number
    duration: number
  }
  
  details: {
    processed: ImportRecord[]
    errors: ImportError[]
    warnings: ImportWarning[]
  }
  
  report: {
    downloadUrl: string
    format: 'pdf' | 'excel'
    expires: Date
  }
}
```

#### 3.2 Import 템플릿 관리
```typescript
interface ImportTemplate {
  metadata: {
    id: string
    name: string
    version: string
    description: string
    created: Date
    lastModified: Date
    usage: number
  }
  
  structure: {
    columns: ColumnDefinition[]
    sampleData: any[][]
    validation: ValidationRule[]
    formulas: Formula[]  // Excel 수식
  }
  
  customization: {
    branding: boolean    // 회사 로고/색상
    instructions: string // 사용 안내
    examples: Example[]  // 예시 데이터
    multilingual: {
      supported: string[]
      default: string
    }
  }
  
  distribution: {
    channels: ('download' | 'email' | 'api')[]
    access: 'public' | 'authenticated' | 'restricted'
    tracking: boolean  // 다운로드 추적
  }
}
```

### 4. 주문 통계 및 분석

#### 4.1 실시간 대시보드
```typescript
interface OrderDashboard {
  // 핵심 지표
  kpi: {
    todaySales: {
      amount: number
      count: number
      growth: number  // vs yesterday
      target: number
      achievement: number  // %
    }
    
    weekTrend: {
      data: TrendData[]
      forecast: number
      confidence: number
    }
    
    topPerformers: {
      shops: RankingItem[]
      products: RankingItem[]
      regions: RankingItem[]
    }
  }
  
  // 실시간 피드
  realtime: {
    recentOrders: Order[]
    updateInterval: number  // seconds
    animations: boolean
    notifications: {
      largeOrders: number    // threshold
      firstTimeShop: boolean
      milestones: number[]   // 매출 마일스톤
    }
  }
  
  // 분석 위젯
  analytics: {
    salesByHour: HeatmapData
    categoryDistribution: PieData
    paymentMethods: BarData
    geographicHeatmap: MapData
    
    customWidgets: Widget[]
  }
}
```

#### 4.2 고급 분석 기능
```typescript
interface AdvancedAnalytics {
  // 코호트 분석
  cohort: {
    type: 'monthly' | 'weekly' | 'custom'
    metrics: ('retention' | 'ltv' | 'frequency')[]
    segments: string[]
  }
  
  // 예측 분석
  forecasting: {
    models: ('arima' | 'prophet' | 'lstm')[]
    horizon: number  // days
    confidence: number[]  // intervals
    factors: string[]  // 외부 요인
  }
  
  // 이상 감지
  anomalyDetection: {
    enabled: boolean
    sensitivity: 'low' | 'medium' | 'high'
    alerts: {
      channels: ('email' | 'sms' | 'slack')[]
      recipients: string[]
      conditions: AnomalyCondition[]
    }
  }
  
  // 비교 분석
  comparison: {
    periods: ComparisonPeriod[]
    dimensions: string[]
    visualization: 'table' | 'chart' | 'both'
  }
}
```

### 5. 커미션 연동

#### 5.1 커미션 계산 통합
```typescript
interface CommissionIntegration {
  // 자동 계산
  calculation: {
    trigger: 'realtime' | 'batch' | 'manual'
    rules: CommissionRule[]
    
    overrides: {
      allowed: boolean
      approval: boolean
      reasons: string[]
    }
  }
  
  // 본인샵 판별
  selfShopDetection: {
    method: 'automatic' | 'manual'
    criteria: {
      nameMatch: number      // 유사도 %
      addressMatch: boolean
      ownerIdMatch: boolean
      override: boolean
    }
  }
  
  // 커미션 프리뷰
  preview: {
    showInOrder: boolean
    breakdown: boolean
    whatIf: boolean  // 시뮬레이션
  }
}
```

---

## 🛠️ 기술 요구사항

### Frontend 기술 스택
```json
{
  "core": {
    "react": "^18.3.0",
    "typescript": "^5.3.0",
    "next": "^14.2.0"
  },
  "dataHandling": {
    "@tanstack/react-table": "^8.0.0",
    "@tanstack/react-query": "^5.0.0",
    "react-hook-form": "^7.50.0",
    "zod": "^3.22.0"
  },
  "visualization": {
    "recharts": "^2.10.0",
    "react-map-gl": "^7.1.0",
    "@visx/visx": "^3.0.0"
  },
  "fileProcessing": {
    "xlsx": "^0.18.5",
    "papaparse": "^5.4.0",
    "file-saver": "^2.0.5"
  },
  "optimization": {
    "react-window": "^1.8.10",
    "react-intersection-observer": "^9.5.0",
    "comlink": "^4.4.0"
  }
}
```

### 백엔드 요구사항
- **데이터베이스**: PostgreSQL with 파티셔닝
- **검색 엔진**: Elasticsearch for 풀텍스트 검색
- **캐싱**: Redis for 실시간 데이터
- **메시지 큐**: RabbitMQ for 대량 처리
- **파일 스토리지**: S3 호환 (Supabase Storage)

### 성능 목표
| 작업 | 목표 시간 | 조건 |
|------|----------|------|
| 주문 목록 로딩 | < 1초 | 10,000건 |
| 검색 자동완성 | < 200ms | 100,000건 중 |
| Excel Export | < 10초 | 50,000건 |
| Bulk Import | < 2분 | 10,000건 |
| 실시간 업데이트 | < 500ms | WebSocket |

### 확장성 요구사항
- **동시 사용자**: 1,000명
- **일일 주문**: 100,000건
- **데이터 보관**: 7년
- **가용성**: 99.9%

---

## 🎨 UI/UX 요구사항

### 디자인 시스템
1. **정보 계층구조**
   - Primary: 주문 금액, 상태
   - Secondary: 고객 정보, 제품
   - Tertiary: 메모, 태그

2. **색상 체계**
   - Success: #10B981 (완료/성공)
   - Warning: #F59E0B (대기/경고)
   - Error: #EF4444 (취소/오류)
   - Info: #3B82F6 (정보/링크)

3. **인터랙션 패턴**
   - Optimistic UI updates
   - Skeleton loading
   - Progressive disclosure
   - Inline editing with autosave

### 주요 컴포넌트

#### OrderTable 고급 기능
```typescript
interface OrderTableFeatures {
  // 컬럼 커스터마이징
  columns: {
    resizable: boolean
    reorderable: boolean
    freezable: boolean  // 고정 컬럼
    groupable: boolean
    
    customization: {
      save: boolean      // 설정 저장
      share: boolean     // 팀 공유
      presets: Preset[]  // 프리셋
    }
  }
  
  // 인라인 액션
  inlineActions: {
    edit: boolean
    quickView: boolean
    statusChange: boolean
    print: boolean
    share: boolean
  }
  
  // 고급 기능
  advanced: {
    multiSort: boolean
    grouping: boolean
    aggregation: boolean
    export: {
      formats: ('excel' | 'csv' | 'pdf')[]
      scheduling: boolean
    }
  }
}
```

#### 모바일 최적화
```typescript
interface MobileOptimization {
  // 터치 인터페이스
  touch: {
    swipeActions: SwipeAction[]
    pullToRefresh: boolean
    hapticFeedback: boolean
  }
  
  // 반응형 레이아웃
  responsive: {
    breakpoints: {
      mobile: 768
      tablet: 1024
      desktop: 1440
    }
    
    layouts: {
      mobile: 'card' | 'list'
      tablet: 'compact-table'
      desktop: 'full-table'
    }
  }
  
  // 오프라인 지원
  offline: {
    enabled: boolean
    syncOnReconnect: boolean
    localFirst: boolean
  }
}
```

---

## 🔒 보안 요구사항

### 데이터 보안
1. **접근 제어**
   - Row-level security
   - Field-level encryption (금액, 고객정보)
   - API rate limiting
   - SQL injection 방지

2. **감사 추적**
   ```typescript
   interface AuditLog {
     action: 'view' | 'create' | 'update' | 'delete' | 'export'
     resource: 'order' | 'orderItem' | 'payment'
     resourceId: string
     
     user: {
       id: string
       ip: string
       userAgent: string
       location?: GeoLocation
     }
     
     changes?: FieldChange[]
     timestamp: Date
     
     security: {
       suspicious: boolean
       riskScore: number
       blocked: boolean
     }
   }
   ```

3. **데이터 프라이버시**
   - PII 자동 마스킹
   - Export 제한 및 워터마크
   - 다운로드 추적
   - GDPR 준수 (Right to be forgotten)

### 비즈니스 로직 보호
- 커미션 계산 로직 서버사이드 only
- 가격 정책 암호화
- API 응답 필드 최소화
- GraphQL 쿼리 깊이 제한

---

## 📈 측정 가능한 성공 지표

### 비즈니스 KPI
| 지표 | 현재 | 목표 | 측정 방법 |
|------|------|------|----------|
| 일일 주문 처리량 | 10,000건 | 50,000건 | 시스템 로그 |
| 주문 입력 시간 | 5분/건 | 30초/건 | 사용자 추적 |
| 데이터 오류율 | 3% | 0.1% | 검증 로그 |
| 사용자 만족도 | 60% | 90% | NPS 조사 |

### 기술적 성과
- **성능**: 모든 API p95 < 500ms
- **가용성**: 99.9% uptime
- **확장성**: 10x 트래픽 처리 가능
- **품질**: 코드 커버리지 > 85%

---

## 🚀 구현 로드맵

### Phase 1: 핵심 기능 (3주)
**Week 1-2: 기반 구축**
- [ ] 데이터 모델 설계 및 마이그레이션
- [ ] 기본 CRUD API 구현
- [ ] 주문 목록 UI 개발
- [ ] 기본 필터링 기능

**Week 3: 주문 관리**
- [ ] 주문 등록/수정 폼
- [ ] 실시간 검증
- [ ] 기본 검색 기능

### Phase 2: 고급 기능 (3주)
**Week 4-5: Import/Export**
- [ ] Excel/CSV Import 엔진
- [ ] 템플릿 관리 시스템
- [ ] 대량 Export 기능
- [ ] 진행률 및 알림

**Week 6: 검색 및 필터**
- [ ] Elasticsearch 통합
- [ ] 자동완성 구현
- [ ] 고급 필터 UI
- [ ] 필터 프리셋 관리

### Phase 3: 분석 및 최적화 (2주)
**Week 7: 대시보드**
- [ ] 실시간 대시보드
- [ ] 통계 위젯
- [ ] 데이터 시각화

**Week 8: 최적화**
- [ ] 성능 튜닝
- [ ] 모바일 최적화
- [ ] 테스트 및 버그 수정

### Phase 4: 통합 및 배포 (1주)
- [ ] 커미션 시스템 연동
- [ ] 보안 감사
- [ ] 사용자 교육
- [ ] 단계적 배포

---

## 📋 완료 체크리스트

### 기능 완성도
- [ ] 모든 주문 CRUD 작업 정상 동작
- [ ] 50,000건 주문 1초 내 로딩
- [ ] 10,000건 Excel Import 2분 내 완료
- [ ] 자동완성 검색 200ms 내 응답
- [ ] 실시간 대시보드 500ms 내 업데이트

### 품질 보증
- [ ] 단위 테스트 커버리지 > 85%
- [ ] 통합 테스트 시나리오 100% 통과
- [ ] 부하 테스트 (1000 동시 사용자) 통과
- [ ] 보안 취약점 스캔 0 critical issues

### 사용자 경험
- [ ] 모바일 반응형 100% 지원
- [ ] 접근성 WCAG 2.1 AA 준수
- [ ] 다국어 지원 (한/영)
- [ ] 사용자 매뉴얼 및 동영상 튜토리얼

### 운영 준비
- [ ] 모니터링 대시보드 구축
- [ ] 백업 및 복구 절차 수립
- [ ] 운영 매뉴얼 작성
- [ ] SLA 정의 및 합의